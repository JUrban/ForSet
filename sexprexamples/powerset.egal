(*** Generic Header ***)
Variable aSet: set -> prop.
Variable aElementOf: set -> set -> prop.
Variable aPowerset: set -> set.
Variable Separ: set -> (set -> prop) -> set.
Variable Replac: set -> (set -> set) -> set.
Variable Replac2: set -> (set -> set) -> (set -> set -> set) -> set.
Variable Pair: set -> set -> set.
Variable aFunction: set -> prop.
Variable Dom: set -> set.
Variable funap: set -> set -> set.
Variable iLess: set -> set -> prop.
Hypothesis aPowerset_ax: forall X, aSet (aPowerset X) /\ (forall Y, aElementOf Y (aPowerset X) <-> aSet Y /\ forall Z, aElementOf Z Y -> aElementOf Z X).

(*** Main ***)
Hypothesis A1: (forall xf, ((aFunction xf) -> (forall v1, ((aElementOf v1 (Dom xf)) -> (aSet (funap xf v1)))))).
Definition aSubsetOf : set -> set -> prop := (fun v2 => (fun xM => ((aSet v2) /\ (forall v3, ((aElementOf v3 v2) -> (aElementOf v3 xM)))))).
Definition tthePowersetOf : set -> set := (fun xM => (aPowerset xM)).
Definition doSurjectsOnto : set -> set -> prop := (fun xf => (fun xM => (forall v6, ((aElementOf v6 xM) -> (exists v7, ((aElementOf v7 (Dom xf)) /\ (v6 = (funap xf v7)))))))).
Theorem thm1: (forall xM, ((aSet xM) -> (forall v8, (((aFunction v8) /\ ((Dom v8) = xM)) -> (~ (doSurjectsOnto v8 (tthePowersetOf xM))))))).
let xM.
assume H5: (aSet xM).
apply NNPP. assume H6.
claim L1: (exists xf, ((aFunction xf) /\ (((Dom xf) = xM) /\ (doSurjectsOnto xf (tthePowersetOf xM))))).
admit.
apply L1. let xf. assume H7.
claim L2: (exists xN, ((aSet xN) /\ (xN = Separ xM (fun v9 => (~ (aElementOf v9 (funap xf v9))))))).
admit.
apply L2. let xN. assume H8.
claim H9: (forall v10, ((aElementOf v10 xM) -> (~ (xN = (funap xf v10))))).
admit.
admit.
Qed.
