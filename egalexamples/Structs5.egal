Definition pack_c_b_u_u_r : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> set := fun X C f i j R => (X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_r X R).

Definition struct_c_b_u_u_r : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists i:set -> set, exists j:set -> set, exists R:set -> set -> prop, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ S = pack_c_b_u_u_r X C f i j R.

Theorem pack_c_b_u_u_r_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall i i':set -> set, forall j j':set -> set, forall R R':set -> set -> prop,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 pack_c_b_u_u_r X C f i j R = pack_c_b_u_u_r X C' f' i' j' R'.
let X C C' f f' i i' j j' R R'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_r X R) = (X,encode_c X C',encode_b X f',encode_u X i',encode_u X j',encode_r X R').
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H4. }
rewrite <- L4.
claim L5: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_c_b_u_u_r_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_c_b_u_u_r X C f i j R -> X = S 0.
let S X C f i j R. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_r X R) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_u_u_r_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_c_b_u_u_r X C f i j R -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f i j R. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_r X R) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_u_u_r_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_c_b_u_u_r X C f i j R -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f i j R. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_r X R) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_u_u_r_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_c_b_u_u_r X C f i j R -> forall x :e X, i x = decode_u (S 3) x.
let S X C f i j R. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_r X R) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_b_u_u_r_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_c_b_u_u_r X C f i j R -> forall x :e X, j x = decode_u (S 4) x.
let S X C f i j R. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_r X R) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_c_b_u_u_r_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_c_b_u_u_r X C f i j R -> forall x y :e X, R x y = decode_r (S 5) x y.
let S X C f i j R. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_r X R) 5) x y.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem pack_struct_c_b_u_u_r: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> struct_c_b_u_u_r (pack_c_b_u_u_r X C f i j R).
let X C f i j R.
assume H2.
assume H3.
assume H4.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists i':set -> set, exists j':set -> set, exists R':set -> set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ pack_c_b_u_u_r X C f i j R = pack_c_b_u_u_r X' C' f' i' j' R'.
witness X. witness C. witness f. witness i. witness j. witness R.
apply andI.
apply andI.
apply andI.
exact H2.
exact H3.
exact H4.
apply eqI set.
Qed.

Theorem struct_c_b_u_u_r_eta: forall S, struct_c_b_u_u_r S -> S = pack_c_b_u_u_r (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (decode_r (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let i.
assume H4. apply H4. let j.
assume H5. apply H5. let R.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_u_u_r_0_eq S X C f i j R Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_u X (decode_u (S 4)),encode_r X (decode_r (S 5))).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_u_u_r_1_eq S X C f i j R Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_u_u_r_2_eq S X C f i j R Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_c_b_u_u_r_3_eq S X C f i j R Heq.
}
rewrite <- L3.
claim L4: encode_u X j = encode_u X (decode_u (S 4)).
{ apply encode_u_ext.
  exact struct_c_b_u_u_r_4_eq S X C f i j R Heq.
}
rewrite <- L4.
claim L5: encode_r X R = encode_r X (decode_r (S 5)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_u_u_r_5_eq S X C f i j R Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_u_u_r.

Variable A:SType.

Definition unpack_c_b_u_u_r : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (decode_r (S 5)).

Theorem unpack_c_b_u_u_r_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) -> Phi X C f i j R = Phi X C' f' i' j' R')
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, unpack_c_b_u_u_r (pack_c_b_u_u_r X C f i j R) Phi = Phi X C f i j R.
let Phi.
assume HPhi.
let X C f i j R.
prove Phi (pack_c_b_u_u_r X C f i j R 0) (decode_c (pack_c_b_u_u_r X C f i j R 1)) (decode_b (pack_c_b_u_u_r X C f i j R 2)) (decode_u (pack_c_b_u_u_r X C f i j R 3)) (decode_u (pack_c_b_u_u_r X C f i j R 4)) (decode_r (pack_c_b_u_u_r X C f i j R 5)) = Phi X C f i j R.
rewrite <- struct_c_b_u_u_r_0_eq (pack_c_b_u_u_r X C f i j R) X C f i j R (eqI set (pack_c_b_u_u_r X C f i j R)).
prove Phi X (decode_c (pack_c_b_u_u_r X C f i j R 1)) (decode_b (pack_c_b_u_u_r X C f i j R 2)) (decode_u (pack_c_b_u_u_r X C f i j R 3)) (decode_u (pack_c_b_u_u_r X C f i j R 4)) (decode_r (pack_c_b_u_u_r X C f i j R 5)) = Phi X C f i j R.
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_u_u_r X C f i j R 1) U <-> C U.
  rewrite <- struct_c_b_u_u_r_1_eq (pack_c_b_u_u_r X C f i j R) X C f i j R (eqI set (pack_c_b_u_u_r X C f i j R)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_u_u_r X C f i j R 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_u_u_r_2_eq (pack_c_b_u_u_r X C f i j R) X C f i j R (eqI set (pack_c_b_u_u_r X C f i j R)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_u_r X C f i j R 3) x = i x.
  apply eq_sym set.
  exact struct_c_b_u_u_r_3_eq (pack_c_b_u_u_r X C f i j R) X C f i j R (eqI set (pack_c_b_u_u_r X C f i j R)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_u_r X C f i j R 4) x = j x.
  apply eq_sym set.
  exact struct_c_b_u_u_r_4_eq (pack_c_b_u_u_r X C f i j R) X C f i j R (eqI set (pack_c_b_u_u_r X C f i j R)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_u_u_r X C f i j R 5) x y <-> R x y.
  rewrite <- struct_c_b_u_u_r_5_eq (pack_c_b_u_u_r X C f i j R) X C f i j R (eqI set (pack_c_b_u_u_r X C f i j R)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_c_b_u_u_r.

Definition pack_c_b_u_u_p : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> prop) -> set := fun X C f i j P => (X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_p X P).

Definition struct_c_b_u_u_p : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists i:set -> set, exists j:set -> set, exists P:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ S = pack_c_b_u_u_p X C f i j P.

Theorem pack_c_b_u_u_p_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall i i':set -> set, forall j j':set -> set, forall P P':set -> prop,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 (forall x :e X, P x <-> P' x) ->
 pack_c_b_u_u_p X C f i j P = pack_c_b_u_u_p X C' f' i' j' P'.
let X C C' f f' i i' j j' P P'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_p X P) = (X,encode_c X C',encode_b X f',encode_u X i',encode_u X j',encode_p X P').
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_c_b_u_u_p_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_c_b_u_u_p X C f i j P -> X = S 0.
let S X C f i j P. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_p X P) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_u_u_p_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_c_b_u_u_p X C f i j P -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f i j P. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_p X P) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_u_u_p_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_c_b_u_u_p X C f i j P -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f i j P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_p X P) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_u_u_p_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_c_b_u_u_p X C f i j P -> forall x :e X, i x = decode_u (S 3) x.
let S X C f i j P. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_p X P) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_b_u_u_p_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_c_b_u_u_p X C f i j P -> forall x :e X, j x = decode_u (S 4) x.
let S X C f i j P. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_p X P) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_c_b_u_u_p_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_c_b_u_u_p X C f i j P -> forall x :e X, P x = decode_p (S 5) x.
let S X C f i j P. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,encode_p X P) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem pack_struct_c_b_u_u_p: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> struct_c_b_u_u_p (pack_c_b_u_u_p X C f i j P).
let X C f i j P.
assume H2.
assume H3.
assume H4.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists i':set -> set, exists j':set -> set, exists P':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ pack_c_b_u_u_p X C f i j P = pack_c_b_u_u_p X' C' f' i' j' P'.
witness X. witness C. witness f. witness i. witness j. witness P.
apply andI.
apply andI.
apply andI.
exact H2.
exact H3.
exact H4.
apply eqI set.
Qed.

Theorem struct_c_b_u_u_p_eta: forall S, struct_c_b_u_u_p S -> S = pack_c_b_u_u_p (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let i.
assume H4. apply H4. let j.
assume H5. apply H5. let P.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_u_u_p_0_eq S X C f i j P Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_u X (decode_u (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_u_u_p_1_eq S X C f i j P Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_u_u_p_2_eq S X C f i j P Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_c_b_u_u_p_3_eq S X C f i j P Heq.
}
rewrite <- L3.
claim L4: encode_u X j = encode_u X (decode_u (S 4)).
{ apply encode_u_ext.
  exact struct_c_b_u_u_p_4_eq S X C f i j P Heq.
}
rewrite <- L4.
claim L5: encode_p X P = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_u_u_p_5_eq S X C f i j P Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_u_u_p.

Variable A:SType.

Definition unpack_c_b_u_u_p : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (decode_p (S 5)).

Theorem unpack_c_b_u_u_p_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> prop) -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> Phi X C f i j P = Phi X C' f' i' j' P')
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, unpack_c_b_u_u_p (pack_c_b_u_u_p X C f i j P) Phi = Phi X C f i j P.
let Phi.
assume HPhi.
let X C f i j P.
prove Phi (pack_c_b_u_u_p X C f i j P 0) (decode_c (pack_c_b_u_u_p X C f i j P 1)) (decode_b (pack_c_b_u_u_p X C f i j P 2)) (decode_u (pack_c_b_u_u_p X C f i j P 3)) (decode_u (pack_c_b_u_u_p X C f i j P 4)) (decode_p (pack_c_b_u_u_p X C f i j P 5)) = Phi X C f i j P.
rewrite <- struct_c_b_u_u_p_0_eq (pack_c_b_u_u_p X C f i j P) X C f i j P (eqI set (pack_c_b_u_u_p X C f i j P)).
prove Phi X (decode_c (pack_c_b_u_u_p X C f i j P 1)) (decode_b (pack_c_b_u_u_p X C f i j P 2)) (decode_u (pack_c_b_u_u_p X C f i j P 3)) (decode_u (pack_c_b_u_u_p X C f i j P 4)) (decode_p (pack_c_b_u_u_p X C f i j P 5)) = Phi X C f i j P.
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_u_u_p X C f i j P 1) U <-> C U.
  rewrite <- struct_c_b_u_u_p_1_eq (pack_c_b_u_u_p X C f i j P) X C f i j P (eqI set (pack_c_b_u_u_p X C f i j P)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_u_u_p X C f i j P 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_u_u_p_2_eq (pack_c_b_u_u_p X C f i j P) X C f i j P (eqI set (pack_c_b_u_u_p X C f i j P)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_u_p X C f i j P 3) x = i x.
  apply eq_sym set.
  exact struct_c_b_u_u_p_3_eq (pack_c_b_u_u_p X C f i j P) X C f i j P (eqI set (pack_c_b_u_u_p X C f i j P)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_u_p X C f i j P 4) x = j x.
  apply eq_sym set.
  exact struct_c_b_u_u_p_4_eq (pack_c_b_u_u_p X C f i j P) X C f i j P (eqI set (pack_c_b_u_u_p X C f i j P)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_c_b_u_u_p X C f i j P 5) x <-> P x.
  rewrite <- struct_c_b_u_u_p_5_eq (pack_c_b_u_u_p X C f i j P) X C f i j P (eqI set (pack_c_b_u_u_p X C f i j P)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_b_u_u_p.

Definition pack_c_b_u_u_e : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> set -> set := fun X C f i j c => (X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,c).

Definition struct_c_b_u_u_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists i:set -> set, exists j:set -> set, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ c :e X /\ S = pack_c_b_u_u_e X C f i j c.

Theorem pack_c_b_u_u_e_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall i i':set -> set, forall j j':set -> set, forall c,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 pack_c_b_u_u_e X C f i j c = pack_c_b_u_u_e X C' f' i' j' c.
let X C C' f f' i i' j j' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,c) = (X,encode_c X C',encode_b X f',encode_u X i',encode_u X j',c).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_c_b_u_u_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_c_b_u_u_e X C f i j c -> X = S 0.
let S X C f i j c. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_u_u_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_c_b_u_u_e X C f i j c -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f i j c. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,c) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_u_u_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_c_b_u_u_e X C f i j c -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f i j c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_u_u_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_c_b_u_u_e X C f i j c -> forall x :e X, i x = decode_u (S 3) x.
let S X C f i j c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_b_u_u_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_c_b_u_u_e X C f i j c -> forall x :e X, j x = decode_u (S 4) x.
let S X C f i j c. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_c_b_u_u_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_c_b_u_u_e X C f i j c -> c = S 5.
let S X C f i j c. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_b X f,encode_u X i,encode_u X j,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_b_u_u_e: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> c :e X -> struct_c_b_u_u_e (pack_c_b_u_u_e X C f i j c).
let X C f i j c.
assume H2.
assume H3.
assume H4.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists i':set -> set, exists j':set -> set, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ c' :e X' /\ pack_c_b_u_u_e X C f i j c = pack_c_b_u_u_e X' C' f' i' j' c'.
witness X. witness C. witness f. witness i. witness j. witness c.
apply andI.
apply andI.
apply andI.
apply andI.
exact H2.
exact H3.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_b_u_u_e_eta: forall S, struct_c_b_u_u_e S -> S = pack_c_b_u_u_e (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let i.
assume H4. apply H4. let j.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_u_u_e_0_eq S X C f i j c Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_u X (decode_u (S 4)),S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_u_u_e_1_eq S X C f i j c Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_u_u_e_2_eq S X C f i j c Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_c_b_u_u_e_3_eq S X C f i j c Heq.
}
rewrite <- L3.
claim L4: encode_u X j = encode_u X (decode_u (S 4)).
{ apply encode_u_ext.
  exact struct_c_b_u_u_e_4_eq S X C f i j c Heq.
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_c_b_u_u_e_5_eq S X C f i j c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_u_u_e.

Variable A:SType.

Definition unpack_c_b_u_u_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (S 5).

Theorem unpack_c_b_u_u_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall c,Phi X C f i j c = Phi X C' f' i' j' c)
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, unpack_c_b_u_u_e (pack_c_b_u_u_e X C f i j c) Phi = Phi X C f i j c.
let Phi.
assume HPhi.
let X C f i j c.
prove Phi (pack_c_b_u_u_e X C f i j c 0) (decode_c (pack_c_b_u_u_e X C f i j c 1)) (decode_b (pack_c_b_u_u_e X C f i j c 2)) (decode_u (pack_c_b_u_u_e X C f i j c 3)) (decode_u (pack_c_b_u_u_e X C f i j c 4)) (pack_c_b_u_u_e X C f i j c 5) = Phi X C f i j c.
rewrite <- struct_c_b_u_u_e_0_eq (pack_c_b_u_u_e X C f i j c) X C f i j c (eqI set (pack_c_b_u_u_e X C f i j c)).
prove Phi X (decode_c (pack_c_b_u_u_e X C f i j c 1)) (decode_b (pack_c_b_u_u_e X C f i j c 2)) (decode_u (pack_c_b_u_u_e X C f i j c 3)) (decode_u (pack_c_b_u_u_e X C f i j c 4)) (pack_c_b_u_u_e X C f i j c 5) = Phi X C f i j c.
rewrite <- struct_c_b_u_u_e_5_eq (pack_c_b_u_u_e X C f i j c) X C f i j c (eqI set (pack_c_b_u_u_e X C f i j c)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_u_u_e X C f i j c 1) U <-> C U.
  rewrite <- struct_c_b_u_u_e_1_eq (pack_c_b_u_u_e X C f i j c) X C f i j c (eqI set (pack_c_b_u_u_e X C f i j c)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_u_u_e X C f i j c 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_u_u_e_2_eq (pack_c_b_u_u_e X C f i j c) X C f i j c (eqI set (pack_c_b_u_u_e X C f i j c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_u_e X C f i j c 3) x = i x.
  apply eq_sym set.
  exact struct_c_b_u_u_e_3_eq (pack_c_b_u_u_e X C f i j c) X C f i j c (eqI set (pack_c_b_u_u_e X C f i j c)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_u_e X C f i j c 4) x = j x.
  apply eq_sym set.
  exact struct_c_b_u_u_e_4_eq (pack_c_b_u_u_e X C f i j c) X C f i j c (eqI set (pack_c_b_u_u_e X C f i j c)) x Hx.
Qed.

End unpack_c_b_u_u_e.

Definition pack_c_b_u_r_r : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set := fun X C f i R T => (X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_r X T).

Definition struct_c_b_u_r_r : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ S = pack_c_b_u_r_r X C f i R T.

Theorem pack_c_b_u_r_r_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 pack_c_b_u_r_r X C f i R T = pack_c_b_u_r_r X C' f' i' R' T'.
let X C C' f f' i i' R R' T T'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_r X T) = (X,encode_c X C',encode_b X f',encode_u X i',encode_r X R',encode_r X T').
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
claim L5: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_c_b_u_r_r_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_c_b_u_r_r X C f i R T -> X = S 0.
let S X C f i R T. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_r X T) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_u_r_r_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_c_b_u_r_r X C f i R T -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f i R T. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_r X T) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_u_r_r_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_c_b_u_r_r X C f i R T -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f i R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_r X T) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_u_r_r_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_c_b_u_r_r X C f i R T -> forall x :e X, i x = decode_u (S 3) x.
let S X C f i R T. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_r X T) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_b_u_r_r_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_c_b_u_r_r X C f i R T -> forall x y :e X, R x y = decode_r (S 4) x y.
let S X C f i R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_r X T) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_b_u_r_r_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_c_b_u_r_r X C f i R T -> forall x y :e X, T x y = decode_r (S 5) x y.
let S X C f i R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_r X T) 5) x y.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem pack_struct_c_b_u_r_r: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> struct_c_b_u_r_r (pack_c_b_u_r_r X C f i R T).
let X C f i R T.
assume H2.
assume H3.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ pack_c_b_u_r_r X C f i R T = pack_c_b_u_r_r X' C' f' i' R' T'.
witness X. witness C. witness f. witness i. witness R. witness T.
apply andI.
apply andI.
exact H2.
exact H3.
apply eqI set.
Qed.

Theorem struct_c_b_u_r_r_eta: forall S, struct_c_b_u_r_r S -> S = pack_c_b_u_r_r (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (decode_r (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let i.
assume H4. apply H4. let R.
assume H5. apply H5. let T.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_u_r_r_0_eq S X C f i R T Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_r X (decode_r (S 4)),encode_r X (decode_r (S 5))).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_u_r_r_1_eq S X C f i R T Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_u_r_r_2_eq S X C f i R T Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_c_b_u_r_r_3_eq S X C f i R T Heq.
}
rewrite <- L3.
claim L4: encode_r X R = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_u_r_r_4_eq S X C f i R T Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L4.
claim L5: encode_r X T = encode_r X (decode_r (S 5)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_u_r_r_5_eq S X C f i R T Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_u_r_r.

Variable A:SType.

Definition unpack_c_b_u_r_r : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (decode_r (S 5)).

Theorem unpack_c_b_u_r_r_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) -> Phi X C f i R T = Phi X C' f' i' R' T')
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, unpack_c_b_u_r_r (pack_c_b_u_r_r X C f i R T) Phi = Phi X C f i R T.
let Phi.
assume HPhi.
let X C f i R T.
prove Phi (pack_c_b_u_r_r X C f i R T 0) (decode_c (pack_c_b_u_r_r X C f i R T 1)) (decode_b (pack_c_b_u_r_r X C f i R T 2)) (decode_u (pack_c_b_u_r_r X C f i R T 3)) (decode_r (pack_c_b_u_r_r X C f i R T 4)) (decode_r (pack_c_b_u_r_r X C f i R T 5)) = Phi X C f i R T.
rewrite <- struct_c_b_u_r_r_0_eq (pack_c_b_u_r_r X C f i R T) X C f i R T (eqI set (pack_c_b_u_r_r X C f i R T)).
prove Phi X (decode_c (pack_c_b_u_r_r X C f i R T 1)) (decode_b (pack_c_b_u_r_r X C f i R T 2)) (decode_u (pack_c_b_u_r_r X C f i R T 3)) (decode_r (pack_c_b_u_r_r X C f i R T 4)) (decode_r (pack_c_b_u_r_r X C f i R T 5)) = Phi X C f i R T.
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_u_r_r X C f i R T 1) U <-> C U.
  rewrite <- struct_c_b_u_r_r_1_eq (pack_c_b_u_r_r X C f i R T) X C f i R T (eqI set (pack_c_b_u_r_r X C f i R T)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_u_r_r X C f i R T 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_u_r_r_2_eq (pack_c_b_u_r_r X C f i R T) X C f i R T (eqI set (pack_c_b_u_r_r X C f i R T)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_r_r X C f i R T 3) x = i x.
  apply eq_sym set.
  exact struct_c_b_u_r_r_3_eq (pack_c_b_u_r_r X C f i R T) X C f i R T (eqI set (pack_c_b_u_r_r X C f i R T)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_u_r_r X C f i R T 4) x y <-> R x y.
  rewrite <- struct_c_b_u_r_r_4_eq (pack_c_b_u_r_r X C f i R T) X C f i R T (eqI set (pack_c_b_u_r_r X C f i R T)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_u_r_r X C f i R T 5) x y <-> T x y.
  rewrite <- struct_c_b_u_r_r_5_eq (pack_c_b_u_r_r X C f i R T) X C f i R T (eqI set (pack_c_b_u_r_r X C f i R T)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_c_b_u_r_r.

Definition pack_c_b_u_r_p : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set := fun X C f i R P => (X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_p X P).

Definition struct_c_b_u_r_p : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, exists P:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ S = pack_c_b_u_r_p X C f i R P.

Theorem pack_c_b_u_r_p_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop, forall P P':set -> prop,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_c_b_u_r_p X C f i R P = pack_c_b_u_r_p X C' f' i' R' P'.
let X C C' f f' i i' R R' P P'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_p X P) = (X,encode_c X C',encode_b X f',encode_u X i',encode_r X R',encode_p X P').
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_c_b_u_r_p_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_c_b_u_r_p X C f i R P -> X = S 0.
let S X C f i R P. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_p X P) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_u_r_p_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_c_b_u_r_p X C f i R P -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f i R P. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_p X P) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_u_r_p_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_c_b_u_r_p X C f i R P -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f i R P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_p X P) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_u_r_p_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_c_b_u_r_p X C f i R P -> forall x :e X, i x = decode_u (S 3) x.
let S X C f i R P. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_p X P) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_b_u_r_p_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_c_b_u_r_p X C f i R P -> forall x y :e X, R x y = decode_r (S 4) x y.
let S X C f i R P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_p X P) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_b_u_r_p_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_c_b_u_r_p X C f i R P -> forall x :e X, P x = decode_p (S 5) x.
let S X C f i R P. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,encode_p X P) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem pack_struct_c_b_u_r_p: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> struct_c_b_u_r_p (pack_c_b_u_r_p X C f i R P).
let X C f i R P.
assume H2.
assume H3.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop, exists P':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ pack_c_b_u_r_p X C f i R P = pack_c_b_u_r_p X' C' f' i' R' P'.
witness X. witness C. witness f. witness i. witness R. witness P.
apply andI.
apply andI.
exact H2.
exact H3.
apply eqI set.
Qed.

Theorem struct_c_b_u_r_p_eta: forall S, struct_c_b_u_r_p S -> S = pack_c_b_u_r_p (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let i.
assume H4. apply H4. let R.
assume H5. apply H5. let P.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_u_r_p_0_eq S X C f i R P Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_r X (decode_r (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_u_r_p_1_eq S X C f i R P Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_u_r_p_2_eq S X C f i R P Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_c_b_u_r_p_3_eq S X C f i R P Heq.
}
rewrite <- L3.
claim L4: encode_r X R = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_u_r_p_4_eq S X C f i R P Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L4.
claim L5: encode_p X P = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_u_r_p_5_eq S X C f i R P Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_u_r_p.

Variable A:SType.

Definition unpack_c_b_u_r_p : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (decode_p (S 5)).

Theorem unpack_c_b_u_r_p_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> Phi X C f i R P = Phi X C' f' i' R' P')
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, unpack_c_b_u_r_p (pack_c_b_u_r_p X C f i R P) Phi = Phi X C f i R P.
let Phi.
assume HPhi.
let X C f i R P.
prove Phi (pack_c_b_u_r_p X C f i R P 0) (decode_c (pack_c_b_u_r_p X C f i R P 1)) (decode_b (pack_c_b_u_r_p X C f i R P 2)) (decode_u (pack_c_b_u_r_p X C f i R P 3)) (decode_r (pack_c_b_u_r_p X C f i R P 4)) (decode_p (pack_c_b_u_r_p X C f i R P 5)) = Phi X C f i R P.
rewrite <- struct_c_b_u_r_p_0_eq (pack_c_b_u_r_p X C f i R P) X C f i R P (eqI set (pack_c_b_u_r_p X C f i R P)).
prove Phi X (decode_c (pack_c_b_u_r_p X C f i R P 1)) (decode_b (pack_c_b_u_r_p X C f i R P 2)) (decode_u (pack_c_b_u_r_p X C f i R P 3)) (decode_r (pack_c_b_u_r_p X C f i R P 4)) (decode_p (pack_c_b_u_r_p X C f i R P 5)) = Phi X C f i R P.
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_u_r_p X C f i R P 1) U <-> C U.
  rewrite <- struct_c_b_u_r_p_1_eq (pack_c_b_u_r_p X C f i R P) X C f i R P (eqI set (pack_c_b_u_r_p X C f i R P)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_u_r_p X C f i R P 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_u_r_p_2_eq (pack_c_b_u_r_p X C f i R P) X C f i R P (eqI set (pack_c_b_u_r_p X C f i R P)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_r_p X C f i R P 3) x = i x.
  apply eq_sym set.
  exact struct_c_b_u_r_p_3_eq (pack_c_b_u_r_p X C f i R P) X C f i R P (eqI set (pack_c_b_u_r_p X C f i R P)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_u_r_p X C f i R P 4) x y <-> R x y.
  rewrite <- struct_c_b_u_r_p_4_eq (pack_c_b_u_r_p X C f i R P) X C f i R P (eqI set (pack_c_b_u_r_p X C f i R P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_b_u_r_p X C f i R P 5) x <-> P x.
  rewrite <- struct_c_b_u_r_p_5_eq (pack_c_b_u_r_p X C f i R P) X C f i R P (eqI set (pack_c_b_u_r_p X C f i R P)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_b_u_r_p.

Definition pack_c_b_u_r_e : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> set := fun X C f i R c => (X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,c).

Definition struct_c_b_u_r_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ S = pack_c_b_u_r_e X C f i R c.

Theorem pack_c_b_u_r_e_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop, forall c,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 pack_c_b_u_r_e X C f i R c = pack_c_b_u_r_e X C' f' i' R' c.
let X C C' f f' i i' R R' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,c) = (X,encode_c X C',encode_b X f',encode_u X i',encode_r X R',c).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_c_b_u_r_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_c_b_u_r_e X C f i R c -> X = S 0.
let S X C f i R c. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_u_r_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_c_b_u_r_e X C f i R c -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f i R c. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,c) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_u_r_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_c_b_u_r_e X C f i R c -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f i R c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_u_r_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_c_b_u_r_e X C f i R c -> forall x :e X, i x = decode_u (S 3) x.
let S X C f i R c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_b_u_r_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_c_b_u_r_e X C f i R c -> forall x y :e X, R x y = decode_r (S 4) x y.
let S X C f i R c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,c) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_b_u_r_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_c_b_u_r_e X C f i R c -> c = S 5.
let S X C f i R c. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_b X f,encode_u X i,encode_r X R,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_b_u_r_e: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> struct_c_b_u_r_e (pack_c_b_u_r_e X C f i R c).
let X C f i R c.
assume H2.
assume H3.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_c_b_u_r_e X C f i R c = pack_c_b_u_r_e X' C' f' i' R' c'.
witness X. witness C. witness f. witness i. witness R. witness c.
apply andI.
apply andI.
apply andI.
exact H2.
exact H3.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_b_u_r_e_eta: forall S, struct_c_b_u_r_e S -> S = pack_c_b_u_r_e (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let i.
assume H4. apply H4. let R.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_u_r_e_0_eq S X C f i R c Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_r X (decode_r (S 4)),S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_u_r_e_1_eq S X C f i R c Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_u_r_e_2_eq S X C f i R c Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_c_b_u_r_e_3_eq S X C f i R c Heq.
}
rewrite <- L3.
claim L4: encode_r X R = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_u_r_e_4_eq S X C f i R c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_c_b_u_r_e_5_eq S X C f i R c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_u_r_e.

Variable A:SType.

Definition unpack_c_b_u_r_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (S 5).

Theorem unpack_c_b_u_r_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall c,Phi X C f i R c = Phi X C' f' i' R' c)
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, unpack_c_b_u_r_e (pack_c_b_u_r_e X C f i R c) Phi = Phi X C f i R c.
let Phi.
assume HPhi.
let X C f i R c.
prove Phi (pack_c_b_u_r_e X C f i R c 0) (decode_c (pack_c_b_u_r_e X C f i R c 1)) (decode_b (pack_c_b_u_r_e X C f i R c 2)) (decode_u (pack_c_b_u_r_e X C f i R c 3)) (decode_r (pack_c_b_u_r_e X C f i R c 4)) (pack_c_b_u_r_e X C f i R c 5) = Phi X C f i R c.
rewrite <- struct_c_b_u_r_e_0_eq (pack_c_b_u_r_e X C f i R c) X C f i R c (eqI set (pack_c_b_u_r_e X C f i R c)).
prove Phi X (decode_c (pack_c_b_u_r_e X C f i R c 1)) (decode_b (pack_c_b_u_r_e X C f i R c 2)) (decode_u (pack_c_b_u_r_e X C f i R c 3)) (decode_r (pack_c_b_u_r_e X C f i R c 4)) (pack_c_b_u_r_e X C f i R c 5) = Phi X C f i R c.
rewrite <- struct_c_b_u_r_e_5_eq (pack_c_b_u_r_e X C f i R c) X C f i R c (eqI set (pack_c_b_u_r_e X C f i R c)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_u_r_e X C f i R c 1) U <-> C U.
  rewrite <- struct_c_b_u_r_e_1_eq (pack_c_b_u_r_e X C f i R c) X C f i R c (eqI set (pack_c_b_u_r_e X C f i R c)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_u_r_e X C f i R c 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_u_r_e_2_eq (pack_c_b_u_r_e X C f i R c) X C f i R c (eqI set (pack_c_b_u_r_e X C f i R c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_r_e X C f i R c 3) x = i x.
  apply eq_sym set.
  exact struct_c_b_u_r_e_3_eq (pack_c_b_u_r_e X C f i R c) X C f i R c (eqI set (pack_c_b_u_r_e X C f i R c)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_u_r_e X C f i R c 4) x y <-> R x y.
  rewrite <- struct_c_b_u_r_e_4_eq (pack_c_b_u_r_e X C f i R c) X C f i R c (eqI set (pack_c_b_u_r_e X C f i R c)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_c_b_u_r_e.

Definition pack_c_b_u_p_p : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> set := fun X C f i P Q => (X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,encode_p X Q).

Definition struct_c_b_u_p_p : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists i:set -> set, exists P:set -> prop, exists Q:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ S = pack_c_b_u_p_p X C f i P Q.

Theorem pack_c_b_u_p_p_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall i i':set -> set, forall P P':set -> prop, forall Q Q':set -> prop,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_c_b_u_p_p X C f i P Q = pack_c_b_u_p_p X C' f' i' P' Q'.
let X C C' f f' i i' P P' Q Q'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,encode_p X Q) = (X,encode_c X C',encode_b X f',encode_u X i',encode_p X P',encode_p X Q').
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_c_b_u_p_p_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_u_p_p X C f i P Q -> X = S 0.
let S X C f i P Q. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,encode_p X Q) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_u_p_p_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_u_p_p X C f i P Q -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f i P Q. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,encode_p X Q) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_u_p_p_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_u_p_p X C f i P Q -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f i P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,encode_p X Q) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_u_p_p_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_u_p_p X C f i P Q -> forall x :e X, i x = decode_u (S 3) x.
let S X C f i P Q. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,encode_p X Q) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_b_u_p_p_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_u_p_p X C f i P Q -> forall x :e X, P x = decode_p (S 4) x.
let S X C f i P Q. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,encode_p X Q) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_b_u_p_p_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_u_p_p X C f i P Q -> forall x :e X, Q x = decode_p (S 5) x.
let S X C f i P Q. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,encode_p X Q) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem pack_struct_c_b_u_p_p: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> struct_c_b_u_p_p (pack_c_b_u_p_p X C f i P Q).
let X C f i P Q.
assume H2.
assume H3.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists i':set -> set, exists P':set -> prop, exists Q':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ pack_c_b_u_p_p X C f i P Q = pack_c_b_u_p_p X' C' f' i' P' Q'.
witness X. witness C. witness f. witness i. witness P. witness Q.
apply andI.
apply andI.
exact H2.
exact H3.
apply eqI set.
Qed.

Theorem struct_c_b_u_p_p_eta: forall S, struct_c_b_u_p_p S -> S = pack_c_b_u_p_p (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_p (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let i.
assume H4. apply H4. let P.
assume H5. apply H5. let Q.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_u_p_p_0_eq S X C f i P Q Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_p X (decode_p (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_u_p_p_1_eq S X C f i P Q Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_u_p_p_2_eq S X C f i P Q Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_c_b_u_p_p_3_eq S X C f i P Q Heq.
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_u_p_p_4_eq S X C f i P Q Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: encode_p X Q = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_u_p_p_5_eq S X C f i P Q Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_u_p_p.

Variable A:SType.

Definition unpack_c_b_u_p_p : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_p (S 4)) (decode_p (S 5)).

Theorem unpack_c_b_u_p_p_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) -> Phi X C f i P Q = Phi X C' f' i' P' Q')
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, unpack_c_b_u_p_p (pack_c_b_u_p_p X C f i P Q) Phi = Phi X C f i P Q.
let Phi.
assume HPhi.
let X C f i P Q.
prove Phi (pack_c_b_u_p_p X C f i P Q 0) (decode_c (pack_c_b_u_p_p X C f i P Q 1)) (decode_b (pack_c_b_u_p_p X C f i P Q 2)) (decode_u (pack_c_b_u_p_p X C f i P Q 3)) (decode_p (pack_c_b_u_p_p X C f i P Q 4)) (decode_p (pack_c_b_u_p_p X C f i P Q 5)) = Phi X C f i P Q.
rewrite <- struct_c_b_u_p_p_0_eq (pack_c_b_u_p_p X C f i P Q) X C f i P Q (eqI set (pack_c_b_u_p_p X C f i P Q)).
prove Phi X (decode_c (pack_c_b_u_p_p X C f i P Q 1)) (decode_b (pack_c_b_u_p_p X C f i P Q 2)) (decode_u (pack_c_b_u_p_p X C f i P Q 3)) (decode_p (pack_c_b_u_p_p X C f i P Q 4)) (decode_p (pack_c_b_u_p_p X C f i P Q 5)) = Phi X C f i P Q.
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_u_p_p X C f i P Q 1) U <-> C U.
  rewrite <- struct_c_b_u_p_p_1_eq (pack_c_b_u_p_p X C f i P Q) X C f i P Q (eqI set (pack_c_b_u_p_p X C f i P Q)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_u_p_p X C f i P Q 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_u_p_p_2_eq (pack_c_b_u_p_p X C f i P Q) X C f i P Q (eqI set (pack_c_b_u_p_p X C f i P Q)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_p_p X C f i P Q 3) x = i x.
  apply eq_sym set.
  exact struct_c_b_u_p_p_3_eq (pack_c_b_u_p_p X C f i P Q) X C f i P Q (eqI set (pack_c_b_u_p_p X C f i P Q)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_c_b_u_p_p X C f i P Q 4) x <-> P x.
  rewrite <- struct_c_b_u_p_p_4_eq (pack_c_b_u_p_p X C f i P Q) X C f i P Q (eqI set (pack_c_b_u_p_p X C f i P Q)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_b_u_p_p X C f i P Q 5) x <-> Q x.
  rewrite <- struct_c_b_u_p_p_5_eq (pack_c_b_u_p_p X C f i P Q) X C f i P Q (eqI set (pack_c_b_u_p_p X C f i P Q)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_b_u_p_p.

Definition pack_c_b_u_p_e : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> set -> set := fun X C f i P c => (X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,c).

Definition struct_c_b_u_p_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists i:set -> set, exists P:set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ S = pack_c_b_u_p_e X C f i P c.

Theorem pack_c_b_u_p_e_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall i i':set -> set, forall P P':set -> prop, forall c,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, P x <-> P' x) ->
 pack_c_b_u_p_e X C f i P c = pack_c_b_u_p_e X C' f' i' P' c.
let X C C' f f' i i' P P' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,c) = (X,encode_c X C',encode_b X f',encode_u X i',encode_p X P',c).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_c_b_u_p_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_c_b_u_p_e X C f i P c -> X = S 0.
let S X C f i P c. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_u_p_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_c_b_u_p_e X C f i P c -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f i P c. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,c) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_u_p_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_c_b_u_p_e X C f i P c -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f i P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_u_p_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_c_b_u_p_e X C f i P c -> forall x :e X, i x = decode_u (S 3) x.
let S X C f i P c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_b_u_p_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_c_b_u_p_e X C f i P c -> forall x :e X, P x = decode_p (S 4) x.
let S X C f i P c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_b_u_p_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_c_b_u_p_e X C f i P c -> c = S 5.
let S X C f i P c. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_b X f,encode_u X i,encode_p X P,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_b_u_p_e: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> struct_c_b_u_p_e (pack_c_b_u_p_e X C f i P c).
let X C f i P c.
assume H2.
assume H3.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists i':set -> set, exists P':set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_c_b_u_p_e X C f i P c = pack_c_b_u_p_e X' C' f' i' P' c'.
witness X. witness C. witness f. witness i. witness P. witness c.
apply andI.
apply andI.
apply andI.
exact H2.
exact H3.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_b_u_p_e_eta: forall S, struct_c_b_u_p_e S -> S = pack_c_b_u_p_e (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let i.
assume H4. apply H4. let P.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_u_p_e_0_eq S X C f i P c Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_u_p_e_1_eq S X C f i P c Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_u_p_e_2_eq S X C f i P c Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_c_b_u_p_e_3_eq S X C f i P c Heq.
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_u_p_e_4_eq S X C f i P c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_c_b_u_p_e_5_eq S X C f i P c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_u_p_e.

Variable A:SType.

Definition unpack_c_b_u_p_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_c_b_u_p_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c,Phi X C f i P c = Phi X C' f' i' P' c)
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, unpack_c_b_u_p_e (pack_c_b_u_p_e X C f i P c) Phi = Phi X C f i P c.
let Phi.
assume HPhi.
let X C f i P c.
prove Phi (pack_c_b_u_p_e X C f i P c 0) (decode_c (pack_c_b_u_p_e X C f i P c 1)) (decode_b (pack_c_b_u_p_e X C f i P c 2)) (decode_u (pack_c_b_u_p_e X C f i P c 3)) (decode_p (pack_c_b_u_p_e X C f i P c 4)) (pack_c_b_u_p_e X C f i P c 5) = Phi X C f i P c.
rewrite <- struct_c_b_u_p_e_0_eq (pack_c_b_u_p_e X C f i P c) X C f i P c (eqI set (pack_c_b_u_p_e X C f i P c)).
prove Phi X (decode_c (pack_c_b_u_p_e X C f i P c 1)) (decode_b (pack_c_b_u_p_e X C f i P c 2)) (decode_u (pack_c_b_u_p_e X C f i P c 3)) (decode_p (pack_c_b_u_p_e X C f i P c 4)) (pack_c_b_u_p_e X C f i P c 5) = Phi X C f i P c.
rewrite <- struct_c_b_u_p_e_5_eq (pack_c_b_u_p_e X C f i P c) X C f i P c (eqI set (pack_c_b_u_p_e X C f i P c)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_u_p_e X C f i P c 1) U <-> C U.
  rewrite <- struct_c_b_u_p_e_1_eq (pack_c_b_u_p_e X C f i P c) X C f i P c (eqI set (pack_c_b_u_p_e X C f i P c)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_u_p_e X C f i P c 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_u_p_e_2_eq (pack_c_b_u_p_e X C f i P c) X C f i P c (eqI set (pack_c_b_u_p_e X C f i P c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_p_e X C f i P c 3) x = i x.
  apply eq_sym set.
  exact struct_c_b_u_p_e_3_eq (pack_c_b_u_p_e X C f i P c) X C f i P c (eqI set (pack_c_b_u_p_e X C f i P c)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_c_b_u_p_e X C f i P c 4) x <-> P x.
  rewrite <- struct_c_b_u_p_e_4_eq (pack_c_b_u_p_e X C f i P c) X C f i P c (eqI set (pack_c_b_u_p_e X C f i P c)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_b_u_p_e.

Definition pack_c_b_u_e_e : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> set -> set -> set := fun X C f i c d => (X,encode_c X C,encode_b X f,encode_u X i,c,d).

Definition struct_c_b_u_e_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists i:set -> set, exists c:set, exists d:set, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ d :e X /\ S = pack_c_b_u_e_e X C f i c d.

Theorem pack_c_b_u_e_e_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall i i':set -> set, forall c, forall d,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 pack_c_b_u_e_e X C f i c d = pack_c_b_u_e_e X C' f' i' c d.
let X C C' f f' i i' c d. assume H1. assume H2. assume H3.
prove (X,encode_c X C,encode_b X f,encode_u X i,c,d) = (X,encode_c X C',encode_b X f',encode_u X i',c,d).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_c_b_u_e_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_c_b_u_e_e X C f i c d -> X = S 0.
let S X C f i c d. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_u X i,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_u_e_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_c_b_u_e_e X C f i c d -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f i c d. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_u X i,c,d) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_u_e_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_c_b_u_e_e X C f i c d -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f i c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_u X i,c,d) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_u_e_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_c_b_u_e_e X C f i c d -> forall x :e X, i x = decode_u (S 3) x.
let S X C f i c d. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_b X f,encode_u X i,c,d) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_b_u_e_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_c_b_u_e_e X C f i c d -> c = S 4.
let S X C f i c d. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_b X f,encode_u X i,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_c_b_u_e_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_c_b_u_e_e X C f i c d -> d = S 5.
let S X C f i c d. assume H1.
rewrite H1. prove d = (X,encode_c X C,encode_b X f,encode_u X i,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_b_u_e_e: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> d :e X -> struct_c_b_u_e_e (pack_c_b_u_e_e X C f i c d).
let X C f i c d.
assume H2.
assume H3.
assume H4.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists i':set -> set, exists c':set, exists d':set,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ d' :e X' /\ pack_c_b_u_e_e X C f i c d = pack_c_b_u_e_e X' C' f' i' c' d'.
witness X. witness C. witness f. witness i. witness c. witness d.
apply andI.
apply andI.
apply andI.
apply andI.
exact H2.
exact H3.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_b_u_e_e_eta: forall S, struct_c_b_u_e_e S -> S = pack_c_b_u_e_e (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let i.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_u_e_e_0_eq S X C f i c d Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),S 4,S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_u_e_e_1_eq S X C f i c d Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_u_e_e_2_eq S X C f i c d Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_c_b_u_e_e_3_eq S X C f i c d Heq.
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_c_b_u_e_e_4_eq S X C f i c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_c_b_u_e_e_5_eq S X C f i c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_u_e_e.

Variable A:SType.

Definition unpack_c_b_u_e_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_u (S 3)) (S 4) (S 5).

Theorem unpack_c_b_u_e_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set) -> set -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall c, forall d,Phi X C f i c d = Phi X C' f' i' c d)
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, unpack_c_b_u_e_e (pack_c_b_u_e_e X C f i c d) Phi = Phi X C f i c d.
let Phi.
assume HPhi.
let X C f i c d.
prove Phi (pack_c_b_u_e_e X C f i c d 0) (decode_c (pack_c_b_u_e_e X C f i c d 1)) (decode_b (pack_c_b_u_e_e X C f i c d 2)) (decode_u (pack_c_b_u_e_e X C f i c d 3)) (pack_c_b_u_e_e X C f i c d 4) (pack_c_b_u_e_e X C f i c d 5) = Phi X C f i c d.
rewrite <- struct_c_b_u_e_e_0_eq (pack_c_b_u_e_e X C f i c d) X C f i c d (eqI set (pack_c_b_u_e_e X C f i c d)).
prove Phi X (decode_c (pack_c_b_u_e_e X C f i c d 1)) (decode_b (pack_c_b_u_e_e X C f i c d 2)) (decode_u (pack_c_b_u_e_e X C f i c d 3)) (pack_c_b_u_e_e X C f i c d 4) (pack_c_b_u_e_e X C f i c d 5) = Phi X C f i c d.
rewrite <- struct_c_b_u_e_e_4_eq (pack_c_b_u_e_e X C f i c d) X C f i c d (eqI set (pack_c_b_u_e_e X C f i c d)).
rewrite <- struct_c_b_u_e_e_5_eq (pack_c_b_u_e_e X C f i c d) X C f i c d (eqI set (pack_c_b_u_e_e X C f i c d)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_u_e_e X C f i c d 1) U <-> C U.
  rewrite <- struct_c_b_u_e_e_1_eq (pack_c_b_u_e_e X C f i c d) X C f i c d (eqI set (pack_c_b_u_e_e X C f i c d)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_u_e_e X C f i c d 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_u_e_e_2_eq (pack_c_b_u_e_e X C f i c d) X C f i c d (eqI set (pack_c_b_u_e_e X C f i c d)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_c_b_u_e_e X C f i c d 3) x = i x.
  apply eq_sym set.
  exact struct_c_b_u_e_e_3_eq (pack_c_b_u_e_e X C f i c d) X C f i c d (eqI set (pack_c_b_u_e_e X C f i c d)) x Hx.
Qed.

End unpack_c_b_u_e_e.

Definition pack_c_b_r_r_p : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> set := fun X C f R T P => (X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,encode_p X P).

Definition struct_c_b_r_r_p : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists P:set -> prop, (forall x y :e X, f x y :e X) /\ S = pack_c_b_r_r_p X C f R T P.

Theorem pack_c_b_r_r_p_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall P P':set -> prop,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_c_b_r_r_p X C f R T P = pack_c_b_r_r_p X C' f' R' T' P'.
let X C C' f f' R R' T T' P P'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,encode_p X P) = (X,encode_c X C',encode_b X f',encode_r X R',encode_r X T',encode_p X P').
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_c_b_r_r_p_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_b_r_r_p X C f R T P -> X = S 0.
let S X C f R T P. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,encode_p X P) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_r_r_p_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_b_r_r_p X C f R T P -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f R T P. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,encode_p X P) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_r_r_p_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_b_r_r_p X C f R T P -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,encode_p X P) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_r_r_p_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_b_r_r_p X C f R T P -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X C f R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,encode_p X P) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_b_r_r_p_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_b_r_r_p X C f R T P -> forall x y :e X, T x y = decode_r (S 4) x y.
let S X C f R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,encode_p X P) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_c_b_r_r_p_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_b_r_r_p X C f R T P -> forall x :e X, P x = decode_p (S 5) x.
let S X C f R T P. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,encode_p X P) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem pack_struct_c_b_r_r_p: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, (forall x y :e X, f x y :e X) -> struct_c_b_r_r_p (pack_c_b_r_r_p X C f R T P).
let X C f R T P.
assume H2.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists P':set -> prop,  (forall x y :e X', f' x y :e X') /\ pack_c_b_r_r_p X C f R T P = pack_c_b_r_r_p X' C' f' R' T' P'.
witness X. witness C. witness f. witness R. witness T. witness P.
apply andI.
exact H2.
apply eqI set.
Qed.

Theorem struct_c_b_r_r_p_eta: forall S, struct_c_b_r_r_p S -> S = pack_c_b_r_r_p (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_r (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let R.
assume H4. apply H4. let T.
assume H5. apply H5. let P.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_r_r_p_0_eq S X C f R T P Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_r X (decode_r (S 3)),encode_r X (decode_r (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_r_r_p_1_eq S X C f R T P Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_r_r_p_2_eq S X C f R T P Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_r_r_p_3_eq S X C f R T P Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_r X T = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_r_r_p_4_eq S X C f R T P Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L4.
claim L5: encode_p X P = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_r_r_p_5_eq S X C f R T P Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_r_r_p.

Variable A:SType.

Definition unpack_c_b_r_r_p : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_r (S 4)) (decode_p (S 5)).

Theorem unpack_c_b_r_r_p_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> Phi X C f R T P = Phi X C' f' R' T' P')
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, unpack_c_b_r_r_p (pack_c_b_r_r_p X C f R T P) Phi = Phi X C f R T P.
let Phi.
assume HPhi.
let X C f R T P.
prove Phi (pack_c_b_r_r_p X C f R T P 0) (decode_c (pack_c_b_r_r_p X C f R T P 1)) (decode_b (pack_c_b_r_r_p X C f R T P 2)) (decode_r (pack_c_b_r_r_p X C f R T P 3)) (decode_r (pack_c_b_r_r_p X C f R T P 4)) (decode_p (pack_c_b_r_r_p X C f R T P 5)) = Phi X C f R T P.
rewrite <- struct_c_b_r_r_p_0_eq (pack_c_b_r_r_p X C f R T P) X C f R T P (eqI set (pack_c_b_r_r_p X C f R T P)).
prove Phi X (decode_c (pack_c_b_r_r_p X C f R T P 1)) (decode_b (pack_c_b_r_r_p X C f R T P 2)) (decode_r (pack_c_b_r_r_p X C f R T P 3)) (decode_r (pack_c_b_r_r_p X C f R T P 4)) (decode_p (pack_c_b_r_r_p X C f R T P 5)) = Phi X C f R T P.
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_r_r_p X C f R T P 1) U <-> C U.
  rewrite <- struct_c_b_r_r_p_1_eq (pack_c_b_r_r_p X C f R T P) X C f R T P (eqI set (pack_c_b_r_r_p X C f R T P)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_r_r_p X C f R T P 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_r_r_p_2_eq (pack_c_b_r_r_p X C f R T P) X C f R T P (eqI set (pack_c_b_r_r_p X C f R T P)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_r_r_p X C f R T P 3) x y <-> R x y.
  rewrite <- struct_c_b_r_r_p_3_eq (pack_c_b_r_r_p X C f R T P) X C f R T P (eqI set (pack_c_b_r_r_p X C f R T P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_r_r_p X C f R T P 4) x y <-> T x y.
  rewrite <- struct_c_b_r_r_p_4_eq (pack_c_b_r_r_p X C f R T P) X C f R T P (eqI set (pack_c_b_r_r_p X C f R T P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_b_r_r_p X C f R T P 5) x <-> P x.
  rewrite <- struct_c_b_r_r_p_5_eq (pack_c_b_r_r_p X C f R T P) X C f R T P (eqI set (pack_c_b_r_r_p X C f R T P)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_b_r_r_p.

Definition pack_c_b_r_r_e : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> set := fun X C f R T c => (X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,c).

Definition struct_c_b_r_r_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ c :e X /\ S = pack_c_b_r_r_e X C f R T c.

Theorem pack_c_b_r_r_e_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall c,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 pack_c_b_r_r_e X C f R T c = pack_c_b_r_r_e X C' f' R' T' c.
let X C C' f f' R R' T T' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,c) = (X,encode_c X C',encode_b X f',encode_r X R',encode_r X T',c).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_c_b_r_r_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_b_r_r_e X C f R T c -> X = S 0.
let S X C f R T c. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_r_r_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_b_r_r_e X C f R T c -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f R T c. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,c) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_r_r_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_b_r_r_e X C f R T c -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_r_r_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_b_r_r_e X C f R T c -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X C f R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_b_r_r_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_b_r_r_e X C f R T c -> forall x y :e X, T x y = decode_r (S 4) x y.
let S X C f R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,c) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_c_b_r_r_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_b_r_r_e X C f R T c -> c = S 5.
let S X C f R T c. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_b X f,encode_r X R,encode_r X T,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_b_r_r_e: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> c :e X -> struct_c_b_r_r_e (pack_c_b_r_r_e X C f R T c).
let X C f R T c.
assume H2.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ c' :e X' /\ pack_c_b_r_r_e X C f R T c = pack_c_b_r_r_e X' C' f' R' T' c'.
witness X. witness C. witness f. witness R. witness T. witness c.
apply andI.
apply andI.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_b_r_r_e_eta: forall S, struct_c_b_r_r_e S -> S = pack_c_b_r_r_e (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_r (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let R.
assume H4. apply H4. let T.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_r_r_e_0_eq S X C f R T c Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_r X (decode_r (S 3)),encode_r X (decode_r (S 4)),S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_r_r_e_1_eq S X C f R T c Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_r_r_e_2_eq S X C f R T c Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_r_r_e_3_eq S X C f R T c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_r X T = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_r_r_e_4_eq S X C f R T c Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_c_b_r_r_e_5_eq S X C f R T c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_r_r_e.

Variable A:SType.

Definition unpack_c_b_r_r_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_r (S 4)) (S 5).

Theorem unpack_c_b_r_r_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall c,Phi X C f R T c = Phi X C' f' R' T' c)
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, unpack_c_b_r_r_e (pack_c_b_r_r_e X C f R T c) Phi = Phi X C f R T c.
let Phi.
assume HPhi.
let X C f R T c.
prove Phi (pack_c_b_r_r_e X C f R T c 0) (decode_c (pack_c_b_r_r_e X C f R T c 1)) (decode_b (pack_c_b_r_r_e X C f R T c 2)) (decode_r (pack_c_b_r_r_e X C f R T c 3)) (decode_r (pack_c_b_r_r_e X C f R T c 4)) (pack_c_b_r_r_e X C f R T c 5) = Phi X C f R T c.
rewrite <- struct_c_b_r_r_e_0_eq (pack_c_b_r_r_e X C f R T c) X C f R T c (eqI set (pack_c_b_r_r_e X C f R T c)).
prove Phi X (decode_c (pack_c_b_r_r_e X C f R T c 1)) (decode_b (pack_c_b_r_r_e X C f R T c 2)) (decode_r (pack_c_b_r_r_e X C f R T c 3)) (decode_r (pack_c_b_r_r_e X C f R T c 4)) (pack_c_b_r_r_e X C f R T c 5) = Phi X C f R T c.
rewrite <- struct_c_b_r_r_e_5_eq (pack_c_b_r_r_e X C f R T c) X C f R T c (eqI set (pack_c_b_r_r_e X C f R T c)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_r_r_e X C f R T c 1) U <-> C U.
  rewrite <- struct_c_b_r_r_e_1_eq (pack_c_b_r_r_e X C f R T c) X C f R T c (eqI set (pack_c_b_r_r_e X C f R T c)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_r_r_e X C f R T c 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_r_r_e_2_eq (pack_c_b_r_r_e X C f R T c) X C f R T c (eqI set (pack_c_b_r_r_e X C f R T c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_r_r_e X C f R T c 3) x y <-> R x y.
  rewrite <- struct_c_b_r_r_e_3_eq (pack_c_b_r_r_e X C f R T c) X C f R T c (eqI set (pack_c_b_r_r_e X C f R T c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_r_r_e X C f R T c 4) x y <-> T x y.
  rewrite <- struct_c_b_r_r_e_4_eq (pack_c_b_r_r_e X C f R T c) X C f R T c (eqI set (pack_c_b_r_r_e X C f R T c)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_c_b_r_r_e.

Definition pack_c_b_r_p_p : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set := fun X C f R P Q => (X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,encode_p X Q).

Definition struct_c_b_r_p_p : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists Q:set -> prop, (forall x y :e X, f x y :e X) /\ S = pack_c_b_r_p_p X C f R P Q.

Theorem pack_c_b_r_p_p_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall Q Q':set -> prop,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_c_b_r_p_p X C f R P Q = pack_c_b_r_p_p X C' f' R' P' Q'.
let X C C' f f' R R' P P' Q Q'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,encode_p X Q) = (X,encode_c X C',encode_b X f',encode_r X R',encode_p X P',encode_p X Q').
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_c_b_r_p_p_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_r_p_p X C f R P Q -> X = S 0.
let S X C f R P Q. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,encode_p X Q) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_r_p_p_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_r_p_p X C f R P Q -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f R P Q. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,encode_p X Q) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_r_p_p_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_r_p_p X C f R P Q -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f R P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,encode_p X Q) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_r_p_p_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_r_p_p X C f R P Q -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X C f R P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,encode_p X Q) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_b_r_p_p_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_r_p_p X C f R P Q -> forall x :e X, P x = decode_p (S 4) x.
let S X C f R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,encode_p X Q) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_b_r_p_p_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_b_r_p_p X C f R P Q -> forall x :e X, Q x = decode_p (S 5) x.
let S X C f R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,encode_p X Q) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem pack_struct_c_b_r_p_p: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, (forall x y :e X, f x y :e X) -> struct_c_b_r_p_p (pack_c_b_r_p_p X C f R P Q).
let X C f R P Q.
assume H2.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists Q':set -> prop,  (forall x y :e X', f' x y :e X') /\ pack_c_b_r_p_p X C f R P Q = pack_c_b_r_p_p X' C' f' R' P' Q'.
witness X. witness C. witness f. witness R. witness P. witness Q.
apply andI.
exact H2.
apply eqI set.
Qed.

Theorem struct_c_b_r_p_p_eta: forall S, struct_c_b_r_p_p S -> S = pack_c_b_r_p_p (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_p (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let R.
assume H4. apply H4. let P.
assume H5. apply H5. let Q.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_r_p_p_0_eq S X C f R P Q Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_r X (decode_r (S 3)),encode_p X (decode_p (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_r_p_p_1_eq S X C f R P Q Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_r_p_p_2_eq S X C f R P Q Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_r_p_p_3_eq S X C f R P Q Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_r_p_p_4_eq S X C f R P Q Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: encode_p X Q = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_r_p_p_5_eq S X C f R P Q Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_r_p_p.

Variable A:SType.

Definition unpack_c_b_r_p_p : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_p (S 4)) (decode_p (S 5)).

Theorem unpack_c_b_r_p_p_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) -> Phi X C f R P Q = Phi X C' f' R' P' Q')
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, unpack_c_b_r_p_p (pack_c_b_r_p_p X C f R P Q) Phi = Phi X C f R P Q.
let Phi.
assume HPhi.
let X C f R P Q.
prove Phi (pack_c_b_r_p_p X C f R P Q 0) (decode_c (pack_c_b_r_p_p X C f R P Q 1)) (decode_b (pack_c_b_r_p_p X C f R P Q 2)) (decode_r (pack_c_b_r_p_p X C f R P Q 3)) (decode_p (pack_c_b_r_p_p X C f R P Q 4)) (decode_p (pack_c_b_r_p_p X C f R P Q 5)) = Phi X C f R P Q.
rewrite <- struct_c_b_r_p_p_0_eq (pack_c_b_r_p_p X C f R P Q) X C f R P Q (eqI set (pack_c_b_r_p_p X C f R P Q)).
prove Phi X (decode_c (pack_c_b_r_p_p X C f R P Q 1)) (decode_b (pack_c_b_r_p_p X C f R P Q 2)) (decode_r (pack_c_b_r_p_p X C f R P Q 3)) (decode_p (pack_c_b_r_p_p X C f R P Q 4)) (decode_p (pack_c_b_r_p_p X C f R P Q 5)) = Phi X C f R P Q.
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_r_p_p X C f R P Q 1) U <-> C U.
  rewrite <- struct_c_b_r_p_p_1_eq (pack_c_b_r_p_p X C f R P Q) X C f R P Q (eqI set (pack_c_b_r_p_p X C f R P Q)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_r_p_p X C f R P Q 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_r_p_p_2_eq (pack_c_b_r_p_p X C f R P Q) X C f R P Q (eqI set (pack_c_b_r_p_p X C f R P Q)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_r_p_p X C f R P Q 3) x y <-> R x y.
  rewrite <- struct_c_b_r_p_p_3_eq (pack_c_b_r_p_p X C f R P Q) X C f R P Q (eqI set (pack_c_b_r_p_p X C f R P Q)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_b_r_p_p X C f R P Q 4) x <-> P x.
  rewrite <- struct_c_b_r_p_p_4_eq (pack_c_b_r_p_p X C f R P Q) X C f R P Q (eqI set (pack_c_b_r_p_p X C f R P Q)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_b_r_p_p X C f R P Q 5) x <-> Q x.
  rewrite <- struct_c_b_r_p_p_5_eq (pack_c_b_r_p_p X C f R P Q) X C f R P Q (eqI set (pack_c_b_r_p_p X C f R P Q)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_b_r_p_p.

Definition pack_c_b_r_p_e : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> set := fun X C f R P c => (X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,c).

Definition struct_c_b_r_p_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ c :e X /\ S = pack_c_b_r_p_e X C f R P c.

Theorem pack_c_b_r_p_e_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall c,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_c_b_r_p_e X C f R P c = pack_c_b_r_p_e X C' f' R' P' c.
let X C C' f f' R R' P P' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,c) = (X,encode_c X C',encode_b X f',encode_r X R',encode_p X P',c).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_c_b_r_p_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_b_r_p_e X C f R P c -> X = S 0.
let S X C f R P c. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_r_p_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_b_r_p_e X C f R P c -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f R P c. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,c) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_r_p_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_b_r_p_e X C f R P c -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f R P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_r_p_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_b_r_p_e X C f R P c -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X C f R P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_b_r_p_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_b_r_p_e X C f R P c -> forall x :e X, P x = decode_p (S 4) x.
let S X C f R P c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_b_r_p_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_b_r_p_e X C f R P c -> c = S 5.
let S X C f R P c. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_b X f,encode_r X R,encode_p X P,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_b_r_p_e: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> c :e X -> struct_c_b_r_p_e (pack_c_b_r_p_e X C f R P c).
let X C f R P c.
assume H2.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ c' :e X' /\ pack_c_b_r_p_e X C f R P c = pack_c_b_r_p_e X' C' f' R' P' c'.
witness X. witness C. witness f. witness R. witness P. witness c.
apply andI.
apply andI.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_b_r_p_e_eta: forall S, struct_c_b_r_p_e S -> S = pack_c_b_r_p_e (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let R.
assume H4. apply H4. let P.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_r_p_e_0_eq S X C f R P c Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_r X (decode_r (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_r_p_e_1_eq S X C f R P c Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_r_p_e_2_eq S X C f R P c Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_r_p_e_3_eq S X C f R P c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_r_p_e_4_eq S X C f R P c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_c_b_r_p_e_5_eq S X C f R P c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_r_p_e.

Variable A:SType.

Definition unpack_c_b_r_p_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_c_b_r_p_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c,Phi X C f R P c = Phi X C' f' R' P' c)
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, unpack_c_b_r_p_e (pack_c_b_r_p_e X C f R P c) Phi = Phi X C f R P c.
let Phi.
assume HPhi.
let X C f R P c.
prove Phi (pack_c_b_r_p_e X C f R P c 0) (decode_c (pack_c_b_r_p_e X C f R P c 1)) (decode_b (pack_c_b_r_p_e X C f R P c 2)) (decode_r (pack_c_b_r_p_e X C f R P c 3)) (decode_p (pack_c_b_r_p_e X C f R P c 4)) (pack_c_b_r_p_e X C f R P c 5) = Phi X C f R P c.
rewrite <- struct_c_b_r_p_e_0_eq (pack_c_b_r_p_e X C f R P c) X C f R P c (eqI set (pack_c_b_r_p_e X C f R P c)).
prove Phi X (decode_c (pack_c_b_r_p_e X C f R P c 1)) (decode_b (pack_c_b_r_p_e X C f R P c 2)) (decode_r (pack_c_b_r_p_e X C f R P c 3)) (decode_p (pack_c_b_r_p_e X C f R P c 4)) (pack_c_b_r_p_e X C f R P c 5) = Phi X C f R P c.
rewrite <- struct_c_b_r_p_e_5_eq (pack_c_b_r_p_e X C f R P c) X C f R P c (eqI set (pack_c_b_r_p_e X C f R P c)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_r_p_e X C f R P c 1) U <-> C U.
  rewrite <- struct_c_b_r_p_e_1_eq (pack_c_b_r_p_e X C f R P c) X C f R P c (eqI set (pack_c_b_r_p_e X C f R P c)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_r_p_e X C f R P c 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_r_p_e_2_eq (pack_c_b_r_p_e X C f R P c) X C f R P c (eqI set (pack_c_b_r_p_e X C f R P c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_r_p_e X C f R P c 3) x y <-> R x y.
  rewrite <- struct_c_b_r_p_e_3_eq (pack_c_b_r_p_e X C f R P c) X C f R P c (eqI set (pack_c_b_r_p_e X C f R P c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_b_r_p_e X C f R P c 4) x <-> P x.
  rewrite <- struct_c_b_r_p_e_4_eq (pack_c_b_r_p_e X C f R P c) X C f R P c (eqI set (pack_c_b_r_p_e X C f R P c)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_b_r_p_e.

Definition pack_c_b_r_e_e : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> set -> set -> set := fun X C f R c d => (X,encode_c X C,encode_b X f,encode_r X R,c,d).

Definition struct_c_b_r_e_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists R:set -> set -> prop, exists c:set, exists d:set, (forall x y :e X, f x y :e X) /\ c :e X /\ d :e X /\ S = pack_c_b_r_e_e X C f R c d.

Theorem pack_c_b_r_e_e_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall R R':set -> set -> prop, forall c, forall d,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 pack_c_b_r_e_e X C f R c d = pack_c_b_r_e_e X C' f' R' c d.
let X C C' f f' R R' c d. assume H1. assume H2. assume H3.
prove (X,encode_c X C,encode_b X f,encode_r X R,c,d) = (X,encode_c X C',encode_b X f',encode_r X R',c,d).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_c_b_r_e_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_b_r_e_e X C f R c d -> X = S 0.
let S X C f R c d. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_r X R,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_r_e_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_b_r_e_e X C f R c d -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f R c d. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_r X R,c,d) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_r_e_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_b_r_e_e X C f R c d -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f R c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_r X R,c,d) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_r_e_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_b_r_e_e X C f R c d -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X C f R c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_b X f,encode_r X R,c,d) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_b_r_e_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_b_r_e_e X C f R c d -> c = S 4.
let S X C f R c d. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_b X f,encode_r X R,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_c_b_r_e_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_b_r_e_e X C f R c d -> d = S 5.
let S X C f R c d. assume H1.
rewrite H1. prove d = (X,encode_c X C,encode_b X f,encode_r X R,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_b_r_e_e: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, (forall x y :e X, f x y :e X) -> c :e X -> d :e X -> struct_c_b_r_e_e (pack_c_b_r_e_e X C f R c d).
let X C f R c d.
assume H2.
assume H4.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists R':set -> set -> prop, exists c':set, exists d':set,  (forall x y :e X', f' x y :e X') /\ c' :e X' /\ d' :e X' /\ pack_c_b_r_e_e X C f R c d = pack_c_b_r_e_e X' C' f' R' c' d'.
witness X. witness C. witness f. witness R. witness c. witness d.
apply andI.
apply andI.
apply andI.
exact H2.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_b_r_e_e_eta: forall S, struct_c_b_r_e_e S -> S = pack_c_b_r_e_e (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_r (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let R.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_r_e_e_0_eq S X C f R c d Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_r X (decode_r (S 3)),S 4,S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_r_e_e_1_eq S X C f R c d Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_r_e_e_2_eq S X C f R c d Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_b_r_e_e_3_eq S X C f R c d Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_c_b_r_e_e_4_eq S X C f R c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_c_b_r_e_e_5_eq S X C f R c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_r_e_e.

Variable A:SType.

Definition unpack_c_b_r_e_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_r (S 3)) (S 4) (S 5).

Theorem unpack_c_b_r_e_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> set -> prop) -> set -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall c, forall d,Phi X C f R c d = Phi X C' f' R' c d)
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, unpack_c_b_r_e_e (pack_c_b_r_e_e X C f R c d) Phi = Phi X C f R c d.
let Phi.
assume HPhi.
let X C f R c d.
prove Phi (pack_c_b_r_e_e X C f R c d 0) (decode_c (pack_c_b_r_e_e X C f R c d 1)) (decode_b (pack_c_b_r_e_e X C f R c d 2)) (decode_r (pack_c_b_r_e_e X C f R c d 3)) (pack_c_b_r_e_e X C f R c d 4) (pack_c_b_r_e_e X C f R c d 5) = Phi X C f R c d.
rewrite <- struct_c_b_r_e_e_0_eq (pack_c_b_r_e_e X C f R c d) X C f R c d (eqI set (pack_c_b_r_e_e X C f R c d)).
prove Phi X (decode_c (pack_c_b_r_e_e X C f R c d 1)) (decode_b (pack_c_b_r_e_e X C f R c d 2)) (decode_r (pack_c_b_r_e_e X C f R c d 3)) (pack_c_b_r_e_e X C f R c d 4) (pack_c_b_r_e_e X C f R c d 5) = Phi X C f R c d.
rewrite <- struct_c_b_r_e_e_4_eq (pack_c_b_r_e_e X C f R c d) X C f R c d (eqI set (pack_c_b_r_e_e X C f R c d)).
rewrite <- struct_c_b_r_e_e_5_eq (pack_c_b_r_e_e X C f R c d) X C f R c d (eqI set (pack_c_b_r_e_e X C f R c d)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_r_e_e X C f R c d 1) U <-> C U.
  rewrite <- struct_c_b_r_e_e_1_eq (pack_c_b_r_e_e X C f R c d) X C f R c d (eqI set (pack_c_b_r_e_e X C f R c d)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_r_e_e X C f R c d 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_r_e_e_2_eq (pack_c_b_r_e_e X C f R c d) X C f R c d (eqI set (pack_c_b_r_e_e X C f R c d)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_b_r_e_e X C f R c d 3) x y <-> R x y.
  rewrite <- struct_c_b_r_e_e_3_eq (pack_c_b_r_e_e X C f R c d) X C f R c d (eqI set (pack_c_b_r_e_e X C f R c d)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_c_b_r_e_e.

Definition pack_c_b_p_p_e : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> prop) -> (set -> prop) -> set -> set := fun X C f P Q c => (X,encode_c X C,encode_b X f,encode_p X P,encode_p X Q,c).

Definition struct_c_b_p_p_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists P:set -> prop, exists Q:set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ c :e X /\ S = pack_c_b_p_p_e X C f P Q c.

Theorem pack_c_b_p_p_e_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall P P':set -> prop, forall Q Q':set -> prop, forall c,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_c_b_p_p_e X C f P Q c = pack_c_b_p_p_e X C' f' P' Q' c.
let X C C' f f' P P' Q Q' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_c X C,encode_b X f,encode_p X P,encode_p X Q,c) = (X,encode_c X C',encode_b X f',encode_p X P',encode_p X Q',c).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_c_b_p_p_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_b_p_p_e X C f P Q c -> X = S 0.
let S X C f P Q c. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_p X P,encode_p X Q,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_p_p_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_b_p_p_e X C f P Q c -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f P Q c. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_p X P,encode_p X Q,c) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_p_p_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_b_p_p_e X C f P Q c -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f P Q c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_p X P,encode_p X Q,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_p_p_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_b_p_p_e X C f P Q c -> forall x :e X, P x = decode_p (S 3) x.
let S X C f P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_b X f,encode_p X P,encode_p X Q,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_b_p_p_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_b_p_p_e X C f P Q c -> forall x :e X, Q x = decode_p (S 4) x.
let S X C f P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_c X C,encode_b X f,encode_p X P,encode_p X Q,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem struct_c_b_p_p_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_b_p_p_e X C f P Q c -> c = S 5.
let S X C f P Q c. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_b X f,encode_p X P,encode_p X Q,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_b_p_p_e: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> c :e X -> struct_c_b_p_p_e (pack_c_b_p_p_e X C f P Q c).
let X C f P Q c.
assume H2.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists P':set -> prop, exists Q':set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ c' :e X' /\ pack_c_b_p_p_e X C f P Q c = pack_c_b_p_p_e X' C' f' P' Q' c'.
witness X. witness C. witness f. witness P. witness Q. witness c.
apply andI.
apply andI.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_b_p_p_e_eta: forall S, struct_c_b_p_p_e S -> S = pack_c_b_p_p_e (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let P.
assume H4. apply H4. let Q.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_p_p_e_0_eq S X C f P Q c Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_p X (decode_p (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_p_p_e_1_eq S X C f P Q c Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_p_p_e_2_eq S X C f P Q c Heq.
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_p_p_e_3_eq S X C f P Q c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: encode_p X Q = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_p_p_e_4_eq S X C f P Q c Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_c_b_p_p_e_5_eq S X C f P Q c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_p_p_e.

Variable A:SType.

Definition unpack_c_b_p_p_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_c_b_p_p_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) ->  forall c,Phi X C f P Q c = Phi X C' f' P' Q' c)
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, unpack_c_b_p_p_e (pack_c_b_p_p_e X C f P Q c) Phi = Phi X C f P Q c.
let Phi.
assume HPhi.
let X C f P Q c.
prove Phi (pack_c_b_p_p_e X C f P Q c 0) (decode_c (pack_c_b_p_p_e X C f P Q c 1)) (decode_b (pack_c_b_p_p_e X C f P Q c 2)) (decode_p (pack_c_b_p_p_e X C f P Q c 3)) (decode_p (pack_c_b_p_p_e X C f P Q c 4)) (pack_c_b_p_p_e X C f P Q c 5) = Phi X C f P Q c.
rewrite <- struct_c_b_p_p_e_0_eq (pack_c_b_p_p_e X C f P Q c) X C f P Q c (eqI set (pack_c_b_p_p_e X C f P Q c)).
prove Phi X (decode_c (pack_c_b_p_p_e X C f P Q c 1)) (decode_b (pack_c_b_p_p_e X C f P Q c 2)) (decode_p (pack_c_b_p_p_e X C f P Q c 3)) (decode_p (pack_c_b_p_p_e X C f P Q c 4)) (pack_c_b_p_p_e X C f P Q c 5) = Phi X C f P Q c.
rewrite <- struct_c_b_p_p_e_5_eq (pack_c_b_p_p_e X C f P Q c) X C f P Q c (eqI set (pack_c_b_p_p_e X C f P Q c)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_p_p_e X C f P Q c 1) U <-> C U.
  rewrite <- struct_c_b_p_p_e_1_eq (pack_c_b_p_p_e X C f P Q c) X C f P Q c (eqI set (pack_c_b_p_p_e X C f P Q c)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_p_p_e X C f P Q c 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_p_p_e_2_eq (pack_c_b_p_p_e X C f P Q c) X C f P Q c (eqI set (pack_c_b_p_p_e X C f P Q c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_p (pack_c_b_p_p_e X C f P Q c 3) x <-> P x.
  rewrite <- struct_c_b_p_p_e_3_eq (pack_c_b_p_p_e X C f P Q c) X C f P Q c (eqI set (pack_c_b_p_p_e X C f P Q c)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_b_p_p_e X C f P Q c 4) x <-> Q x.
  rewrite <- struct_c_b_p_p_e_4_eq (pack_c_b_p_p_e X C f P Q c) X C f P Q c (eqI set (pack_c_b_p_p_e X C f P Q c)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_b_p_p_e.

Definition pack_c_b_p_e_e : set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> prop) -> set -> set -> set := fun X C f P c d => (X,encode_c X C,encode_b X f,encode_p X P,c,d).

Definition struct_c_b_p_e_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists f:set -> set -> set, exists P:set -> prop, exists c:set, exists d:set, (forall x y :e X, f x y :e X) /\ c :e X /\ d :e X /\ S = pack_c_b_p_e_e X C f P c d.

Theorem pack_c_b_p_e_e_ext : forall X, forall C C':(set -> prop) -> prop, forall f f':set -> set -> set, forall P P':set -> prop, forall c, forall d,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_c_b_p_e_e X C f P c d = pack_c_b_p_e_e X C' f' P' c d.
let X C C' f f' P P' c d. assume H1. assume H2. assume H3.
prove (X,encode_c X C,encode_b X f,encode_p X P,c,d) = (X,encode_c X C',encode_b X f',encode_p X P',c,d).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_c_b_p_e_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_b_p_e_e X C f P c d -> X = S 0.
let S X C f P c d. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_b X f,encode_p X P,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_b_p_e_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_b_p_e_e X C f P c d -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C f P c d. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_b X f,encode_p X P,c,d) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_b_p_e_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_b_p_e_e X C f P c d -> forall x y :e X, f x y = decode_b (S 2) x y.
let S X C f P c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_c X C,encode_b X f,encode_p X P,c,d) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_c_b_p_e_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_b_p_e_e X C f P c d -> forall x :e X, P x = decode_p (S 3) x.
let S X C f P c d. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_b X f,encode_p X P,c,d) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_b_p_e_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_b_p_e_e X C f P c d -> c = S 4.
let S X C f P c d. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_b X f,encode_p X P,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_c_b_p_e_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_b_p_e_e X C f P c d -> d = S 5.
let S X C f P c d. assume H1.
rewrite H1. prove d = (X,encode_c X C,encode_b X f,encode_p X P,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_b_p_e_e: forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, (forall x y :e X, f x y :e X) -> c :e X -> d :e X -> struct_c_b_p_e_e (pack_c_b_p_e_e X C f P c d).
let X C f P c d.
assume H2.
assume H4.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists f':set -> set -> set, exists P':set -> prop, exists c':set, exists d':set,  (forall x y :e X', f' x y :e X') /\ c' :e X' /\ d' :e X' /\ pack_c_b_p_e_e X C f P c d = pack_c_b_p_e_e X' C' f' P' c' d'.
witness X. witness C. witness f. witness P. witness c. witness d.
apply andI.
apply andI.
apply andI.
exact H2.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_b_p_e_e_eta: forall S, struct_c_b_p_e_e S -> S = pack_c_b_p_e_e (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_p (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let f.
assume H3. apply H3. let P.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_b_p_e_e_0_eq S X C f P c d Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_b X (decode_b (S 2)),encode_p X (decode_p (S 3)),S 4,S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_b_p_e_e_1_eq S X C f P c d Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_b X f = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_c_b_p_e_e_2_eq S X C f P c d Heq.
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_b_p_e_e_3_eq S X C f P c d Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_c_b_p_e_e_4_eq S X C f P c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_c_b_p_e_e_5_eq S X C f P c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_b_p_e_e.

Variable A:SType.

Definition unpack_c_b_p_e_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_b (S 2)) (decode_p (S 3)) (S 4) (S 5).

Theorem unpack_c_b_p_e_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> set) -> (set -> prop) -> set -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c, forall d,Phi X C f P c d = Phi X C' f' P' c d)
  ->
  forall X, forall C:(set -> prop) -> prop, forall f:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, unpack_c_b_p_e_e (pack_c_b_p_e_e X C f P c d) Phi = Phi X C f P c d.
let Phi.
assume HPhi.
let X C f P c d.
prove Phi (pack_c_b_p_e_e X C f P c d 0) (decode_c (pack_c_b_p_e_e X C f P c d 1)) (decode_b (pack_c_b_p_e_e X C f P c d 2)) (decode_p (pack_c_b_p_e_e X C f P c d 3)) (pack_c_b_p_e_e X C f P c d 4) (pack_c_b_p_e_e X C f P c d 5) = Phi X C f P c d.
rewrite <- struct_c_b_p_e_e_0_eq (pack_c_b_p_e_e X C f P c d) X C f P c d (eqI set (pack_c_b_p_e_e X C f P c d)).
prove Phi X (decode_c (pack_c_b_p_e_e X C f P c d 1)) (decode_b (pack_c_b_p_e_e X C f P c d 2)) (decode_p (pack_c_b_p_e_e X C f P c d 3)) (pack_c_b_p_e_e X C f P c d 4) (pack_c_b_p_e_e X C f P c d 5) = Phi X C f P c d.
rewrite <- struct_c_b_p_e_e_4_eq (pack_c_b_p_e_e X C f P c d) X C f P c d (eqI set (pack_c_b_p_e_e X C f P c d)).
rewrite <- struct_c_b_p_e_e_5_eq (pack_c_b_p_e_e X C f P c d) X C f P c d (eqI set (pack_c_b_p_e_e X C f P c d)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_b_p_e_e X C f P c d 1) U <-> C U.
  rewrite <- struct_c_b_p_e_e_1_eq (pack_c_b_p_e_e X C f P c d) X C f P c d (eqI set (pack_c_b_p_e_e X C f P c d)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_c_b_p_e_e X C f P c d 2) x y = f x y.
  apply eq_sym set.
  exact struct_c_b_p_e_e_2_eq (pack_c_b_p_e_e X C f P c d) X C f P c d (eqI set (pack_c_b_p_e_e X C f P c d)) x Hx y Hy.
- let x. assume Hx.
  prove decode_p (pack_c_b_p_e_e X C f P c d 3) x <-> P x.
  rewrite <- struct_c_b_p_e_e_3_eq (pack_c_b_p_e_e X C f P c d) X C f P c d (eqI set (pack_c_b_p_e_e X C f P c d)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_b_p_e_e.

Definition pack_c_u_r_r_p : set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> set := fun X C i R T P => (X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,encode_p X P).

Definition struct_c_u_r_r_p : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists i:set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists P:set -> prop, (forall x :e X, i x :e X) /\ S = pack_c_u_r_r_p X C i R T P.

Theorem pack_c_u_r_r_p_ext : forall X, forall C C':(set -> prop) -> prop, forall i i':set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall P P':set -> prop,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_c_u_r_r_p X C i R T P = pack_c_u_r_r_p X C' i' R' T' P'.
let X C C' i i' R R' T T' P P'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,encode_p X P) = (X,encode_c X C',encode_u X i',encode_r X R',encode_r X T',encode_p X P').
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_c_u_r_r_p_0_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_u_r_r_p X C i R T P -> X = S 0.
let S X C i R T P. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_u_r_r_p_1_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_u_r_r_p X C i R T P -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C i R T P. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_u_r_r_p_2_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_u_r_r_p X C i R T P -> forall x :e X, i x = decode_u (S 2) x.
let S X C i R T P. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_u_r_r_p_3_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_u_r_r_p X C i R T P -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X C i R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_u_r_r_p_4_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_u_r_r_p X C i R T P -> forall x y :e X, T x y = decode_r (S 4) x y.
let S X C i R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_c_u_r_r_p_5_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_c_u_r_r_p X C i R T P -> forall x :e X, P x = decode_p (S 5) x.
let S X C i R T P. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem pack_struct_c_u_r_r_p: forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, (forall x :e X, i x :e X) -> struct_c_u_r_r_p (pack_c_u_r_r_p X C i R T P).
let X C i R T P.
assume H2.
prove exists X':set, exists C':(set -> prop) -> prop, exists i':set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists P':set -> prop,  (forall x :e X', i' x :e X') /\ pack_c_u_r_r_p X C i R T P = pack_c_u_r_r_p X' C' i' R' T' P'.
witness X. witness C. witness i. witness R. witness T. witness P.
apply andI.
exact H2.
apply eqI set.
Qed.

Theorem struct_c_u_r_r_p_eta: forall S, struct_c_u_r_r_p S -> S = pack_c_u_r_r_p (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let i.
assume H3. apply H3. let R.
assume H4. apply H4. let T.
assume H5. apply H5. let P.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_u_r_r_p_0_eq S X C i R T P Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_r X (decode_r (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_u_r_r_p_1_eq S X C i R T P Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_c_u_r_r_p_2_eq S X C i R T P Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_u_r_r_p_3_eq S X C i R T P Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_r X T = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_u_r_r_p_4_eq S X C i R T P Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L4.
claim L5: encode_p X P = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_u_r_r_p_5_eq S X C i R T P Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_u_r_r_p.

Variable A:SType.

Definition unpack_c_u_r_r_p : set -> (set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (decode_p (S 5)).

Theorem unpack_c_u_r_r_p_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> Phi X C i R T P = Phi X C' i' R' T' P')
  ->
  forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, unpack_c_u_r_r_p (pack_c_u_r_r_p X C i R T P) Phi = Phi X C i R T P.
let Phi.
assume HPhi.
let X C i R T P.
prove Phi (pack_c_u_r_r_p X C i R T P 0) (decode_c (pack_c_u_r_r_p X C i R T P 1)) (decode_u (pack_c_u_r_r_p X C i R T P 2)) (decode_r (pack_c_u_r_r_p X C i R T P 3)) (decode_r (pack_c_u_r_r_p X C i R T P 4)) (decode_p (pack_c_u_r_r_p X C i R T P 5)) = Phi X C i R T P.
rewrite <- struct_c_u_r_r_p_0_eq (pack_c_u_r_r_p X C i R T P) X C i R T P (eqI set (pack_c_u_r_r_p X C i R T P)).
prove Phi X (decode_c (pack_c_u_r_r_p X C i R T P 1)) (decode_u (pack_c_u_r_r_p X C i R T P 2)) (decode_r (pack_c_u_r_r_p X C i R T P 3)) (decode_r (pack_c_u_r_r_p X C i R T P 4)) (decode_p (pack_c_u_r_r_p X C i R T P 5)) = Phi X C i R T P.
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_u_r_r_p X C i R T P 1) U <-> C U.
  rewrite <- struct_c_u_r_r_p_1_eq (pack_c_u_r_r_p X C i R T P) X C i R T P (eqI set (pack_c_u_r_r_p X C i R T P)) U HU.
  apply iff_refl.
- let x. assume Hx.
  prove decode_u (pack_c_u_r_r_p X C i R T P 2) x = i x.
  apply eq_sym set.
  exact struct_c_u_r_r_p_2_eq (pack_c_u_r_r_p X C i R T P) X C i R T P (eqI set (pack_c_u_r_r_p X C i R T P)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_u_r_r_p X C i R T P 3) x y <-> R x y.
  rewrite <- struct_c_u_r_r_p_3_eq (pack_c_u_r_r_p X C i R T P) X C i R T P (eqI set (pack_c_u_r_r_p X C i R T P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_u_r_r_p X C i R T P 4) x y <-> T x y.
  rewrite <- struct_c_u_r_r_p_4_eq (pack_c_u_r_r_p X C i R T P) X C i R T P (eqI set (pack_c_u_r_r_p X C i R T P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_u_r_r_p X C i R T P 5) x <-> P x.
  rewrite <- struct_c_u_r_r_p_5_eq (pack_c_u_r_r_p X C i R T P) X C i R T P (eqI set (pack_c_u_r_r_p X C i R T P)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_u_r_r_p.

Definition pack_c_u_r_r_e : set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> set := fun X C i R T c => (X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,c).

Definition struct_c_u_r_r_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists i:set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists c:set, (forall x :e X, i x :e X) /\ c :e X /\ S = pack_c_u_r_r_e X C i R T c.

Theorem pack_c_u_r_r_e_ext : forall X, forall C C':(set -> prop) -> prop, forall i i':set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall c,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 pack_c_u_r_r_e X C i R T c = pack_c_u_r_r_e X C' i' R' T' c.
let X C C' i i' R R' T T' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,c) = (X,encode_c X C',encode_u X i',encode_r X R',encode_r X T',c).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_c_u_r_r_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_u_r_r_e X C i R T c -> X = S 0.
let S X C i R T c. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_u_r_r_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_u_r_r_e X C i R T c -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C i R T c. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,c) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_u_r_r_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_u_r_r_e X C i R T c -> forall x :e X, i x = decode_u (S 2) x.
let S X C i R T c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,c) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_u_r_r_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_u_r_r_e X C i R T c -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X C i R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_u_r_r_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_u_r_r_e X C i R T c -> forall x y :e X, T x y = decode_r (S 4) x y.
let S X C i R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,c) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_c_u_r_r_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_c_u_r_r_e X C i R T c -> c = S 5.
let S X C i R T c. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_u X i,encode_r X R,encode_r X T,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_u_r_r_e: forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, (forall x :e X, i x :e X) -> c :e X -> struct_c_u_r_r_e (pack_c_u_r_r_e X C i R T c).
let X C i R T c.
assume H2.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists i':set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists c':set,  (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_c_u_r_r_e X C i R T c = pack_c_u_r_r_e X' C' i' R' T' c'.
witness X. witness C. witness i. witness R. witness T. witness c.
apply andI.
apply andI.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_u_r_r_e_eta: forall S, struct_c_u_r_r_e S -> S = pack_c_u_r_r_e (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let i.
assume H3. apply H3. let R.
assume H4. apply H4. let T.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_u_r_r_e_0_eq S X C i R T c Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_r X (decode_r (S 4)),S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_u_r_r_e_1_eq S X C i R T c Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_c_u_r_r_e_2_eq S X C i R T c Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_u_r_r_e_3_eq S X C i R T c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_r X T = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_u_r_r_e_4_eq S X C i R T c Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_c_u_r_r_e_5_eq S X C i R T c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_u_r_r_e.

Variable A:SType.

Definition unpack_c_u_r_r_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (S 5).

Theorem unpack_c_u_r_r_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall c,Phi X C i R T c = Phi X C' i' R' T' c)
  ->
  forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, unpack_c_u_r_r_e (pack_c_u_r_r_e X C i R T c) Phi = Phi X C i R T c.
let Phi.
assume HPhi.
let X C i R T c.
prove Phi (pack_c_u_r_r_e X C i R T c 0) (decode_c (pack_c_u_r_r_e X C i R T c 1)) (decode_u (pack_c_u_r_r_e X C i R T c 2)) (decode_r (pack_c_u_r_r_e X C i R T c 3)) (decode_r (pack_c_u_r_r_e X C i R T c 4)) (pack_c_u_r_r_e X C i R T c 5) = Phi X C i R T c.
rewrite <- struct_c_u_r_r_e_0_eq (pack_c_u_r_r_e X C i R T c) X C i R T c (eqI set (pack_c_u_r_r_e X C i R T c)).
prove Phi X (decode_c (pack_c_u_r_r_e X C i R T c 1)) (decode_u (pack_c_u_r_r_e X C i R T c 2)) (decode_r (pack_c_u_r_r_e X C i R T c 3)) (decode_r (pack_c_u_r_r_e X C i R T c 4)) (pack_c_u_r_r_e X C i R T c 5) = Phi X C i R T c.
rewrite <- struct_c_u_r_r_e_5_eq (pack_c_u_r_r_e X C i R T c) X C i R T c (eqI set (pack_c_u_r_r_e X C i R T c)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_u_r_r_e X C i R T c 1) U <-> C U.
  rewrite <- struct_c_u_r_r_e_1_eq (pack_c_u_r_r_e X C i R T c) X C i R T c (eqI set (pack_c_u_r_r_e X C i R T c)) U HU.
  apply iff_refl.
- let x. assume Hx.
  prove decode_u (pack_c_u_r_r_e X C i R T c 2) x = i x.
  apply eq_sym set.
  exact struct_c_u_r_r_e_2_eq (pack_c_u_r_r_e X C i R T c) X C i R T c (eqI set (pack_c_u_r_r_e X C i R T c)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_u_r_r_e X C i R T c 3) x y <-> R x y.
  rewrite <- struct_c_u_r_r_e_3_eq (pack_c_u_r_r_e X C i R T c) X C i R T c (eqI set (pack_c_u_r_r_e X C i R T c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_u_r_r_e X C i R T c 4) x y <-> T x y.
  rewrite <- struct_c_u_r_r_e_4_eq (pack_c_u_r_r_e X C i R T c) X C i R T c (eqI set (pack_c_u_r_r_e X C i R T c)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_c_u_r_r_e.

Definition pack_c_u_r_p_p : set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set := fun X C i R P Q => (X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,encode_p X Q).

Definition struct_c_u_r_p_p : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists i:set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists Q:set -> prop, (forall x :e X, i x :e X) /\ S = pack_c_u_r_p_p X C i R P Q.

Theorem pack_c_u_r_p_p_ext : forall X, forall C C':(set -> prop) -> prop, forall i i':set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall Q Q':set -> prop,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_c_u_r_p_p X C i R P Q = pack_c_u_r_p_p X C' i' R' P' Q'.
let X C C' i i' R R' P P' Q Q'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) = (X,encode_c X C',encode_u X i',encode_r X R',encode_p X P',encode_p X Q').
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_c_u_r_p_p_0_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_u_r_p_p X C i R P Q -> X = S 0.
let S X C i R P Q. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_u_r_p_p_1_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_u_r_p_p X C i R P Q -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C i R P Q. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_u_r_p_p_2_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_u_r_p_p X C i R P Q -> forall x :e X, i x = decode_u (S 2) x.
let S X C i R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_u_r_p_p_3_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_u_r_p_p X C i R P Q -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X C i R P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_u_r_p_p_4_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_u_r_p_p X C i R P Q -> forall x :e X, P x = decode_p (S 4) x.
let S X C i R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_u_r_p_p_5_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_c_u_r_p_p X C i R P Q -> forall x :e X, Q x = decode_p (S 5) x.
let S X C i R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem pack_struct_c_u_r_p_p: forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, (forall x :e X, i x :e X) -> struct_c_u_r_p_p (pack_c_u_r_p_p X C i R P Q).
let X C i R P Q.
assume H2.
prove exists X':set, exists C':(set -> prop) -> prop, exists i':set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists Q':set -> prop,  (forall x :e X', i' x :e X') /\ pack_c_u_r_p_p X C i R P Q = pack_c_u_r_p_p X' C' i' R' P' Q'.
witness X. witness C. witness i. witness R. witness P. witness Q.
apply andI.
exact H2.
apply eqI set.
Qed.

Theorem struct_c_u_r_p_p_eta: forall S, struct_c_u_r_p_p S -> S = pack_c_u_r_p_p (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let i.
assume H3. apply H3. let R.
assume H4. apply H4. let P.
assume H5. apply H5. let Q.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_u_r_p_p_0_eq S X C i R P Q Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_p X (decode_p (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_u_r_p_p_1_eq S X C i R P Q Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_c_u_r_p_p_2_eq S X C i R P Q Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_u_r_p_p_3_eq S X C i R P Q Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_u_r_p_p_4_eq S X C i R P Q Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: encode_p X Q = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_u_r_p_p_5_eq S X C i R P Q Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_u_r_p_p.

Variable A:SType.

Definition unpack_c_u_r_p_p : set -> (set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (decode_p (S 5)).

Theorem unpack_c_u_r_p_p_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) -> Phi X C i R P Q = Phi X C' i' R' P' Q')
  ->
  forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, unpack_c_u_r_p_p (pack_c_u_r_p_p X C i R P Q) Phi = Phi X C i R P Q.
let Phi.
assume HPhi.
let X C i R P Q.
prove Phi (pack_c_u_r_p_p X C i R P Q 0) (decode_c (pack_c_u_r_p_p X C i R P Q 1)) (decode_u (pack_c_u_r_p_p X C i R P Q 2)) (decode_r (pack_c_u_r_p_p X C i R P Q 3)) (decode_p (pack_c_u_r_p_p X C i R P Q 4)) (decode_p (pack_c_u_r_p_p X C i R P Q 5)) = Phi X C i R P Q.
rewrite <- struct_c_u_r_p_p_0_eq (pack_c_u_r_p_p X C i R P Q) X C i R P Q (eqI set (pack_c_u_r_p_p X C i R P Q)).
prove Phi X (decode_c (pack_c_u_r_p_p X C i R P Q 1)) (decode_u (pack_c_u_r_p_p X C i R P Q 2)) (decode_r (pack_c_u_r_p_p X C i R P Q 3)) (decode_p (pack_c_u_r_p_p X C i R P Q 4)) (decode_p (pack_c_u_r_p_p X C i R P Q 5)) = Phi X C i R P Q.
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_u_r_p_p X C i R P Q 1) U <-> C U.
  rewrite <- struct_c_u_r_p_p_1_eq (pack_c_u_r_p_p X C i R P Q) X C i R P Q (eqI set (pack_c_u_r_p_p X C i R P Q)) U HU.
  apply iff_refl.
- let x. assume Hx.
  prove decode_u (pack_c_u_r_p_p X C i R P Q 2) x = i x.
  apply eq_sym set.
  exact struct_c_u_r_p_p_2_eq (pack_c_u_r_p_p X C i R P Q) X C i R P Q (eqI set (pack_c_u_r_p_p X C i R P Q)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_u_r_p_p X C i R P Q 3) x y <-> R x y.
  rewrite <- struct_c_u_r_p_p_3_eq (pack_c_u_r_p_p X C i R P Q) X C i R P Q (eqI set (pack_c_u_r_p_p X C i R P Q)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_u_r_p_p X C i R P Q 4) x <-> P x.
  rewrite <- struct_c_u_r_p_p_4_eq (pack_c_u_r_p_p X C i R P Q) X C i R P Q (eqI set (pack_c_u_r_p_p X C i R P Q)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_u_r_p_p X C i R P Q 5) x <-> Q x.
  rewrite <- struct_c_u_r_p_p_5_eq (pack_c_u_r_p_p X C i R P Q) X C i R P Q (eqI set (pack_c_u_r_p_p X C i R P Q)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_u_r_p_p.

Definition pack_c_u_r_p_e : set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> set := fun X C i R P c => (X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,c).

Definition struct_c_u_r_p_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists i:set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists c:set, (forall x :e X, i x :e X) /\ c :e X /\ S = pack_c_u_r_p_e X C i R P c.

Theorem pack_c_u_r_p_e_ext : forall X, forall C C':(set -> prop) -> prop, forall i i':set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall c,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_c_u_r_p_e X C i R P c = pack_c_u_r_p_e X C' i' R' P' c.
let X C C' i i' R R' P P' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,c) = (X,encode_c X C',encode_u X i',encode_r X R',encode_p X P',c).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_c_u_r_p_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_u_r_p_e X C i R P c -> X = S 0.
let S X C i R P c. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_u_r_p_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_u_r_p_e X C i R P c -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C i R P c. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,c) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_u_r_p_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_u_r_p_e X C i R P c -> forall x :e X, i x = decode_u (S 2) x.
let S X C i R P c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,c) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_u_r_p_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_u_r_p_e X C i R P c -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X C i R P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_u_r_p_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_u_r_p_e X C i R P c -> forall x :e X, P x = decode_p (S 4) x.
let S X C i R P c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_u_r_p_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_c_u_r_p_e X C i R P c -> c = S 5.
let S X C i R P c. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_u X i,encode_r X R,encode_p X P,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_u_r_p_e: forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, (forall x :e X, i x :e X) -> c :e X -> struct_c_u_r_p_e (pack_c_u_r_p_e X C i R P c).
let X C i R P c.
assume H2.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists i':set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists c':set,  (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_c_u_r_p_e X C i R P c = pack_c_u_r_p_e X' C' i' R' P' c'.
witness X. witness C. witness i. witness R. witness P. witness c.
apply andI.
apply andI.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_u_r_p_e_eta: forall S, struct_c_u_r_p_e S -> S = pack_c_u_r_p_e (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let i.
assume H3. apply H3. let R.
assume H4. apply H4. let P.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_u_r_p_e_0_eq S X C i R P c Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_u_r_p_e_1_eq S X C i R P c Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_c_u_r_p_e_2_eq S X C i R P c Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_u_r_p_e_3_eq S X C i R P c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_u_r_p_e_4_eq S X C i R P c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_c_u_r_p_e_5_eq S X C i R P c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_u_r_p_e.

Variable A:SType.

Definition unpack_c_u_r_p_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_c_u_r_p_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c,Phi X C i R P c = Phi X C' i' R' P' c)
  ->
  forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, unpack_c_u_r_p_e (pack_c_u_r_p_e X C i R P c) Phi = Phi X C i R P c.
let Phi.
assume HPhi.
let X C i R P c.
prove Phi (pack_c_u_r_p_e X C i R P c 0) (decode_c (pack_c_u_r_p_e X C i R P c 1)) (decode_u (pack_c_u_r_p_e X C i R P c 2)) (decode_r (pack_c_u_r_p_e X C i R P c 3)) (decode_p (pack_c_u_r_p_e X C i R P c 4)) (pack_c_u_r_p_e X C i R P c 5) = Phi X C i R P c.
rewrite <- struct_c_u_r_p_e_0_eq (pack_c_u_r_p_e X C i R P c) X C i R P c (eqI set (pack_c_u_r_p_e X C i R P c)).
prove Phi X (decode_c (pack_c_u_r_p_e X C i R P c 1)) (decode_u (pack_c_u_r_p_e X C i R P c 2)) (decode_r (pack_c_u_r_p_e X C i R P c 3)) (decode_p (pack_c_u_r_p_e X C i R P c 4)) (pack_c_u_r_p_e X C i R P c 5) = Phi X C i R P c.
rewrite <- struct_c_u_r_p_e_5_eq (pack_c_u_r_p_e X C i R P c) X C i R P c (eqI set (pack_c_u_r_p_e X C i R P c)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_u_r_p_e X C i R P c 1) U <-> C U.
  rewrite <- struct_c_u_r_p_e_1_eq (pack_c_u_r_p_e X C i R P c) X C i R P c (eqI set (pack_c_u_r_p_e X C i R P c)) U HU.
  apply iff_refl.
- let x. assume Hx.
  prove decode_u (pack_c_u_r_p_e X C i R P c 2) x = i x.
  apply eq_sym set.
  exact struct_c_u_r_p_e_2_eq (pack_c_u_r_p_e X C i R P c) X C i R P c (eqI set (pack_c_u_r_p_e X C i R P c)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_u_r_p_e X C i R P c 3) x y <-> R x y.
  rewrite <- struct_c_u_r_p_e_3_eq (pack_c_u_r_p_e X C i R P c) X C i R P c (eqI set (pack_c_u_r_p_e X C i R P c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_u_r_p_e X C i R P c 4) x <-> P x.
  rewrite <- struct_c_u_r_p_e_4_eq (pack_c_u_r_p_e X C i R P c) X C i R P c (eqI set (pack_c_u_r_p_e X C i R P c)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_u_r_p_e.

Definition pack_c_u_r_e_e : set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> set -> set -> set := fun X C i R c d => (X,encode_c X C,encode_u X i,encode_r X R,c,d).

Definition struct_c_u_r_e_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists i:set -> set, exists R:set -> set -> prop, exists c:set, exists d:set, (forall x :e X, i x :e X) /\ c :e X /\ d :e X /\ S = pack_c_u_r_e_e X C i R c d.

Theorem pack_c_u_r_e_e_ext : forall X, forall C C':(set -> prop) -> prop, forall i i':set -> set, forall R R':set -> set -> prop, forall c, forall d,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 pack_c_u_r_e_e X C i R c d = pack_c_u_r_e_e X C' i' R' c d.
let X C C' i i' R R' c d. assume H1. assume H2. assume H3.
prove (X,encode_c X C,encode_u X i,encode_r X R,c,d) = (X,encode_c X C',encode_u X i',encode_r X R',c,d).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_c_u_r_e_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_u_r_e_e X C i R c d -> X = S 0.
let S X C i R c d. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_u X i,encode_r X R,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_u_r_e_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_u_r_e_e X C i R c d -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C i R c d. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_u X i,encode_r X R,c,d) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_u_r_e_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_u_r_e_e X C i R c d -> forall x :e X, i x = decode_u (S 2) x.
let S X C i R c d. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_u X i,encode_r X R,c,d) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_u_r_e_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_u_r_e_e X C i R c d -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X C i R c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_u X i,encode_r X R,c,d) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_u_r_e_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_u_r_e_e X C i R c d -> c = S 4.
let S X C i R c d. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_u X i,encode_r X R,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_c_u_r_e_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_c_u_r_e_e X C i R c d -> d = S 5.
let S X C i R c d. assume H1.
rewrite H1. prove d = (X,encode_c X C,encode_u X i,encode_r X R,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_u_r_e_e: forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, (forall x :e X, i x :e X) -> c :e X -> d :e X -> struct_c_u_r_e_e (pack_c_u_r_e_e X C i R c d).
let X C i R c d.
assume H2.
assume H4.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists i':set -> set, exists R':set -> set -> prop, exists c':set, exists d':set,  (forall x :e X', i' x :e X') /\ c' :e X' /\ d' :e X' /\ pack_c_u_r_e_e X C i R c d = pack_c_u_r_e_e X' C' i' R' c' d'.
witness X. witness C. witness i. witness R. witness c. witness d.
apply andI.
apply andI.
apply andI.
exact H2.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_u_r_e_e_eta: forall S, struct_c_u_r_e_e S -> S = pack_c_u_r_e_e (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_r (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let i.
assume H3. apply H3. let R.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_u_r_e_e_0_eq S X C i R c d Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),S 4,S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_u_r_e_e_1_eq S X C i R c d Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_c_u_r_e_e_2_eq S X C i R c d Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_u_r_e_e_3_eq S X C i R c d Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_c_u_r_e_e_4_eq S X C i R c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_c_u_r_e_e_5_eq S X C i R c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_u_r_e_e.

Variable A:SType.

Definition unpack_c_u_r_e_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_r (S 3)) (S 4) (S 5).

Theorem unpack_c_u_r_e_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> set -> prop) -> set -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall c, forall d,Phi X C i R c d = Phi X C' i' R' c d)
  ->
  forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, unpack_c_u_r_e_e (pack_c_u_r_e_e X C i R c d) Phi = Phi X C i R c d.
let Phi.
assume HPhi.
let X C i R c d.
prove Phi (pack_c_u_r_e_e X C i R c d 0) (decode_c (pack_c_u_r_e_e X C i R c d 1)) (decode_u (pack_c_u_r_e_e X C i R c d 2)) (decode_r (pack_c_u_r_e_e X C i R c d 3)) (pack_c_u_r_e_e X C i R c d 4) (pack_c_u_r_e_e X C i R c d 5) = Phi X C i R c d.
rewrite <- struct_c_u_r_e_e_0_eq (pack_c_u_r_e_e X C i R c d) X C i R c d (eqI set (pack_c_u_r_e_e X C i R c d)).
prove Phi X (decode_c (pack_c_u_r_e_e X C i R c d 1)) (decode_u (pack_c_u_r_e_e X C i R c d 2)) (decode_r (pack_c_u_r_e_e X C i R c d 3)) (pack_c_u_r_e_e X C i R c d 4) (pack_c_u_r_e_e X C i R c d 5) = Phi X C i R c d.
rewrite <- struct_c_u_r_e_e_4_eq (pack_c_u_r_e_e X C i R c d) X C i R c d (eqI set (pack_c_u_r_e_e X C i R c d)).
rewrite <- struct_c_u_r_e_e_5_eq (pack_c_u_r_e_e X C i R c d) X C i R c d (eqI set (pack_c_u_r_e_e X C i R c d)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_u_r_e_e X C i R c d 1) U <-> C U.
  rewrite <- struct_c_u_r_e_e_1_eq (pack_c_u_r_e_e X C i R c d) X C i R c d (eqI set (pack_c_u_r_e_e X C i R c d)) U HU.
  apply iff_refl.
- let x. assume Hx.
  prove decode_u (pack_c_u_r_e_e X C i R c d 2) x = i x.
  apply eq_sym set.
  exact struct_c_u_r_e_e_2_eq (pack_c_u_r_e_e X C i R c d) X C i R c d (eqI set (pack_c_u_r_e_e X C i R c d)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_u_r_e_e X C i R c d 3) x y <-> R x y.
  rewrite <- struct_c_u_r_e_e_3_eq (pack_c_u_r_e_e X C i R c d) X C i R c d (eqI set (pack_c_u_r_e_e X C i R c d)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_c_u_r_e_e.

Definition pack_c_u_p_p_e : set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> prop) -> (set -> prop) -> set -> set := fun X C i P Q c => (X,encode_c X C,encode_u X i,encode_p X P,encode_p X Q,c).

Definition struct_c_u_p_p_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists i:set -> set, exists P:set -> prop, exists Q:set -> prop, exists c:set, (forall x :e X, i x :e X) /\ c :e X /\ S = pack_c_u_p_p_e X C i P Q c.

Theorem pack_c_u_p_p_e_ext : forall X, forall C C':(set -> prop) -> prop, forall i i':set -> set, forall P P':set -> prop, forall Q Q':set -> prop, forall c,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_c_u_p_p_e X C i P Q c = pack_c_u_p_p_e X C' i' P' Q' c.
let X C C' i i' P P' Q Q' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_c X C,encode_u X i,encode_p X P,encode_p X Q,c) = (X,encode_c X C',encode_u X i',encode_p X P',encode_p X Q',c).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_c_u_p_p_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_u_p_p_e X C i P Q c -> X = S 0.
let S X C i P Q c. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_u X i,encode_p X P,encode_p X Q,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_u_p_p_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_u_p_p_e X C i P Q c -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C i P Q c. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_u X i,encode_p X P,encode_p X Q,c) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_u_p_p_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_u_p_p_e X C i P Q c -> forall x :e X, i x = decode_u (S 2) x.
let S X C i P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_u X i,encode_p X P,encode_p X Q,c) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_u_p_p_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_u_p_p_e X C i P Q c -> forall x :e X, P x = decode_p (S 3) x.
let S X C i P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_u X i,encode_p X P,encode_p X Q,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_u_p_p_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_u_p_p_e X C i P Q c -> forall x :e X, Q x = decode_p (S 4) x.
let S X C i P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_c X C,encode_u X i,encode_p X P,encode_p X Q,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem struct_c_u_p_p_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_u_p_p_e X C i P Q c -> c = S 5.
let S X C i P Q c. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_u X i,encode_p X P,encode_p X Q,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_u_p_p_e: forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, (forall x :e X, i x :e X) -> c :e X -> struct_c_u_p_p_e (pack_c_u_p_p_e X C i P Q c).
let X C i P Q c.
assume H2.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists i':set -> set, exists P':set -> prop, exists Q':set -> prop, exists c':set,  (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_c_u_p_p_e X C i P Q c = pack_c_u_p_p_e X' C' i' P' Q' c'.
witness X. witness C. witness i. witness P. witness Q. witness c.
apply andI.
apply andI.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_u_p_p_e_eta: forall S, struct_c_u_p_p_e S -> S = pack_c_u_p_p_e (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let i.
assume H3. apply H3. let P.
assume H4. apply H4. let Q.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_u_p_p_e_0_eq S X C i P Q c Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_u X (decode_u (S 2)),encode_p X (decode_p (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_u_p_p_e_1_eq S X C i P Q c Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_c_u_p_p_e_2_eq S X C i P Q c Heq.
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_u_p_p_e_3_eq S X C i P Q c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: encode_p X Q = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_u_p_p_e_4_eq S X C i P Q c Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_c_u_p_p_e_5_eq S X C i P Q c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_u_p_p_e.

Variable A:SType.

Definition unpack_c_u_p_p_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_c_u_p_p_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) ->  forall c,Phi X C i P Q c = Phi X C' i' P' Q' c)
  ->
  forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, unpack_c_u_p_p_e (pack_c_u_p_p_e X C i P Q c) Phi = Phi X C i P Q c.
let Phi.
assume HPhi.
let X C i P Q c.
prove Phi (pack_c_u_p_p_e X C i P Q c 0) (decode_c (pack_c_u_p_p_e X C i P Q c 1)) (decode_u (pack_c_u_p_p_e X C i P Q c 2)) (decode_p (pack_c_u_p_p_e X C i P Q c 3)) (decode_p (pack_c_u_p_p_e X C i P Q c 4)) (pack_c_u_p_p_e X C i P Q c 5) = Phi X C i P Q c.
rewrite <- struct_c_u_p_p_e_0_eq (pack_c_u_p_p_e X C i P Q c) X C i P Q c (eqI set (pack_c_u_p_p_e X C i P Q c)).
prove Phi X (decode_c (pack_c_u_p_p_e X C i P Q c 1)) (decode_u (pack_c_u_p_p_e X C i P Q c 2)) (decode_p (pack_c_u_p_p_e X C i P Q c 3)) (decode_p (pack_c_u_p_p_e X C i P Q c 4)) (pack_c_u_p_p_e X C i P Q c 5) = Phi X C i P Q c.
rewrite <- struct_c_u_p_p_e_5_eq (pack_c_u_p_p_e X C i P Q c) X C i P Q c (eqI set (pack_c_u_p_p_e X C i P Q c)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_u_p_p_e X C i P Q c 1) U <-> C U.
  rewrite <- struct_c_u_p_p_e_1_eq (pack_c_u_p_p_e X C i P Q c) X C i P Q c (eqI set (pack_c_u_p_p_e X C i P Q c)) U HU.
  apply iff_refl.
- let x. assume Hx.
  prove decode_u (pack_c_u_p_p_e X C i P Q c 2) x = i x.
  apply eq_sym set.
  exact struct_c_u_p_p_e_2_eq (pack_c_u_p_p_e X C i P Q c) X C i P Q c (eqI set (pack_c_u_p_p_e X C i P Q c)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_c_u_p_p_e X C i P Q c 3) x <-> P x.
  rewrite <- struct_c_u_p_p_e_3_eq (pack_c_u_p_p_e X C i P Q c) X C i P Q c (eqI set (pack_c_u_p_p_e X C i P Q c)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_u_p_p_e X C i P Q c 4) x <-> Q x.
  rewrite <- struct_c_u_p_p_e_4_eq (pack_c_u_p_p_e X C i P Q c) X C i P Q c (eqI set (pack_c_u_p_p_e X C i P Q c)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_u_p_p_e.

Definition pack_c_u_p_e_e : set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> prop) -> set -> set -> set := fun X C i P c d => (X,encode_c X C,encode_u X i,encode_p X P,c,d).

Definition struct_c_u_p_e_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists i:set -> set, exists P:set -> prop, exists c:set, exists d:set, (forall x :e X, i x :e X) /\ c :e X /\ d :e X /\ S = pack_c_u_p_e_e X C i P c d.

Theorem pack_c_u_p_e_e_ext : forall X, forall C C':(set -> prop) -> prop, forall i i':set -> set, forall P P':set -> prop, forall c, forall d,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, P x <-> P' x) ->
 pack_c_u_p_e_e X C i P c d = pack_c_u_p_e_e X C' i' P' c d.
let X C C' i i' P P' c d. assume H1. assume H2. assume H3.
prove (X,encode_c X C,encode_u X i,encode_p X P,c,d) = (X,encode_c X C',encode_u X i',encode_p X P',c,d).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_c_u_p_e_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_u_p_e_e X C i P c d -> X = S 0.
let S X C i P c d. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_u X i,encode_p X P,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_u_p_e_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_u_p_e_e X C i P c d -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C i P c d. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_u X i,encode_p X P,c,d) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_u_p_e_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_u_p_e_e X C i P c d -> forall x :e X, i x = decode_u (S 2) x.
let S X C i P c d. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_c X C,encode_u X i,encode_p X P,c,d) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_c_u_p_e_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_u_p_e_e X C i P c d -> forall x :e X, P x = decode_p (S 3) x.
let S X C i P c d. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_u X i,encode_p X P,c,d) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_u_p_e_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_u_p_e_e X C i P c d -> c = S 4.
let S X C i P c d. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_u X i,encode_p X P,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_c_u_p_e_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_u_p_e_e X C i P c d -> d = S 5.
let S X C i P c d. assume H1.
rewrite H1. prove d = (X,encode_c X C,encode_u X i,encode_p X P,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_u_p_e_e: forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, (forall x :e X, i x :e X) -> c :e X -> d :e X -> struct_c_u_p_e_e (pack_c_u_p_e_e X C i P c d).
let X C i P c d.
assume H2.
assume H4.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists i':set -> set, exists P':set -> prop, exists c':set, exists d':set,  (forall x :e X', i' x :e X') /\ c' :e X' /\ d' :e X' /\ pack_c_u_p_e_e X C i P c d = pack_c_u_p_e_e X' C' i' P' c' d'.
witness X. witness C. witness i. witness P. witness c. witness d.
apply andI.
apply andI.
apply andI.
exact H2.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_u_p_e_e_eta: forall S, struct_c_u_p_e_e S -> S = pack_c_u_p_e_e (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_p (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let i.
assume H3. apply H3. let P.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_u_p_e_e_0_eq S X C i P c d Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_u X (decode_u (S 2)),encode_p X (decode_p (S 3)),S 4,S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_u_p_e_e_1_eq S X C i P c d Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_c_u_p_e_e_2_eq S X C i P c d Heq.
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_u_p_e_e_3_eq S X C i P c d Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_c_u_p_e_e_4_eq S X C i P c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_c_u_p_e_e_5_eq S X C i P c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_u_p_e_e.

Variable A:SType.

Definition unpack_c_u_p_e_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_u (S 2)) (decode_p (S 3)) (S 4) (S 5).

Theorem unpack_c_u_p_e_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set) -> (set -> prop) -> set -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c, forall d,Phi X C i P c d = Phi X C' i' P' c d)
  ->
  forall X, forall C:(set -> prop) -> prop, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, unpack_c_u_p_e_e (pack_c_u_p_e_e X C i P c d) Phi = Phi X C i P c d.
let Phi.
assume HPhi.
let X C i P c d.
prove Phi (pack_c_u_p_e_e X C i P c d 0) (decode_c (pack_c_u_p_e_e X C i P c d 1)) (decode_u (pack_c_u_p_e_e X C i P c d 2)) (decode_p (pack_c_u_p_e_e X C i P c d 3)) (pack_c_u_p_e_e X C i P c d 4) (pack_c_u_p_e_e X C i P c d 5) = Phi X C i P c d.
rewrite <- struct_c_u_p_e_e_0_eq (pack_c_u_p_e_e X C i P c d) X C i P c d (eqI set (pack_c_u_p_e_e X C i P c d)).
prove Phi X (decode_c (pack_c_u_p_e_e X C i P c d 1)) (decode_u (pack_c_u_p_e_e X C i P c d 2)) (decode_p (pack_c_u_p_e_e X C i P c d 3)) (pack_c_u_p_e_e X C i P c d 4) (pack_c_u_p_e_e X C i P c d 5) = Phi X C i P c d.
rewrite <- struct_c_u_p_e_e_4_eq (pack_c_u_p_e_e X C i P c d) X C i P c d (eqI set (pack_c_u_p_e_e X C i P c d)).
rewrite <- struct_c_u_p_e_e_5_eq (pack_c_u_p_e_e X C i P c d) X C i P c d (eqI set (pack_c_u_p_e_e X C i P c d)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_u_p_e_e X C i P c d 1) U <-> C U.
  rewrite <- struct_c_u_p_e_e_1_eq (pack_c_u_p_e_e X C i P c d) X C i P c d (eqI set (pack_c_u_p_e_e X C i P c d)) U HU.
  apply iff_refl.
- let x. assume Hx.
  prove decode_u (pack_c_u_p_e_e X C i P c d 2) x = i x.
  apply eq_sym set.
  exact struct_c_u_p_e_e_2_eq (pack_c_u_p_e_e X C i P c d) X C i P c d (eqI set (pack_c_u_p_e_e X C i P c d)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_c_u_p_e_e X C i P c d 3) x <-> P x.
  rewrite <- struct_c_u_p_e_e_3_eq (pack_c_u_p_e_e X C i P c d) X C i P c d (eqI set (pack_c_u_p_e_e X C i P c d)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_u_p_e_e.

Definition pack_c_r_p_p_e : set -> ((set -> prop) -> prop) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> set := fun X C R P Q c => (X,encode_c X C,encode_r X R,encode_p X P,encode_p X Q,c).

Definition struct_c_r_p_p_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists R:set -> set -> prop, exists P:set -> prop, exists Q:set -> prop, exists c:set, c :e X /\ S = pack_c_r_p_p_e X C R P Q c.

Theorem pack_c_r_p_p_e_ext : forall X, forall C C':(set -> prop) -> prop, forall R R':set -> set -> prop, forall P P':set -> prop, forall Q Q':set -> prop, forall c,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_c_r_p_p_e X C R P Q c = pack_c_r_p_p_e X C' R' P' Q' c.
let X C C' R R' P P' Q Q' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_c X C,encode_r X R,encode_p X P,encode_p X Q,c) = (X,encode_c X C',encode_r X R',encode_p X P',encode_p X Q',c).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_c_r_p_p_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_r_p_p_e X C R P Q c -> X = S 0.
let S X C R P Q c. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_r X R,encode_p X P,encode_p X Q,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_r_p_p_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_r_p_p_e X C R P Q c -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C R P Q c. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_r X R,encode_p X P,encode_p X Q,c) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_r_p_p_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_r_p_p_e X C R P Q c -> forall x y :e X, R x y = decode_r (S 2) x y.
let S X C R P Q c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_r X R,encode_p X P,encode_p X Q,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_r_p_p_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_r_p_p_e X C R P Q c -> forall x :e X, P x = decode_p (S 3) x.
let S X C R P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_r X R,encode_p X P,encode_p X Q,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_r_p_p_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_r_p_p_e X C R P Q c -> forall x :e X, Q x = decode_p (S 4) x.
let S X C R P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_c X C,encode_r X R,encode_p X P,encode_p X Q,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem struct_c_r_p_p_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_c_r_p_p_e X C R P Q c -> c = S 5.
let S X C R P Q c. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_r X R,encode_p X P,encode_p X Q,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_r_p_p_e: forall X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, c :e X -> struct_c_r_p_p_e (pack_c_r_p_p_e X C R P Q c).
let X C R P Q c.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists R':set -> set -> prop, exists P':set -> prop, exists Q':set -> prop, exists c':set,  c' :e X' /\ pack_c_r_p_p_e X C R P Q c = pack_c_r_p_p_e X' C' R' P' Q' c'.
witness X. witness C. witness R. witness P. witness Q. witness c.
apply andI.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_r_p_p_e_eta: forall S, struct_c_r_p_p_e S -> S = pack_c_r_p_p_e (S 0) (decode_c (S 1)) (decode_r (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let R.
assume H3. apply H3. let P.
assume H4. apply H4. let Q.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_r_p_p_e_0_eq S X C R P Q c Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_r X (decode_r (S 2)),encode_p X (decode_p (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_r_p_p_e_1_eq S X C R P Q c Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_r X R = encode_r X (decode_r (S 2)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_r_p_p_e_2_eq S X C R P Q c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_r_p_p_e_3_eq S X C R P Q c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: encode_p X Q = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_r_p_p_e_4_eq S X C R P Q c Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_c_r_p_p_e_5_eq S X C R P Q c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_r_p_p_e.

Variable A:SType.

Definition unpack_c_r_p_p_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_r (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_c_r_p_p_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) ->  forall c,Phi X C R P Q c = Phi X C' R' P' Q' c)
  ->
  forall X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, unpack_c_r_p_p_e (pack_c_r_p_p_e X C R P Q c) Phi = Phi X C R P Q c.
let Phi.
assume HPhi.
let X C R P Q c.
prove Phi (pack_c_r_p_p_e X C R P Q c 0) (decode_c (pack_c_r_p_p_e X C R P Q c 1)) (decode_r (pack_c_r_p_p_e X C R P Q c 2)) (decode_p (pack_c_r_p_p_e X C R P Q c 3)) (decode_p (pack_c_r_p_p_e X C R P Q c 4)) (pack_c_r_p_p_e X C R P Q c 5) = Phi X C R P Q c.
rewrite <- struct_c_r_p_p_e_0_eq (pack_c_r_p_p_e X C R P Q c) X C R P Q c (eqI set (pack_c_r_p_p_e X C R P Q c)).
prove Phi X (decode_c (pack_c_r_p_p_e X C R P Q c 1)) (decode_r (pack_c_r_p_p_e X C R P Q c 2)) (decode_p (pack_c_r_p_p_e X C R P Q c 3)) (decode_p (pack_c_r_p_p_e X C R P Q c 4)) (pack_c_r_p_p_e X C R P Q c 5) = Phi X C R P Q c.
rewrite <- struct_c_r_p_p_e_5_eq (pack_c_r_p_p_e X C R P Q c) X C R P Q c (eqI set (pack_c_r_p_p_e X C R P Q c)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_r_p_p_e X C R P Q c 1) U <-> C U.
  rewrite <- struct_c_r_p_p_e_1_eq (pack_c_r_p_p_e X C R P Q c) X C R P Q c (eqI set (pack_c_r_p_p_e X C R P Q c)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_r_p_p_e X C R P Q c 2) x y <-> R x y.
  rewrite <- struct_c_r_p_p_e_2_eq (pack_c_r_p_p_e X C R P Q c) X C R P Q c (eqI set (pack_c_r_p_p_e X C R P Q c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_r_p_p_e X C R P Q c 3) x <-> P x.
  rewrite <- struct_c_r_p_p_e_3_eq (pack_c_r_p_p_e X C R P Q c) X C R P Q c (eqI set (pack_c_r_p_p_e X C R P Q c)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_r_p_p_e X C R P Q c 4) x <-> Q x.
  rewrite <- struct_c_r_p_p_e_4_eq (pack_c_r_p_p_e X C R P Q c) X C R P Q c (eqI set (pack_c_r_p_p_e X C R P Q c)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_r_p_p_e.

Definition pack_c_r_p_e_e : set -> ((set -> prop) -> prop) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> set := fun X C R P c d => (X,encode_c X C,encode_r X R,encode_p X P,c,d).

Definition struct_c_r_p_e_e : set -> prop := fun S => exists X:set, exists C:(set -> prop) -> prop, exists R:set -> set -> prop, exists P:set -> prop, exists c:set, exists d:set, c :e X /\ d :e X /\ S = pack_c_r_p_e_e X C R P c d.

Theorem pack_c_r_p_e_e_ext : forall X, forall C C':(set -> prop) -> prop, forall R R':set -> set -> prop, forall P P':set -> prop, forall c, forall d,
 (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_c_r_p_e_e X C R P c d = pack_c_r_p_e_e X C' R' P' c d.
let X C C' R R' P P' c d. assume H1. assume H2. assume H3.
prove (X,encode_c X C,encode_r X R,encode_p X P,c,d) = (X,encode_c X C',encode_r X R',encode_p X P',c,d).
claim L1: encode_c X C = encode_c X C'.
{ apply encode_c_ext. exact H1. }
rewrite <- L1.
claim L2: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_c_r_p_e_e_0_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_r_p_e_e X C R P c d -> X = S 0.
let S X C R P c d. assume H1. rewrite H1.
prove X = (X,encode_c X C,encode_r X R,encode_p X P,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_c_r_p_e_e_1_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_r_p_e_e X C R P c d -> forall U:set -> prop, (forall x, U x -> x :e X) -> C U = decode_c (S 1) U.
let S X C R P c d. assume H1.
let U. assume HU. rewrite H1.
prove C U = decode_c ((X,encode_c X C,encode_r X R,encode_p X P,c,d) 1) U.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_c X C U HU.
Qed.

Theorem struct_c_r_p_e_e_2_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_r_p_e_e X C R P c d -> forall x y :e X, R x y = decode_r (S 2) x y.
let S X C R P c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_c X C,encode_r X R,encode_p X P,c,d) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_c_r_p_e_e_3_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_r_p_e_e X C R P c d -> forall x :e X, P x = decode_p (S 3) x.
let S X C R P c d. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_c X C,encode_r X R,encode_p X P,c,d) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_c_r_p_e_e_4_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_r_p_e_e X C R P c d -> c = S 4.
let S X C R P c d. assume H1.
rewrite H1. prove c = (X,encode_c X C,encode_r X R,encode_p X P,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_c_r_p_e_e_5_eq: forall S X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_c_r_p_e_e X C R P c d -> d = S 5.
let S X C R P c d. assume H1.
rewrite H1. prove d = (X,encode_c X C,encode_r X R,encode_p X P,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_c_r_p_e_e: forall X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, c :e X -> d :e X -> struct_c_r_p_e_e (pack_c_r_p_e_e X C R P c d).
let X C R P c d.
assume H4.
assume H5.
prove exists X':set, exists C':(set -> prop) -> prop, exists R':set -> set -> prop, exists P':set -> prop, exists c':set, exists d':set,  c' :e X' /\ d' :e X' /\ pack_c_r_p_e_e X C R P c d = pack_c_r_p_e_e X' C' R' P' c' d'.
witness X. witness C. witness R. witness P. witness c. witness d.
apply andI.
apply andI.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_c_r_p_e_e_eta: forall S, struct_c_r_p_e_e S -> S = pack_c_r_p_e_e (S 0) (decode_c (S 1)) (decode_r (S 2)) (decode_p (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let C.
assume H2. apply H2. let R.
assume H3. apply H3. let P.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_c_r_p_e_e_0_eq S X C R P c d Heq.
prove S = (X,encode_c X (decode_c (S 1)),encode_r X (decode_r (S 2)),encode_p X (decode_p (S 3)),S 4,S 5).
claim L1: encode_c X C = encode_c X (decode_c (S 1)).
{ apply encode_c_ext.
  let U. assume HU.
  rewrite <- struct_c_r_p_e_e_1_eq S X C R P c d Heq U HU.
  exact iff_refl (C U).
}
rewrite <- L1.
claim L2: encode_r X R = encode_r X (decode_r (S 2)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_c_r_p_e_e_2_eq S X C R P c d Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_c_r_p_e_e_3_eq S X C R P c d Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_c_r_p_e_e_4_eq S X C R P c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_c_r_p_e_e_5_eq S X C R P c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_c_r_p_e_e.

Variable A:SType.

Definition unpack_c_r_p_e_e : set -> (set -> ((set -> prop) -> prop) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_c (S 1)) (decode_r (S 2)) (decode_p (S 3)) (S 4) (S 5).

Theorem unpack_c_r_p_e_e_eq : forall Phi:set -> ((set -> prop) -> prop) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c, forall d,Phi X C R P c d = Phi X C' R' P' c d)
  ->
  forall X, forall C:(set -> prop) -> prop, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, unpack_c_r_p_e_e (pack_c_r_p_e_e X C R P c d) Phi = Phi X C R P c d.
let Phi.
assume HPhi.
let X C R P c d.
prove Phi (pack_c_r_p_e_e X C R P c d 0) (decode_c (pack_c_r_p_e_e X C R P c d 1)) (decode_r (pack_c_r_p_e_e X C R P c d 2)) (decode_p (pack_c_r_p_e_e X C R P c d 3)) (pack_c_r_p_e_e X C R P c d 4) (pack_c_r_p_e_e X C R P c d 5) = Phi X C R P c d.
rewrite <- struct_c_r_p_e_e_0_eq (pack_c_r_p_e_e X C R P c d) X C R P c d (eqI set (pack_c_r_p_e_e X C R P c d)).
prove Phi X (decode_c (pack_c_r_p_e_e X C R P c d 1)) (decode_r (pack_c_r_p_e_e X C R P c d 2)) (decode_p (pack_c_r_p_e_e X C R P c d 3)) (pack_c_r_p_e_e X C R P c d 4) (pack_c_r_p_e_e X C R P c d 5) = Phi X C R P c d.
rewrite <- struct_c_r_p_e_e_4_eq (pack_c_r_p_e_e X C R P c d) X C R P c d (eqI set (pack_c_r_p_e_e X C R P c d)).
rewrite <- struct_c_r_p_e_e_5_eq (pack_c_r_p_e_e X C R P c d) X C R P c d (eqI set (pack_c_r_p_e_e X C R P c d)).
apply HPhi.
- let U. assume HU.
  prove decode_c (pack_c_r_p_e_e X C R P c d 1) U <-> C U.
  rewrite <- struct_c_r_p_e_e_1_eq (pack_c_r_p_e_e X C R P c d) X C R P c d (eqI set (pack_c_r_p_e_e X C R P c d)) U HU.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_c_r_p_e_e X C R P c d 2) x y <-> R x y.
  rewrite <- struct_c_r_p_e_e_2_eq (pack_c_r_p_e_e X C R P c d) X C R P c d (eqI set (pack_c_r_p_e_e X C R P c d)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_c_r_p_e_e X C R P c d 3) x <-> P x.
  rewrite <- struct_c_r_p_e_e_3_eq (pack_c_r_p_e_e X C R P c d) X C R P c d (eqI set (pack_c_r_p_e_e X C R P c d)) x Hx.
  apply iff_refl.
Qed.

End unpack_c_r_p_e_e.

Definition pack_b_b_b_u_u : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> set := fun X f g h i j => (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_u X j).

Definition struct_b_b_b_u_u : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists h:set -> set -> set, exists i:set -> set, exists j:set -> set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x y :e X, h x y :e X) /\ (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ S = pack_b_b_b_u_u X f g h i j.

Theorem pack_b_b_b_u_u_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall h h':set -> set -> set, forall i i':set -> set, forall j j':set -> set,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, h x y = h' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 pack_b_b_b_u_u X f g h i j = pack_b_b_b_u_u X f' g' h' i' j'.
let X f f' g g' h h' i i' j j'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_u X j) = (X,encode_b X f',encode_b X g',encode_b X h',encode_u X i',encode_u X j').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_b X h = encode_b X h'.
{ apply encode_b_ext. exact H3. }
rewrite <- L3.
claim L4: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H4. }
rewrite <- L4.
claim L5: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_b_u_u_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall j:set -> set, S = pack_b_b_b_u_u X f g h i j -> X = S 0.
let S X f g h i j. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_u X j) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_b_u_u_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall j:set -> set, S = pack_b_b_b_u_u X f g h i j -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g h i j. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_u X j) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_u_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall j:set -> set, S = pack_b_b_b_u_u X f g h i j -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g h i j. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_u X j) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_u_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall j:set -> set, S = pack_b_b_b_u_u X f g h i j -> forall x y :e X, h x y = decode_b (S 3) x y.
let S X f g h i j. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove h x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_u X j) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym set. exact decode_encode_b X h x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_u_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall j:set -> set, S = pack_b_b_b_u_u X f g h i j -> forall x :e X, i x = decode_u (S 4) x.
let S X f g h i j. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_u X j) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_b_u_u_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall j:set -> set, S = pack_b_b_b_u_u X f g h i j -> forall x :e X, j x = decode_u (S 5) x.
let S X f g h i j. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_u X j) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem pack_struct_b_b_b_u_u: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall j:set -> set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x y :e X, h x y :e X) -> (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> struct_b_b_b_u_u (pack_b_b_b_u_u X f g h i j).
let X f g h i j.
assume H1.
assume H2.
assume H3.
assume H4.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists h':set -> set -> set, exists i':set -> set, exists j':set -> set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x y :e X', h' x y :e X') /\ (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ pack_b_b_b_u_u X f g h i j = pack_b_b_b_u_u X' f' g' h' i' j'.
witness X. witness f. witness g. witness h. witness i. witness j.
apply andI.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_b_u_u_eta: forall S, struct_b_b_b_u_u S -> S = pack_b_b_b_u_u (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_u (S 4)) (decode_u (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let h.
assume H4. apply H4. let i.
assume H5. apply H5. let j.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_b_u_u_0_eq S X f g h i j Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_b X (decode_b (S 3)),encode_u X (decode_u (S 4)),encode_u X (decode_u (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_u_1_eq S X f g h i j Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_u_2_eq S X f g h i j Heq.
}
rewrite <- L2.
claim L3: encode_b X h = encode_b X (decode_b (S 3)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_u_3_eq S X f g h i j Heq.
}
rewrite <- L3.
claim L4: encode_u X i = encode_u X (decode_u (S 4)).
{ apply encode_u_ext.
  exact struct_b_b_b_u_u_4_eq S X f g h i j Heq.
}
rewrite <- L4.
claim L5: encode_u X j = encode_u X (decode_u (S 5)).
{ apply encode_u_ext.
  exact struct_b_b_b_u_u_5_eq S X f g h i j Heq.
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_b_u_u.

Variable A:SType.

Definition unpack_b_b_b_u_u : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_u (S 4)) (decode_u (S 5)).

Theorem unpack_b_b_b_u_u_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall h h':set -> set -> set, (forall x y :e X, h x y = h' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) -> Phi X f g h i j = Phi X f' g' h' i' j')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall j:set -> set, unpack_b_b_b_u_u (pack_b_b_b_u_u X f g h i j) Phi = Phi X f g h i j.
let Phi.
assume HPhi.
let X f g h i j.
prove Phi (pack_b_b_b_u_u X f g h i j 0) (decode_b (pack_b_b_b_u_u X f g h i j 1)) (decode_b (pack_b_b_b_u_u X f g h i j 2)) (decode_b (pack_b_b_b_u_u X f g h i j 3)) (decode_u (pack_b_b_b_u_u X f g h i j 4)) (decode_u (pack_b_b_b_u_u X f g h i j 5)) = Phi X f g h i j.
rewrite <- struct_b_b_b_u_u_0_eq (pack_b_b_b_u_u X f g h i j) X f g h i j (eqI set (pack_b_b_b_u_u X f g h i j)).
prove Phi X (decode_b (pack_b_b_b_u_u X f g h i j 1)) (decode_b (pack_b_b_b_u_u X f g h i j 2)) (decode_b (pack_b_b_b_u_u X f g h i j 3)) (decode_u (pack_b_b_b_u_u X f g h i j 4)) (decode_u (pack_b_b_b_u_u X f g h i j 5)) = Phi X f g h i j.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_u X f g h i j 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_b_u_u_1_eq (pack_b_b_b_u_u X f g h i j) X f g h i j (eqI set (pack_b_b_b_u_u X f g h i j)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_u X f g h i j 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_b_u_u_2_eq (pack_b_b_b_u_u X f g h i j) X f g h i j (eqI set (pack_b_b_b_u_u X f g h i j)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_u X f g h i j 3) x y = h x y.
  apply eq_sym set.
  exact struct_b_b_b_u_u_3_eq (pack_b_b_b_u_u X f g h i j) X f g h i j (eqI set (pack_b_b_b_u_u X f g h i j)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_b_u_u X f g h i j 4) x = i x.
  apply eq_sym set.
  exact struct_b_b_b_u_u_4_eq (pack_b_b_b_u_u X f g h i j) X f g h i j (eqI set (pack_b_b_b_u_u X f g h i j)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_b_b_b_u_u X f g h i j 5) x = j x.
  apply eq_sym set.
  exact struct_b_b_b_u_u_5_eq (pack_b_b_b_u_u X f g h i j) X f g h i j (eqI set (pack_b_b_b_u_u X f g h i j)) x Hx.
Qed.

End unpack_b_b_b_u_u.

Definition pack_b_b_b_u_r : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> set := fun X f g h i R => (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_r X R).

Definition struct_b_b_b_u_r : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists h:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x y :e X, h x y :e X) /\ (forall x :e X, i x :e X) /\ S = pack_b_b_b_u_r X f g h i R.

Theorem pack_b_b_b_u_r_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall h h':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, h x y = h' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 pack_b_b_b_u_r X f g h i R = pack_b_b_b_u_r X f' g' h' i' R'.
let X f f' g g' h h' i i' R R'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_r X R) = (X,encode_b X f',encode_b X g',encode_b X h',encode_u X i',encode_r X R').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_b X h = encode_b X h'.
{ apply encode_b_ext. exact H3. }
rewrite <- L3.
claim L4: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H4. }
rewrite <- L4.
claim L5: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_b_u_r_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, S = pack_b_b_b_u_r X f g h i R -> X = S 0.
let S X f g h i R. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_r X R) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_b_u_r_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, S = pack_b_b_b_u_r X f g h i R -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g h i R. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_r X R) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_r_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, S = pack_b_b_b_u_r X f g h i R -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g h i R. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_r X R) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_r_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, S = pack_b_b_b_u_r X f g h i R -> forall x y :e X, h x y = decode_b (S 3) x y.
let S X f g h i R. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove h x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_r X R) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym set. exact decode_encode_b X h x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_r_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, S = pack_b_b_b_u_r X f g h i R -> forall x :e X, i x = decode_u (S 4) x.
let S X f g h i R. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_r X R) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_b_u_r_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, S = pack_b_b_b_u_r X f g h i R -> forall x y :e X, R x y = decode_r (S 5) x y.
let S X f g h i R. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_r X R) 5) x y.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem pack_struct_b_b_b_u_r: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x y :e X, h x y :e X) -> (forall x :e X, i x :e X) -> struct_b_b_b_u_r (pack_b_b_b_u_r X f g h i R).
let X f g h i R.
assume H1.
assume H2.
assume H3.
assume H4.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists h':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x y :e X', h' x y :e X') /\ (forall x :e X', i' x :e X') /\ pack_b_b_b_u_r X f g h i R = pack_b_b_b_u_r X' f' g' h' i' R'.
witness X. witness f. witness g. witness h. witness i. witness R.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H4.
apply eqI set.
Qed.

Theorem struct_b_b_b_u_r_eta: forall S, struct_b_b_b_u_r S -> S = pack_b_b_b_u_r (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_u (S 4)) (decode_r (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let h.
assume H4. apply H4. let i.
assume H5. apply H5. let R.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_b_u_r_0_eq S X f g h i R Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_b X (decode_b (S 3)),encode_u X (decode_u (S 4)),encode_r X (decode_r (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_r_1_eq S X f g h i R Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_r_2_eq S X f g h i R Heq.
}
rewrite <- L2.
claim L3: encode_b X h = encode_b X (decode_b (S 3)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_r_3_eq S X f g h i R Heq.
}
rewrite <- L3.
claim L4: encode_u X i = encode_u X (decode_u (S 4)).
{ apply encode_u_ext.
  exact struct_b_b_b_u_r_4_eq S X f g h i R Heq.
}
rewrite <- L4.
claim L5: encode_r X R = encode_r X (decode_r (S 5)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_b_u_r_5_eq S X f g h i R Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_b_u_r.

Variable A:SType.

Definition unpack_b_b_b_u_r : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_u (S 4)) (decode_r (S 5)).

Theorem unpack_b_b_b_u_r_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall h h':set -> set -> set, (forall x y :e X, h x y = h' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) -> Phi X f g h i R = Phi X f' g' h' i' R')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, unpack_b_b_b_u_r (pack_b_b_b_u_r X f g h i R) Phi = Phi X f g h i R.
let Phi.
assume HPhi.
let X f g h i R.
prove Phi (pack_b_b_b_u_r X f g h i R 0) (decode_b (pack_b_b_b_u_r X f g h i R 1)) (decode_b (pack_b_b_b_u_r X f g h i R 2)) (decode_b (pack_b_b_b_u_r X f g h i R 3)) (decode_u (pack_b_b_b_u_r X f g h i R 4)) (decode_r (pack_b_b_b_u_r X f g h i R 5)) = Phi X f g h i R.
rewrite <- struct_b_b_b_u_r_0_eq (pack_b_b_b_u_r X f g h i R) X f g h i R (eqI set (pack_b_b_b_u_r X f g h i R)).
prove Phi X (decode_b (pack_b_b_b_u_r X f g h i R 1)) (decode_b (pack_b_b_b_u_r X f g h i R 2)) (decode_b (pack_b_b_b_u_r X f g h i R 3)) (decode_u (pack_b_b_b_u_r X f g h i R 4)) (decode_r (pack_b_b_b_u_r X f g h i R 5)) = Phi X f g h i R.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_r X f g h i R 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_b_u_r_1_eq (pack_b_b_b_u_r X f g h i R) X f g h i R (eqI set (pack_b_b_b_u_r X f g h i R)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_r X f g h i R 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_b_u_r_2_eq (pack_b_b_b_u_r X f g h i R) X f g h i R (eqI set (pack_b_b_b_u_r X f g h i R)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_r X f g h i R 3) x y = h x y.
  apply eq_sym set.
  exact struct_b_b_b_u_r_3_eq (pack_b_b_b_u_r X f g h i R) X f g h i R (eqI set (pack_b_b_b_u_r X f g h i R)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_b_u_r X f g h i R 4) x = i x.
  apply eq_sym set.
  exact struct_b_b_b_u_r_4_eq (pack_b_b_b_u_r X f g h i R) X f g h i R (eqI set (pack_b_b_b_u_r X f g h i R)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_b_u_r X f g h i R 5) x y <-> R x y.
  rewrite <- struct_b_b_b_u_r_5_eq (pack_b_b_b_u_r X f g h i R) X f g h i R (eqI set (pack_b_b_b_u_r X f g h i R)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_b_b_b_u_r.

Definition pack_b_b_b_u_p : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> set := fun X f g h i P => (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_p X P).

Definition struct_b_b_b_u_p : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists h:set -> set -> set, exists i:set -> set, exists P:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x y :e X, h x y :e X) /\ (forall x :e X, i x :e X) /\ S = pack_b_b_b_u_p X f g h i P.

Theorem pack_b_b_b_u_p_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall h h':set -> set -> set, forall i i':set -> set, forall P P':set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, h x y = h' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_b_b_u_p X f g h i P = pack_b_b_b_u_p X f' g' h' i' P'.
let X f f' g g' h h' i i' P P'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_p X P) = (X,encode_b X f',encode_b X g',encode_b X h',encode_u X i',encode_p X P').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_b X h = encode_b X h'.
{ apply encode_b_ext. exact H3. }
rewrite <- L3.
claim L4: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_b_u_p_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall P:set -> prop, S = pack_b_b_b_u_p X f g h i P -> X = S 0.
let S X f g h i P. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_p X P) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_b_u_p_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall P:set -> prop, S = pack_b_b_b_u_p X f g h i P -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g h i P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_p X P) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_p_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall P:set -> prop, S = pack_b_b_b_u_p X f g h i P -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g h i P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_p X P) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_p_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall P:set -> prop, S = pack_b_b_b_u_p X f g h i P -> forall x y :e X, h x y = decode_b (S 3) x y.
let S X f g h i P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove h x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_p X P) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym set. exact decode_encode_b X h x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_p_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall P:set -> prop, S = pack_b_b_b_u_p X f g h i P -> forall x :e X, i x = decode_u (S 4) x.
let S X f g h i P. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_p X P) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_b_u_p_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall P:set -> prop, S = pack_b_b_b_u_p X f g h i P -> forall x :e X, P x = decode_p (S 5) x.
let S X f g h i P. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,encode_p X P) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem pack_struct_b_b_b_u_p: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall P:set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x y :e X, h x y :e X) -> (forall x :e X, i x :e X) -> struct_b_b_b_u_p (pack_b_b_b_u_p X f g h i P).
let X f g h i P.
assume H1.
assume H2.
assume H3.
assume H4.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists h':set -> set -> set, exists i':set -> set, exists P':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x y :e X', h' x y :e X') /\ (forall x :e X', i' x :e X') /\ pack_b_b_b_u_p X f g h i P = pack_b_b_b_u_p X' f' g' h' i' P'.
witness X. witness f. witness g. witness h. witness i. witness P.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H4.
apply eqI set.
Qed.

Theorem struct_b_b_b_u_p_eta: forall S, struct_b_b_b_u_p S -> S = pack_b_b_b_u_p (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_u (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let h.
assume H4. apply H4. let i.
assume H5. apply H5. let P.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_b_u_p_0_eq S X f g h i P Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_b X (decode_b (S 3)),encode_u X (decode_u (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_p_1_eq S X f g h i P Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_p_2_eq S X f g h i P Heq.
}
rewrite <- L2.
claim L3: encode_b X h = encode_b X (decode_b (S 3)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_p_3_eq S X f g h i P Heq.
}
rewrite <- L3.
claim L4: encode_u X i = encode_u X (decode_u (S 4)).
{ apply encode_u_ext.
  exact struct_b_b_b_u_p_4_eq S X f g h i P Heq.
}
rewrite <- L4.
claim L5: encode_p X P = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_b_u_p_5_eq S X f g h i P Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_b_u_p.

Variable A:SType.

Definition unpack_b_b_b_u_p : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_u (S 4)) (decode_p (S 5)).

Theorem unpack_b_b_b_u_p_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall h h':set -> set -> set, (forall x y :e X, h x y = h' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> Phi X f g h i P = Phi X f' g' h' i' P')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall P:set -> prop, unpack_b_b_b_u_p (pack_b_b_b_u_p X f g h i P) Phi = Phi X f g h i P.
let Phi.
assume HPhi.
let X f g h i P.
prove Phi (pack_b_b_b_u_p X f g h i P 0) (decode_b (pack_b_b_b_u_p X f g h i P 1)) (decode_b (pack_b_b_b_u_p X f g h i P 2)) (decode_b (pack_b_b_b_u_p X f g h i P 3)) (decode_u (pack_b_b_b_u_p X f g h i P 4)) (decode_p (pack_b_b_b_u_p X f g h i P 5)) = Phi X f g h i P.
rewrite <- struct_b_b_b_u_p_0_eq (pack_b_b_b_u_p X f g h i P) X f g h i P (eqI set (pack_b_b_b_u_p X f g h i P)).
prove Phi X (decode_b (pack_b_b_b_u_p X f g h i P 1)) (decode_b (pack_b_b_b_u_p X f g h i P 2)) (decode_b (pack_b_b_b_u_p X f g h i P 3)) (decode_u (pack_b_b_b_u_p X f g h i P 4)) (decode_p (pack_b_b_b_u_p X f g h i P 5)) = Phi X f g h i P.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_p X f g h i P 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_b_u_p_1_eq (pack_b_b_b_u_p X f g h i P) X f g h i P (eqI set (pack_b_b_b_u_p X f g h i P)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_p X f g h i P 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_b_u_p_2_eq (pack_b_b_b_u_p X f g h i P) X f g h i P (eqI set (pack_b_b_b_u_p X f g h i P)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_p X f g h i P 3) x y = h x y.
  apply eq_sym set.
  exact struct_b_b_b_u_p_3_eq (pack_b_b_b_u_p X f g h i P) X f g h i P (eqI set (pack_b_b_b_u_p X f g h i P)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_b_u_p X f g h i P 4) x = i x.
  apply eq_sym set.
  exact struct_b_b_b_u_p_4_eq (pack_b_b_b_u_p X f g h i P) X f g h i P (eqI set (pack_b_b_b_u_p X f g h i P)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_b_b_b_u_p X f g h i P 5) x <-> P x.
  rewrite <- struct_b_b_b_u_p_5_eq (pack_b_b_b_u_p X f g h i P) X f g h i P (eqI set (pack_b_b_b_u_p X f g h i P)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_b_u_p.

Definition pack_b_b_b_u_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> set -> set := fun X f g h i c => (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,c).

Definition struct_b_b_b_u_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists h:set -> set -> set, exists i:set -> set, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x y :e X, h x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ S = pack_b_b_b_u_e X f g h i c.

Theorem pack_b_b_b_u_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall h h':set -> set -> set, forall i i':set -> set, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, h x y = h' x y) ->
 (forall x :e X, i x = i' x) ->
 pack_b_b_b_u_e X f g h i c = pack_b_b_b_u_e X f' g' h' i' c.
let X f f' g g' h h' i i' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,c) = (X,encode_b X f',encode_b X g',encode_b X h',encode_u X i',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_b X h = encode_b X h'.
{ apply encode_b_ext. exact H3. }
rewrite <- L3.
claim L4: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_b_b_u_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall c:set, S = pack_b_b_b_u_e X f g h i c -> X = S 0.
let S X f g h i c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_b_u_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall c:set, S = pack_b_b_b_u_e X f g h i c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g h i c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall c:set, S = pack_b_b_b_u_e X f g h i c -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g h i c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall c:set, S = pack_b_b_b_u_e X f g h i c -> forall x y :e X, h x y = decode_b (S 3) x y.
let S X f g h i c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove h x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym set. exact decode_encode_b X h x Hx y Hy.
Qed.

Theorem struct_b_b_b_u_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall c:set, S = pack_b_b_b_u_e X f g h i c -> forall x :e X, i x = decode_u (S 4) x.
let S X f g h i c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_b_u_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall c:set, S = pack_b_b_b_u_e X f g h i c -> c = S 5.
let S X f g h i c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_b X h,encode_u X i,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_b_u_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall c:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x y :e X, h x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> struct_b_b_b_u_e (pack_b_b_b_u_e X f g h i c).
let X f g h i c.
assume H1.
assume H2.
assume H3.
assume H4.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists h':set -> set -> set, exists i':set -> set, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x y :e X', h' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_b_b_b_u_e X f g h i c = pack_b_b_b_u_e X' f' g' h' i' c'.
witness X. witness f. witness g. witness h. witness i. witness c.
apply andI.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_b_u_e_eta: forall S, struct_b_b_b_u_e S -> S = pack_b_b_b_u_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_u (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let h.
assume H4. apply H4. let i.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_b_u_e_0_eq S X f g h i c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_b X (decode_b (S 3)),encode_u X (decode_u (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_e_1_eq S X f g h i c Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_e_2_eq S X f g h i c Heq.
}
rewrite <- L2.
claim L3: encode_b X h = encode_b X (decode_b (S 3)).
{ apply encode_b_ext.
  exact struct_b_b_b_u_e_3_eq S X f g h i c Heq.
}
rewrite <- L3.
claim L4: encode_u X i = encode_u X (decode_u (S 4)).
{ apply encode_u_ext.
  exact struct_b_b_b_u_e_4_eq S X f g h i c Heq.
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_b_b_u_e_5_eq S X f g h i c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_b_u_e.

Variable A:SType.

Definition unpack_b_b_b_u_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_u (S 4)) (S 5).

Theorem unpack_b_b_b_u_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall h h':set -> set -> set, (forall x y :e X, h x y = h' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall c,Phi X f g h i c = Phi X f' g' h' i' c)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall i:set -> set, forall c:set, unpack_b_b_b_u_e (pack_b_b_b_u_e X f g h i c) Phi = Phi X f g h i c.
let Phi.
assume HPhi.
let X f g h i c.
prove Phi (pack_b_b_b_u_e X f g h i c 0) (decode_b (pack_b_b_b_u_e X f g h i c 1)) (decode_b (pack_b_b_b_u_e X f g h i c 2)) (decode_b (pack_b_b_b_u_e X f g h i c 3)) (decode_u (pack_b_b_b_u_e X f g h i c 4)) (pack_b_b_b_u_e X f g h i c 5) = Phi X f g h i c.
rewrite <- struct_b_b_b_u_e_0_eq (pack_b_b_b_u_e X f g h i c) X f g h i c (eqI set (pack_b_b_b_u_e X f g h i c)).
prove Phi X (decode_b (pack_b_b_b_u_e X f g h i c 1)) (decode_b (pack_b_b_b_u_e X f g h i c 2)) (decode_b (pack_b_b_b_u_e X f g h i c 3)) (decode_u (pack_b_b_b_u_e X f g h i c 4)) (pack_b_b_b_u_e X f g h i c 5) = Phi X f g h i c.
rewrite <- struct_b_b_b_u_e_5_eq (pack_b_b_b_u_e X f g h i c) X f g h i c (eqI set (pack_b_b_b_u_e X f g h i c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_e X f g h i c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_b_u_e_1_eq (pack_b_b_b_u_e X f g h i c) X f g h i c (eqI set (pack_b_b_b_u_e X f g h i c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_e X f g h i c 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_b_u_e_2_eq (pack_b_b_b_u_e X f g h i c) X f g h i c (eqI set (pack_b_b_b_u_e X f g h i c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_u_e X f g h i c 3) x y = h x y.
  apply eq_sym set.
  exact struct_b_b_b_u_e_3_eq (pack_b_b_b_u_e X f g h i c) X f g h i c (eqI set (pack_b_b_b_u_e X f g h i c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_b_u_e X f g h i c 4) x = i x.
  apply eq_sym set.
  exact struct_b_b_b_u_e_4_eq (pack_b_b_b_u_e X f g h i c) X f g h i c (eqI set (pack_b_b_b_u_e X f g h i c)) x Hx.
Qed.

End unpack_b_b_b_u_e.

Definition pack_b_b_b_r_r : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set := fun X f g h R T => (X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_r X T).

Definition struct_b_b_b_r_r : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists h:set -> set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x y :e X, h x y :e X) /\ S = pack_b_b_b_r_r X f g h R T.

Theorem pack_b_b_b_r_r_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall h h':set -> set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, h x y = h' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 pack_b_b_b_r_r X f g h R T = pack_b_b_b_r_r X f' g' h' R' T'.
let X f f' g g' h h' R R' T T'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_r X T) = (X,encode_b X f',encode_b X g',encode_b X h',encode_r X R',encode_r X T').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_b X h = encode_b X h'.
{ apply encode_b_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
claim L5: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_b_r_r_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_b_r_r X f g h R T -> X = S 0.
let S X f g h R T. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_r X T) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_b_r_r_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_b_r_r X f g h R T -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g h R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_r X T) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_r_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_b_r_r X f g h R T -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g h R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_r X T) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_r_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_b_r_r X f g h R T -> forall x y :e X, h x y = decode_b (S 3) x y.
let S X f g h R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove h x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_r X T) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym set. exact decode_encode_b X h x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_r_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_b_r_r X f g h R T -> forall x y :e X, R x y = decode_r (S 4) x y.
let S X f g h R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_r X T) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_r_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_b_r_r X f g h R T -> forall x y :e X, T x y = decode_r (S 5) x y.
let S X f g h R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_r X T) 5) x y.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem pack_struct_b_b_b_r_r: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x y :e X, h x y :e X) -> struct_b_b_b_r_r (pack_b_b_b_r_r X f g h R T).
let X f g h R T.
assume H1.
assume H2.
assume H3.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists h':set -> set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x y :e X', h' x y :e X') /\ pack_b_b_b_r_r X f g h R T = pack_b_b_b_r_r X' f' g' h' R' T'.
witness X. witness f. witness g. witness h. witness R. witness T.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
apply eqI set.
Qed.

Theorem struct_b_b_b_r_r_eta: forall S, struct_b_b_b_r_r S -> S = pack_b_b_b_r_r (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_r (S 4)) (decode_r (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let h.
assume H4. apply H4. let R.
assume H5. apply H5. let T.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_b_r_r_0_eq S X f g h R T Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_b X (decode_b (S 3)),encode_r X (decode_r (S 4)),encode_r X (decode_r (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_b_r_r_1_eq S X f g h R T Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_b_r_r_2_eq S X f g h R T Heq.
}
rewrite <- L2.
claim L3: encode_b X h = encode_b X (decode_b (S 3)).
{ apply encode_b_ext.
  exact struct_b_b_b_r_r_3_eq S X f g h R T Heq.
}
rewrite <- L3.
claim L4: encode_r X R = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_b_r_r_4_eq S X f g h R T Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L4.
claim L5: encode_r X T = encode_r X (decode_r (S 5)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_b_r_r_5_eq S X f g h R T Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_b_r_r.

Variable A:SType.

Definition unpack_b_b_b_r_r : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_r (S 4)) (decode_r (S 5)).

Theorem unpack_b_b_b_r_r_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall h h':set -> set -> set, (forall x y :e X, h x y = h' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) -> Phi X f g h R T = Phi X f' g' h' R' T')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, unpack_b_b_b_r_r (pack_b_b_b_r_r X f g h R T) Phi = Phi X f g h R T.
let Phi.
assume HPhi.
let X f g h R T.
prove Phi (pack_b_b_b_r_r X f g h R T 0) (decode_b (pack_b_b_b_r_r X f g h R T 1)) (decode_b (pack_b_b_b_r_r X f g h R T 2)) (decode_b (pack_b_b_b_r_r X f g h R T 3)) (decode_r (pack_b_b_b_r_r X f g h R T 4)) (decode_r (pack_b_b_b_r_r X f g h R T 5)) = Phi X f g h R T.
rewrite <- struct_b_b_b_r_r_0_eq (pack_b_b_b_r_r X f g h R T) X f g h R T (eqI set (pack_b_b_b_r_r X f g h R T)).
prove Phi X (decode_b (pack_b_b_b_r_r X f g h R T 1)) (decode_b (pack_b_b_b_r_r X f g h R T 2)) (decode_b (pack_b_b_b_r_r X f g h R T 3)) (decode_r (pack_b_b_b_r_r X f g h R T 4)) (decode_r (pack_b_b_b_r_r X f g h R T 5)) = Phi X f g h R T.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_r_r X f g h R T 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_b_r_r_1_eq (pack_b_b_b_r_r X f g h R T) X f g h R T (eqI set (pack_b_b_b_r_r X f g h R T)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_r_r X f g h R T 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_b_r_r_2_eq (pack_b_b_b_r_r X f g h R T) X f g h R T (eqI set (pack_b_b_b_r_r X f g h R T)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_r_r X f g h R T 3) x y = h x y.
  apply eq_sym set.
  exact struct_b_b_b_r_r_3_eq (pack_b_b_b_r_r X f g h R T) X f g h R T (eqI set (pack_b_b_b_r_r X f g h R T)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_b_r_r X f g h R T 4) x y <-> R x y.
  rewrite <- struct_b_b_b_r_r_4_eq (pack_b_b_b_r_r X f g h R T) X f g h R T (eqI set (pack_b_b_b_r_r X f g h R T)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_b_r_r X f g h R T 5) x y <-> T x y.
  rewrite <- struct_b_b_b_r_r_5_eq (pack_b_b_b_r_r X f g h R T) X f g h R T (eqI set (pack_b_b_b_r_r X f g h R T)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_b_b_b_r_r.

Definition pack_b_b_b_r_p : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> set := fun X f g h R P => (X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_p X P).

Definition struct_b_b_b_r_p : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists h:set -> set -> set, exists R:set -> set -> prop, exists P:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x y :e X, h x y :e X) /\ S = pack_b_b_b_r_p X f g h R P.

Theorem pack_b_b_b_r_p_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall h h':set -> set -> set, forall R R':set -> set -> prop, forall P P':set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, h x y = h' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_b_b_r_p X f g h R P = pack_b_b_b_r_p X f' g' h' R' P'.
let X f f' g g' h h' R R' P P'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_p X P) = (X,encode_b X f',encode_b X g',encode_b X h',encode_r X R',encode_p X P').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_b X h = encode_b X h'.
{ apply encode_b_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_b_r_p_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_b_r_p X f g h R P -> X = S 0.
let S X f g h R P. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_p X P) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_b_r_p_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_b_r_p X f g h R P -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g h R P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_p X P) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_p_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_b_r_p X f g h R P -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g h R P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_p X P) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_p_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_b_r_p X f g h R P -> forall x y :e X, h x y = decode_b (S 3) x y.
let S X f g h R P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove h x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_p X P) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym set. exact decode_encode_b X h x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_p_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_b_r_p X f g h R P -> forall x y :e X, R x y = decode_r (S 4) x y.
let S X f g h R P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_p X P) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_p_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_b_r_p X f g h R P -> forall x :e X, P x = decode_p (S 5) x.
let S X f g h R P. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,encode_p X P) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem pack_struct_b_b_b_r_p: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x y :e X, h x y :e X) -> struct_b_b_b_r_p (pack_b_b_b_r_p X f g h R P).
let X f g h R P.
assume H1.
assume H2.
assume H3.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists h':set -> set -> set, exists R':set -> set -> prop, exists P':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x y :e X', h' x y :e X') /\ pack_b_b_b_r_p X f g h R P = pack_b_b_b_r_p X' f' g' h' R' P'.
witness X. witness f. witness g. witness h. witness R. witness P.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
apply eqI set.
Qed.

Theorem struct_b_b_b_r_p_eta: forall S, struct_b_b_b_r_p S -> S = pack_b_b_b_r_p (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_r (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let h.
assume H4. apply H4. let R.
assume H5. apply H5. let P.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_b_r_p_0_eq S X f g h R P Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_b X (decode_b (S 3)),encode_r X (decode_r (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_b_r_p_1_eq S X f g h R P Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_b_r_p_2_eq S X f g h R P Heq.
}
rewrite <- L2.
claim L3: encode_b X h = encode_b X (decode_b (S 3)).
{ apply encode_b_ext.
  exact struct_b_b_b_r_p_3_eq S X f g h R P Heq.
}
rewrite <- L3.
claim L4: encode_r X R = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_b_r_p_4_eq S X f g h R P Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L4.
claim L5: encode_p X P = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_b_r_p_5_eq S X f g h R P Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_b_r_p.

Variable A:SType.

Definition unpack_b_b_b_r_p : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_r (S 4)) (decode_p (S 5)).

Theorem unpack_b_b_b_r_p_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall h h':set -> set -> set, (forall x y :e X, h x y = h' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> Phi X f g h R P = Phi X f' g' h' R' P')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, unpack_b_b_b_r_p (pack_b_b_b_r_p X f g h R P) Phi = Phi X f g h R P.
let Phi.
assume HPhi.
let X f g h R P.
prove Phi (pack_b_b_b_r_p X f g h R P 0) (decode_b (pack_b_b_b_r_p X f g h R P 1)) (decode_b (pack_b_b_b_r_p X f g h R P 2)) (decode_b (pack_b_b_b_r_p X f g h R P 3)) (decode_r (pack_b_b_b_r_p X f g h R P 4)) (decode_p (pack_b_b_b_r_p X f g h R P 5)) = Phi X f g h R P.
rewrite <- struct_b_b_b_r_p_0_eq (pack_b_b_b_r_p X f g h R P) X f g h R P (eqI set (pack_b_b_b_r_p X f g h R P)).
prove Phi X (decode_b (pack_b_b_b_r_p X f g h R P 1)) (decode_b (pack_b_b_b_r_p X f g h R P 2)) (decode_b (pack_b_b_b_r_p X f g h R P 3)) (decode_r (pack_b_b_b_r_p X f g h R P 4)) (decode_p (pack_b_b_b_r_p X f g h R P 5)) = Phi X f g h R P.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_r_p X f g h R P 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_b_r_p_1_eq (pack_b_b_b_r_p X f g h R P) X f g h R P (eqI set (pack_b_b_b_r_p X f g h R P)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_r_p X f g h R P 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_b_r_p_2_eq (pack_b_b_b_r_p X f g h R P) X f g h R P (eqI set (pack_b_b_b_r_p X f g h R P)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_r_p X f g h R P 3) x y = h x y.
  apply eq_sym set.
  exact struct_b_b_b_r_p_3_eq (pack_b_b_b_r_p X f g h R P) X f g h R P (eqI set (pack_b_b_b_r_p X f g h R P)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_b_r_p X f g h R P 4) x y <-> R x y.
  rewrite <- struct_b_b_b_r_p_4_eq (pack_b_b_b_r_p X f g h R P) X f g h R P (eqI set (pack_b_b_b_r_p X f g h R P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_b_b_r_p X f g h R P 5) x <-> P x.
  rewrite <- struct_b_b_b_r_p_5_eq (pack_b_b_b_r_p X f g h R P) X f g h R P (eqI set (pack_b_b_b_r_p X f g h R P)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_b_r_p.

Definition pack_b_b_b_r_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> set -> set := fun X f g h R c => (X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,c).

Definition struct_b_b_b_r_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists h:set -> set -> set, exists R:set -> set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x y :e X, h x y :e X) /\ c :e X /\ S = pack_b_b_b_r_e X f g h R c.

Theorem pack_b_b_b_r_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall h h':set -> set -> set, forall R R':set -> set -> prop, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, h x y = h' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 pack_b_b_b_r_e X f g h R c = pack_b_b_b_r_e X f' g' h' R' c.
let X f f' g g' h h' R R' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,c) = (X,encode_b X f',encode_b X g',encode_b X h',encode_r X R',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_b X h = encode_b X h'.
{ apply encode_b_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_b_b_r_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_b_r_e X f g h R c -> X = S 0.
let S X f g h R c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_b_r_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_b_r_e X f g h R c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g h R c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_b_r_e X f g h R c -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g h R c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_b_r_e X f g h R c -> forall x y :e X, h x y = decode_b (S 3) x y.
let S X f g h R c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove h x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym set. exact decode_encode_b X h x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_b_r_e X f g h R c -> forall x y :e X, R x y = decode_r (S 4) x y.
let S X f g h R c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,c) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_b_b_r_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_b_r_e X f g h R c -> c = S 5.
let S X f g h R c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_b X h,encode_r X R,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_b_r_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x y :e X, h x y :e X) -> c :e X -> struct_b_b_b_r_e (pack_b_b_b_r_e X f g h R c).
let X f g h R c.
assume H1.
assume H2.
assume H3.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists h':set -> set -> set, exists R':set -> set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x y :e X', h' x y :e X') /\ c' :e X' /\ pack_b_b_b_r_e X f g h R c = pack_b_b_b_r_e X' f' g' h' R' c'.
witness X. witness f. witness g. witness h. witness R. witness c.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_b_r_e_eta: forall S, struct_b_b_b_r_e S -> S = pack_b_b_b_r_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_r (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let h.
assume H4. apply H4. let R.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_b_r_e_0_eq S X f g h R c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_b X (decode_b (S 3)),encode_r X (decode_r (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_b_r_e_1_eq S X f g h R c Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_b_r_e_2_eq S X f g h R c Heq.
}
rewrite <- L2.
claim L3: encode_b X h = encode_b X (decode_b (S 3)).
{ apply encode_b_ext.
  exact struct_b_b_b_r_e_3_eq S X f g h R c Heq.
}
rewrite <- L3.
claim L4: encode_r X R = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_b_r_e_4_eq S X f g h R c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_b_b_r_e_5_eq S X f g h R c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_b_r_e.

Variable A:SType.

Definition unpack_b_b_b_r_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_r (S 4)) (S 5).

Theorem unpack_b_b_b_r_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall h h':set -> set -> set, (forall x y :e X, h x y = h' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall c,Phi X f g h R c = Phi X f' g' h' R' c)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall R:set -> set -> prop, forall c:set, unpack_b_b_b_r_e (pack_b_b_b_r_e X f g h R c) Phi = Phi X f g h R c.
let Phi.
assume HPhi.
let X f g h R c.
prove Phi (pack_b_b_b_r_e X f g h R c 0) (decode_b (pack_b_b_b_r_e X f g h R c 1)) (decode_b (pack_b_b_b_r_e X f g h R c 2)) (decode_b (pack_b_b_b_r_e X f g h R c 3)) (decode_r (pack_b_b_b_r_e X f g h R c 4)) (pack_b_b_b_r_e X f g h R c 5) = Phi X f g h R c.
rewrite <- struct_b_b_b_r_e_0_eq (pack_b_b_b_r_e X f g h R c) X f g h R c (eqI set (pack_b_b_b_r_e X f g h R c)).
prove Phi X (decode_b (pack_b_b_b_r_e X f g h R c 1)) (decode_b (pack_b_b_b_r_e X f g h R c 2)) (decode_b (pack_b_b_b_r_e X f g h R c 3)) (decode_r (pack_b_b_b_r_e X f g h R c 4)) (pack_b_b_b_r_e X f g h R c 5) = Phi X f g h R c.
rewrite <- struct_b_b_b_r_e_5_eq (pack_b_b_b_r_e X f g h R c) X f g h R c (eqI set (pack_b_b_b_r_e X f g h R c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_r_e X f g h R c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_b_r_e_1_eq (pack_b_b_b_r_e X f g h R c) X f g h R c (eqI set (pack_b_b_b_r_e X f g h R c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_r_e X f g h R c 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_b_r_e_2_eq (pack_b_b_b_r_e X f g h R c) X f g h R c (eqI set (pack_b_b_b_r_e X f g h R c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_r_e X f g h R c 3) x y = h x y.
  apply eq_sym set.
  exact struct_b_b_b_r_e_3_eq (pack_b_b_b_r_e X f g h R c) X f g h R c (eqI set (pack_b_b_b_r_e X f g h R c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_b_r_e X f g h R c 4) x y <-> R x y.
  rewrite <- struct_b_b_b_r_e_4_eq (pack_b_b_b_r_e X f g h R c) X f g h R c (eqI set (pack_b_b_b_r_e X f g h R c)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_b_b_b_r_e.

Definition pack_b_b_b_p_p : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> (set -> prop) -> set := fun X f g h P Q => (X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,encode_p X Q).

Definition struct_b_b_b_p_p : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists h:set -> set -> set, exists P:set -> prop, exists Q:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x y :e X, h x y :e X) /\ S = pack_b_b_b_p_p X f g h P Q.

Theorem pack_b_b_b_p_p_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall h h':set -> set -> set, forall P P':set -> prop, forall Q Q':set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, h x y = h' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_b_b_b_p_p X f g h P Q = pack_b_b_b_p_p X f' g' h' P' Q'.
let X f f' g g' h h' P P' Q Q'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,encode_p X Q) = (X,encode_b X f',encode_b X g',encode_b X h',encode_p X P',encode_p X Q').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_b X h = encode_b X h'.
{ apply encode_b_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_b_p_p_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_b_p_p X f g h P Q -> X = S 0.
let S X f g h P Q. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,encode_p X Q) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_b_p_p_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_b_p_p X f g h P Q -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g h P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,encode_p X Q) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_b_p_p_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_b_p_p X f g h P Q -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g h P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,encode_p X Q) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_b_p_p_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_b_p_p X f g h P Q -> forall x y :e X, h x y = decode_b (S 3) x y.
let S X f g h P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove h x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,encode_p X Q) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym set. exact decode_encode_b X h x Hx y Hy.
Qed.

Theorem struct_b_b_b_p_p_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_b_p_p X f g h P Q -> forall x :e X, P x = decode_p (S 4) x.
let S X f g h P Q. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,encode_p X Q) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_b_b_p_p_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_b_p_p X f g h P Q -> forall x :e X, Q x = decode_p (S 5) x.
let S X f g h P Q. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,encode_p X Q) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem pack_struct_b_b_b_p_p: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x y :e X, h x y :e X) -> struct_b_b_b_p_p (pack_b_b_b_p_p X f g h P Q).
let X f g h P Q.
assume H1.
assume H2.
assume H3.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists h':set -> set -> set, exists P':set -> prop, exists Q':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x y :e X', h' x y :e X') /\ pack_b_b_b_p_p X f g h P Q = pack_b_b_b_p_p X' f' g' h' P' Q'.
witness X. witness f. witness g. witness h. witness P. witness Q.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
apply eqI set.
Qed.

Theorem struct_b_b_b_p_p_eta: forall S, struct_b_b_b_p_p S -> S = pack_b_b_b_p_p (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_p (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let h.
assume H4. apply H4. let P.
assume H5. apply H5. let Q.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_b_p_p_0_eq S X f g h P Q Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_b X (decode_b (S 3)),encode_p X (decode_p (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_b_p_p_1_eq S X f g h P Q Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_b_p_p_2_eq S X f g h P Q Heq.
}
rewrite <- L2.
claim L3: encode_b X h = encode_b X (decode_b (S 3)).
{ apply encode_b_ext.
  exact struct_b_b_b_p_p_3_eq S X f g h P Q Heq.
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_b_p_p_4_eq S X f g h P Q Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: encode_p X Q = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_b_p_p_5_eq S X f g h P Q Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_b_p_p.

Variable A:SType.

Definition unpack_b_b_b_p_p : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_p (S 4)) (decode_p (S 5)).

Theorem unpack_b_b_b_p_p_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> (set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall h h':set -> set -> set, (forall x y :e X, h x y = h' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) -> Phi X f g h P Q = Phi X f' g' h' P' Q')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, unpack_b_b_b_p_p (pack_b_b_b_p_p X f g h P Q) Phi = Phi X f g h P Q.
let Phi.
assume HPhi.
let X f g h P Q.
prove Phi (pack_b_b_b_p_p X f g h P Q 0) (decode_b (pack_b_b_b_p_p X f g h P Q 1)) (decode_b (pack_b_b_b_p_p X f g h P Q 2)) (decode_b (pack_b_b_b_p_p X f g h P Q 3)) (decode_p (pack_b_b_b_p_p X f g h P Q 4)) (decode_p (pack_b_b_b_p_p X f g h P Q 5)) = Phi X f g h P Q.
rewrite <- struct_b_b_b_p_p_0_eq (pack_b_b_b_p_p X f g h P Q) X f g h P Q (eqI set (pack_b_b_b_p_p X f g h P Q)).
prove Phi X (decode_b (pack_b_b_b_p_p X f g h P Q 1)) (decode_b (pack_b_b_b_p_p X f g h P Q 2)) (decode_b (pack_b_b_b_p_p X f g h P Q 3)) (decode_p (pack_b_b_b_p_p X f g h P Q 4)) (decode_p (pack_b_b_b_p_p X f g h P Q 5)) = Phi X f g h P Q.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_p_p X f g h P Q 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_b_p_p_1_eq (pack_b_b_b_p_p X f g h P Q) X f g h P Q (eqI set (pack_b_b_b_p_p X f g h P Q)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_p_p X f g h P Q 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_b_p_p_2_eq (pack_b_b_b_p_p X f g h P Q) X f g h P Q (eqI set (pack_b_b_b_p_p X f g h P Q)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_p_p X f g h P Q 3) x y = h x y.
  apply eq_sym set.
  exact struct_b_b_b_p_p_3_eq (pack_b_b_b_p_p X f g h P Q) X f g h P Q (eqI set (pack_b_b_b_p_p X f g h P Q)) x Hx y Hy.
- let x. assume Hx.
  prove decode_p (pack_b_b_b_p_p X f g h P Q 4) x <-> P x.
  rewrite <- struct_b_b_b_p_p_4_eq (pack_b_b_b_p_p X f g h P Q) X f g h P Q (eqI set (pack_b_b_b_p_p X f g h P Q)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_b_b_p_p X f g h P Q 5) x <-> Q x.
  rewrite <- struct_b_b_b_p_p_5_eq (pack_b_b_b_p_p X f g h P Q) X f g h P Q (eqI set (pack_b_b_b_p_p X f g h P Q)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_b_p_p.

Definition pack_b_b_b_p_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> set -> set := fun X f g h P c => (X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,c).

Definition struct_b_b_b_p_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists h:set -> set -> set, exists P:set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x y :e X, h x y :e X) /\ c :e X /\ S = pack_b_b_b_p_e X f g h P c.

Theorem pack_b_b_b_p_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall h h':set -> set -> set, forall P P':set -> prop, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, h x y = h' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_b_b_p_e X f g h P c = pack_b_b_b_p_e X f' g' h' P' c.
let X f f' g g' h h' P P' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,c) = (X,encode_b X f',encode_b X g',encode_b X h',encode_p X P',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_b X h = encode_b X h'.
{ apply encode_b_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_b_b_p_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_b_p_e X f g h P c -> X = S 0.
let S X f g h P c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_b_p_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_b_p_e X f g h P c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g h P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_b_p_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_b_p_e X f g h P c -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g h P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_b_p_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_b_p_e X f g h P c -> forall x y :e X, h x y = decode_b (S 3) x y.
let S X f g h P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove h x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym set. exact decode_encode_b X h x Hx y Hy.
Qed.

Theorem struct_b_b_b_p_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_b_p_e X f g h P c -> forall x :e X, P x = decode_p (S 4) x.
let S X f g h P c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_b_b_p_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_b_p_e X f g h P c -> c = S 5.
let S X f g h P c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_b X h,encode_p X P,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_b_p_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x y :e X, h x y :e X) -> c :e X -> struct_b_b_b_p_e (pack_b_b_b_p_e X f g h P c).
let X f g h P c.
assume H1.
assume H2.
assume H3.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists h':set -> set -> set, exists P':set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x y :e X', h' x y :e X') /\ c' :e X' /\ pack_b_b_b_p_e X f g h P c = pack_b_b_b_p_e X' f' g' h' P' c'.
witness X. witness f. witness g. witness h. witness P. witness c.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_b_p_e_eta: forall S, struct_b_b_b_p_e S -> S = pack_b_b_b_p_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let h.
assume H4. apply H4. let P.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_b_p_e_0_eq S X f g h P c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_b X (decode_b (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_b_p_e_1_eq S X f g h P c Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_b_p_e_2_eq S X f g h P c Heq.
}
rewrite <- L2.
claim L3: encode_b X h = encode_b X (decode_b (S 3)).
{ apply encode_b_ext.
  exact struct_b_b_b_p_e_3_eq S X f g h P c Heq.
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_b_p_e_4_eq S X f g h P c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_b_b_p_e_5_eq S X f g h P c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_b_p_e.

Variable A:SType.

Definition unpack_b_b_b_p_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_b_b_b_p_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall h h':set -> set -> set, (forall x y :e X, h x y = h' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c,Phi X f g h P c = Phi X f' g' h' P' c)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall P:set -> prop, forall c:set, unpack_b_b_b_p_e (pack_b_b_b_p_e X f g h P c) Phi = Phi X f g h P c.
let Phi.
assume HPhi.
let X f g h P c.
prove Phi (pack_b_b_b_p_e X f g h P c 0) (decode_b (pack_b_b_b_p_e X f g h P c 1)) (decode_b (pack_b_b_b_p_e X f g h P c 2)) (decode_b (pack_b_b_b_p_e X f g h P c 3)) (decode_p (pack_b_b_b_p_e X f g h P c 4)) (pack_b_b_b_p_e X f g h P c 5) = Phi X f g h P c.
rewrite <- struct_b_b_b_p_e_0_eq (pack_b_b_b_p_e X f g h P c) X f g h P c (eqI set (pack_b_b_b_p_e X f g h P c)).
prove Phi X (decode_b (pack_b_b_b_p_e X f g h P c 1)) (decode_b (pack_b_b_b_p_e X f g h P c 2)) (decode_b (pack_b_b_b_p_e X f g h P c 3)) (decode_p (pack_b_b_b_p_e X f g h P c 4)) (pack_b_b_b_p_e X f g h P c 5) = Phi X f g h P c.
rewrite <- struct_b_b_b_p_e_5_eq (pack_b_b_b_p_e X f g h P c) X f g h P c (eqI set (pack_b_b_b_p_e X f g h P c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_p_e X f g h P c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_b_p_e_1_eq (pack_b_b_b_p_e X f g h P c) X f g h P c (eqI set (pack_b_b_b_p_e X f g h P c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_p_e X f g h P c 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_b_p_e_2_eq (pack_b_b_b_p_e X f g h P c) X f g h P c (eqI set (pack_b_b_b_p_e X f g h P c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_p_e X f g h P c 3) x y = h x y.
  apply eq_sym set.
  exact struct_b_b_b_p_e_3_eq (pack_b_b_b_p_e X f g h P c) X f g h P c (eqI set (pack_b_b_b_p_e X f g h P c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_p (pack_b_b_b_p_e X f g h P c 4) x <-> P x.
  rewrite <- struct_b_b_b_p_e_4_eq (pack_b_b_b_p_e X f g h P c) X f g h P c (eqI set (pack_b_b_b_p_e X f g h P c)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_b_p_e.

Definition pack_b_b_b_e_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> set -> set -> set := fun X f g h c d => (X,encode_b X f,encode_b X g,encode_b X h,c,d).

Definition struct_b_b_b_e_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists h:set -> set -> set, exists c:set, exists d:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x y :e X, h x y :e X) /\ c :e X /\ d :e X /\ S = pack_b_b_b_e_e X f g h c d.

Theorem pack_b_b_b_e_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall h h':set -> set -> set, forall c, forall d,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, h x y = h' x y) ->
 pack_b_b_b_e_e X f g h c d = pack_b_b_b_e_e X f' g' h' c d.
let X f f' g g' h h' c d. assume H1. assume H2. assume H3.
prove (X,encode_b X f,encode_b X g,encode_b X h,c,d) = (X,encode_b X f',encode_b X g',encode_b X h',c,d).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_b X h = encode_b X h'.
{ apply encode_b_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_b_b_b_e_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall c:set, forall d:set, S = pack_b_b_b_e_e X f g h c d -> X = S 0.
let S X f g h c d. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_b X h,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_b_e_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall c:set, forall d:set, S = pack_b_b_b_e_e X f g h c d -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g h c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,c,d) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_b_e_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall c:set, forall d:set, S = pack_b_b_b_e_e X f g h c d -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g h c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,c,d) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_b_e_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall c:set, forall d:set, S = pack_b_b_b_e_e X f g h c d -> forall x y :e X, h x y = decode_b (S 3) x y.
let S X f g h c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove h x y = decode_b ((X,encode_b X f,encode_b X g,encode_b X h,c,d) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym set. exact decode_encode_b X h x Hx y Hy.
Qed.

Theorem struct_b_b_b_e_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall c:set, forall d:set, S = pack_b_b_b_e_e X f g h c d -> c = S 4.
let S X f g h c d. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_b X h,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_b_b_b_e_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall c:set, forall d:set, S = pack_b_b_b_e_e X f g h c d -> d = S 5.
let S X f g h c d. assume H1.
rewrite H1. prove d = (X,encode_b X f,encode_b X g,encode_b X h,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_b_e_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall c:set, forall d:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x y :e X, h x y :e X) -> c :e X -> d :e X -> struct_b_b_b_e_e (pack_b_b_b_e_e X f g h c d).
let X f g h c d.
assume H1.
assume H2.
assume H3.
assume H4.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists h':set -> set -> set, exists c':set, exists d':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x y :e X', h' x y :e X') /\ c' :e X' /\ d' :e X' /\ pack_b_b_b_e_e X f g h c d = pack_b_b_b_e_e X' f' g' h' c' d'.
witness X. witness f. witness g. witness h. witness c. witness d.
apply andI.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_b_e_e_eta: forall S, struct_b_b_b_e_e S -> S = pack_b_b_b_e_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let h.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_b_e_e_0_eq S X f g h c d Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_b X (decode_b (S 3)),S 4,S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_b_e_e_1_eq S X f g h c d Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_b_e_e_2_eq S X f g h c d Heq.
}
rewrite <- L2.
claim L3: encode_b X h = encode_b X (decode_b (S 3)).
{ apply encode_b_ext.
  exact struct_b_b_b_e_e_3_eq S X f g h c d Heq.
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_b_b_b_e_e_4_eq S X f g h c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_b_b_b_e_e_5_eq S X f g h c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_b_e_e.

Variable A:SType.

Definition unpack_b_b_b_e_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_b (S 3)) (S 4) (S 5).

Theorem unpack_b_b_b_e_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> set) -> set -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall h h':set -> set -> set, (forall x y :e X, h x y = h' x y) ->  forall c, forall d,Phi X f g h c d = Phi X f' g' h' c d)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall h:set -> set -> set, forall c:set, forall d:set, unpack_b_b_b_e_e (pack_b_b_b_e_e X f g h c d) Phi = Phi X f g h c d.
let Phi.
assume HPhi.
let X f g h c d.
prove Phi (pack_b_b_b_e_e X f g h c d 0) (decode_b (pack_b_b_b_e_e X f g h c d 1)) (decode_b (pack_b_b_b_e_e X f g h c d 2)) (decode_b (pack_b_b_b_e_e X f g h c d 3)) (pack_b_b_b_e_e X f g h c d 4) (pack_b_b_b_e_e X f g h c d 5) = Phi X f g h c d.
rewrite <- struct_b_b_b_e_e_0_eq (pack_b_b_b_e_e X f g h c d) X f g h c d (eqI set (pack_b_b_b_e_e X f g h c d)).
prove Phi X (decode_b (pack_b_b_b_e_e X f g h c d 1)) (decode_b (pack_b_b_b_e_e X f g h c d 2)) (decode_b (pack_b_b_b_e_e X f g h c d 3)) (pack_b_b_b_e_e X f g h c d 4) (pack_b_b_b_e_e X f g h c d 5) = Phi X f g h c d.
rewrite <- struct_b_b_b_e_e_4_eq (pack_b_b_b_e_e X f g h c d) X f g h c d (eqI set (pack_b_b_b_e_e X f g h c d)).
rewrite <- struct_b_b_b_e_e_5_eq (pack_b_b_b_e_e X f g h c d) X f g h c d (eqI set (pack_b_b_b_e_e X f g h c d)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_e_e X f g h c d 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_b_e_e_1_eq (pack_b_b_b_e_e X f g h c d) X f g h c d (eqI set (pack_b_b_b_e_e X f g h c d)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_e_e X f g h c d 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_b_e_e_2_eq (pack_b_b_b_e_e X f g h c d) X f g h c d (eqI set (pack_b_b_b_e_e X f g h c d)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_b_e_e X f g h c d 3) x y = h x y.
  apply eq_sym set.
  exact struct_b_b_b_e_e_3_eq (pack_b_b_b_e_e X f g h c d) X f g h c d (eqI set (pack_b_b_b_e_e X f g h c d)) x Hx y Hy.
Qed.

End unpack_b_b_b_e_e.

Definition pack_b_b_u_u_r : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> set := fun X f g i j R => (X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_r X R).

Definition struct_b_b_u_u_r : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists i:set -> set, exists j:set -> set, exists R:set -> set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ S = pack_b_b_u_u_r X f g i j R.

Theorem pack_b_b_u_u_r_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall i i':set -> set, forall j j':set -> set, forall R R':set -> set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 pack_b_b_u_u_r X f g i j R = pack_b_b_u_u_r X f' g' i' j' R'.
let X f f' g g' i i' j j' R R'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_r X R) = (X,encode_b X f',encode_b X g',encode_u X i',encode_u X j',encode_r X R').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H4. }
rewrite <- L4.
claim L5: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_u_u_r_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_b_b_u_u_r X f g i j R -> X = S 0.
let S X f g i j R. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_r X R) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_u_u_r_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_b_b_u_u_r X f g i j R -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g i j R. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_r X R) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_u_u_r_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_b_b_u_u_r X f g i j R -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g i j R. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_r X R) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_u_u_r_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_b_b_u_u_r X f g i j R -> forall x :e X, i x = decode_u (S 3) x.
let S X f g i j R. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_r X R) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_u_u_r_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_b_b_u_u_r X f g i j R -> forall x :e X, j x = decode_u (S 4) x.
let S X f g i j R. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_r X R) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_b_b_u_u_r_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, S = pack_b_b_u_u_r X f g i j R -> forall x y :e X, R x y = decode_r (S 5) x y.
let S X f g i j R. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_r X R) 5) x y.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem pack_struct_b_b_u_u_r: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> struct_b_b_u_u_r (pack_b_b_u_u_r X f g i j R).
let X f g i j R.
assume H1.
assume H2.
assume H3.
assume H4.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists i':set -> set, exists j':set -> set, exists R':set -> set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ pack_b_b_u_u_r X f g i j R = pack_b_b_u_u_r X' f' g' i' j' R'.
witness X. witness f. witness g. witness i. witness j. witness R.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H4.
apply eqI set.
Qed.

Theorem struct_b_b_u_u_r_eta: forall S, struct_b_b_u_u_r S -> S = pack_b_b_u_u_r (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (decode_r (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let i.
assume H4. apply H4. let j.
assume H5. apply H5. let R.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_u_u_r_0_eq S X f g i j R Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_u X (decode_u (S 4)),encode_r X (decode_r (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_u_u_r_1_eq S X f g i j R Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_u_u_r_2_eq S X f g i j R Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_b_b_u_u_r_3_eq S X f g i j R Heq.
}
rewrite <- L3.
claim L4: encode_u X j = encode_u X (decode_u (S 4)).
{ apply encode_u_ext.
  exact struct_b_b_u_u_r_4_eq S X f g i j R Heq.
}
rewrite <- L4.
claim L5: encode_r X R = encode_r X (decode_r (S 5)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_u_u_r_5_eq S X f g i j R Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_u_u_r.

Variable A:SType.

Definition unpack_b_b_u_u_r : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (decode_r (S 5)).

Theorem unpack_b_b_u_u_r_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) -> Phi X f g i j R = Phi X f' g' i' j' R')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, unpack_b_b_u_u_r (pack_b_b_u_u_r X f g i j R) Phi = Phi X f g i j R.
let Phi.
assume HPhi.
let X f g i j R.
prove Phi (pack_b_b_u_u_r X f g i j R 0) (decode_b (pack_b_b_u_u_r X f g i j R 1)) (decode_b (pack_b_b_u_u_r X f g i j R 2)) (decode_u (pack_b_b_u_u_r X f g i j R 3)) (decode_u (pack_b_b_u_u_r X f g i j R 4)) (decode_r (pack_b_b_u_u_r X f g i j R 5)) = Phi X f g i j R.
rewrite <- struct_b_b_u_u_r_0_eq (pack_b_b_u_u_r X f g i j R) X f g i j R (eqI set (pack_b_b_u_u_r X f g i j R)).
prove Phi X (decode_b (pack_b_b_u_u_r X f g i j R 1)) (decode_b (pack_b_b_u_u_r X f g i j R 2)) (decode_u (pack_b_b_u_u_r X f g i j R 3)) (decode_u (pack_b_b_u_u_r X f g i j R 4)) (decode_r (pack_b_b_u_u_r X f g i j R 5)) = Phi X f g i j R.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_u_r X f g i j R 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_u_u_r_1_eq (pack_b_b_u_u_r X f g i j R) X f g i j R (eqI set (pack_b_b_u_u_r X f g i j R)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_u_r X f g i j R 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_u_u_r_2_eq (pack_b_b_u_u_r X f g i j R) X f g i j R (eqI set (pack_b_b_u_u_r X f g i j R)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_u_r X f g i j R 3) x = i x.
  apply eq_sym set.
  exact struct_b_b_u_u_r_3_eq (pack_b_b_u_u_r X f g i j R) X f g i j R (eqI set (pack_b_b_u_u_r X f g i j R)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_u_r X f g i j R 4) x = j x.
  apply eq_sym set.
  exact struct_b_b_u_u_r_4_eq (pack_b_b_u_u_r X f g i j R) X f g i j R (eqI set (pack_b_b_u_u_r X f g i j R)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_u_u_r X f g i j R 5) x y <-> R x y.
  rewrite <- struct_b_b_u_u_r_5_eq (pack_b_b_u_u_r X f g i j R) X f g i j R (eqI set (pack_b_b_u_u_r X f g i j R)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_b_b_u_u_r.

Definition pack_b_b_u_u_p : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> prop) -> set := fun X f g i j P => (X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_p X P).

Definition struct_b_b_u_u_p : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists i:set -> set, exists j:set -> set, exists P:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ S = pack_b_b_u_u_p X f g i j P.

Theorem pack_b_b_u_u_p_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall i i':set -> set, forall j j':set -> set, forall P P':set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_b_u_u_p X f g i j P = pack_b_b_u_u_p X f' g' i' j' P'.
let X f f' g g' i i' j j' P P'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_p X P) = (X,encode_b X f',encode_b X g',encode_u X i',encode_u X j',encode_p X P').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_u_u_p_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_b_b_u_u_p X f g i j P -> X = S 0.
let S X f g i j P. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_p X P) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_u_u_p_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_b_b_u_u_p X f g i j P -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g i j P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_p X P) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_u_u_p_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_b_b_u_u_p X f g i j P -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g i j P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_p X P) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_u_u_p_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_b_b_u_u_p X f g i j P -> forall x :e X, i x = decode_u (S 3) x.
let S X f g i j P. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_p X P) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_u_u_p_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_b_b_u_u_p X f g i j P -> forall x :e X, j x = decode_u (S 4) x.
let S X f g i j P. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_p X P) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_b_b_u_u_p_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, S = pack_b_b_u_u_p X f g i j P -> forall x :e X, P x = decode_p (S 5) x.
let S X f g i j P. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,encode_p X P) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem pack_struct_b_b_u_u_p: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> struct_b_b_u_u_p (pack_b_b_u_u_p X f g i j P).
let X f g i j P.
assume H1.
assume H2.
assume H3.
assume H4.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists i':set -> set, exists j':set -> set, exists P':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ pack_b_b_u_u_p X f g i j P = pack_b_b_u_u_p X' f' g' i' j' P'.
witness X. witness f. witness g. witness i. witness j. witness P.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H4.
apply eqI set.
Qed.

Theorem struct_b_b_u_u_p_eta: forall S, struct_b_b_u_u_p S -> S = pack_b_b_u_u_p (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let i.
assume H4. apply H4. let j.
assume H5. apply H5. let P.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_u_u_p_0_eq S X f g i j P Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_u X (decode_u (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_u_u_p_1_eq S X f g i j P Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_u_u_p_2_eq S X f g i j P Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_b_b_u_u_p_3_eq S X f g i j P Heq.
}
rewrite <- L3.
claim L4: encode_u X j = encode_u X (decode_u (S 4)).
{ apply encode_u_ext.
  exact struct_b_b_u_u_p_4_eq S X f g i j P Heq.
}
rewrite <- L4.
claim L5: encode_p X P = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_u_u_p_5_eq S X f g i j P Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_u_u_p.

Variable A:SType.

Definition unpack_b_b_u_u_p : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (decode_p (S 5)).

Theorem unpack_b_b_u_u_p_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> (set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> Phi X f g i j P = Phi X f' g' i' j' P')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall P:set -> prop, unpack_b_b_u_u_p (pack_b_b_u_u_p X f g i j P) Phi = Phi X f g i j P.
let Phi.
assume HPhi.
let X f g i j P.
prove Phi (pack_b_b_u_u_p X f g i j P 0) (decode_b (pack_b_b_u_u_p X f g i j P 1)) (decode_b (pack_b_b_u_u_p X f g i j P 2)) (decode_u (pack_b_b_u_u_p X f g i j P 3)) (decode_u (pack_b_b_u_u_p X f g i j P 4)) (decode_p (pack_b_b_u_u_p X f g i j P 5)) = Phi X f g i j P.
rewrite <- struct_b_b_u_u_p_0_eq (pack_b_b_u_u_p X f g i j P) X f g i j P (eqI set (pack_b_b_u_u_p X f g i j P)).
prove Phi X (decode_b (pack_b_b_u_u_p X f g i j P 1)) (decode_b (pack_b_b_u_u_p X f g i j P 2)) (decode_u (pack_b_b_u_u_p X f g i j P 3)) (decode_u (pack_b_b_u_u_p X f g i j P 4)) (decode_p (pack_b_b_u_u_p X f g i j P 5)) = Phi X f g i j P.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_u_p X f g i j P 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_u_u_p_1_eq (pack_b_b_u_u_p X f g i j P) X f g i j P (eqI set (pack_b_b_u_u_p X f g i j P)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_u_p X f g i j P 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_u_u_p_2_eq (pack_b_b_u_u_p X f g i j P) X f g i j P (eqI set (pack_b_b_u_u_p X f g i j P)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_u_p X f g i j P 3) x = i x.
  apply eq_sym set.
  exact struct_b_b_u_u_p_3_eq (pack_b_b_u_u_p X f g i j P) X f g i j P (eqI set (pack_b_b_u_u_p X f g i j P)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_u_p X f g i j P 4) x = j x.
  apply eq_sym set.
  exact struct_b_b_u_u_p_4_eq (pack_b_b_u_u_p X f g i j P) X f g i j P (eqI set (pack_b_b_u_u_p X f g i j P)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_b_b_u_u_p X f g i j P 5) x <-> P x.
  rewrite <- struct_b_b_u_u_p_5_eq (pack_b_b_u_u_p X f g i j P) X f g i j P (eqI set (pack_b_b_u_u_p X f g i j P)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_u_u_p.

Definition pack_b_b_u_u_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> set -> set := fun X f g i j c => (X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,c).

Definition struct_b_b_u_u_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists i:set -> set, exists j:set -> set, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ c :e X /\ S = pack_b_b_u_u_e X f g i j c.

Theorem pack_b_b_u_u_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall i i':set -> set, forall j j':set -> set, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 pack_b_b_u_u_e X f g i j c = pack_b_b_u_u_e X f' g' i' j' c.
let X f f' g g' i i' j j' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,c) = (X,encode_b X f',encode_b X g',encode_u X i',encode_u X j',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_b_u_u_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_b_b_u_u_e X f g i j c -> X = S 0.
let S X f g i j c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_u_u_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_b_b_u_u_e X f g i j c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g i j c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_u_u_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_b_b_u_u_e X f g i j c -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g i j c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_u_u_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_b_b_u_u_e X f g i j c -> forall x :e X, i x = decode_u (S 3) x.
let S X f g i j c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_u_u_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_b_b_u_u_e X f g i j c -> forall x :e X, j x = decode_u (S 4) x.
let S X f g i j c. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_b_b_u_u_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, S = pack_b_b_u_u_e X f g i j c -> c = S 5.
let S X f g i j c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_u X i,encode_u X j,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_u_u_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> c :e X -> struct_b_b_u_u_e (pack_b_b_u_u_e X f g i j c).
let X f g i j c.
assume H1.
assume H2.
assume H3.
assume H4.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists i':set -> set, exists j':set -> set, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ c' :e X' /\ pack_b_b_u_u_e X f g i j c = pack_b_b_u_u_e X' f' g' i' j' c'.
witness X. witness f. witness g. witness i. witness j. witness c.
apply andI.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_u_u_e_eta: forall S, struct_b_b_u_u_e S -> S = pack_b_b_u_u_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let i.
assume H4. apply H4. let j.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_u_u_e_0_eq S X f g i j c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_u X (decode_u (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_u_u_e_1_eq S X f g i j c Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_u_u_e_2_eq S X f g i j c Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_b_b_u_u_e_3_eq S X f g i j c Heq.
}
rewrite <- L3.
claim L4: encode_u X j = encode_u X (decode_u (S 4)).
{ apply encode_u_ext.
  exact struct_b_b_u_u_e_4_eq S X f g i j c Heq.
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_b_u_u_e_5_eq S X f g i j c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_u_u_e.

Variable A:SType.

Definition unpack_b_b_u_u_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_u (S 4)) (S 5).

Theorem unpack_b_b_u_u_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall c,Phi X f g i j c = Phi X f' g' i' j' c)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall j:set -> set, forall c:set, unpack_b_b_u_u_e (pack_b_b_u_u_e X f g i j c) Phi = Phi X f g i j c.
let Phi.
assume HPhi.
let X f g i j c.
prove Phi (pack_b_b_u_u_e X f g i j c 0) (decode_b (pack_b_b_u_u_e X f g i j c 1)) (decode_b (pack_b_b_u_u_e X f g i j c 2)) (decode_u (pack_b_b_u_u_e X f g i j c 3)) (decode_u (pack_b_b_u_u_e X f g i j c 4)) (pack_b_b_u_u_e X f g i j c 5) = Phi X f g i j c.
rewrite <- struct_b_b_u_u_e_0_eq (pack_b_b_u_u_e X f g i j c) X f g i j c (eqI set (pack_b_b_u_u_e X f g i j c)).
prove Phi X (decode_b (pack_b_b_u_u_e X f g i j c 1)) (decode_b (pack_b_b_u_u_e X f g i j c 2)) (decode_u (pack_b_b_u_u_e X f g i j c 3)) (decode_u (pack_b_b_u_u_e X f g i j c 4)) (pack_b_b_u_u_e X f g i j c 5) = Phi X f g i j c.
rewrite <- struct_b_b_u_u_e_5_eq (pack_b_b_u_u_e X f g i j c) X f g i j c (eqI set (pack_b_b_u_u_e X f g i j c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_u_e X f g i j c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_u_u_e_1_eq (pack_b_b_u_u_e X f g i j c) X f g i j c (eqI set (pack_b_b_u_u_e X f g i j c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_u_e X f g i j c 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_u_u_e_2_eq (pack_b_b_u_u_e X f g i j c) X f g i j c (eqI set (pack_b_b_u_u_e X f g i j c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_u_e X f g i j c 3) x = i x.
  apply eq_sym set.
  exact struct_b_b_u_u_e_3_eq (pack_b_b_u_u_e X f g i j c) X f g i j c (eqI set (pack_b_b_u_u_e X f g i j c)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_u_e X f g i j c 4) x = j x.
  apply eq_sym set.
  exact struct_b_b_u_u_e_4_eq (pack_b_b_u_u_e X f g i j c) X f g i j c (eqI set (pack_b_b_u_u_e X f g i j c)) x Hx.
Qed.

End unpack_b_b_u_u_e.

Definition pack_b_b_u_r_r : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set := fun X f g i R T => (X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_r X T).

Definition struct_b_b_u_r_r : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x :e X, i x :e X) /\ S = pack_b_b_u_r_r X f g i R T.

Theorem pack_b_b_u_r_r_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 pack_b_b_u_r_r X f g i R T = pack_b_b_u_r_r X f' g' i' R' T'.
let X f f' g g' i i' R R' T T'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_r X T) = (X,encode_b X f',encode_b X g',encode_u X i',encode_r X R',encode_r X T').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
claim L5: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_u_r_r_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_u_r_r X f g i R T -> X = S 0.
let S X f g i R T. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_r X T) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_u_r_r_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_u_r_r X f g i R T -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g i R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_r X T) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_u_r_r_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_u_r_r X f g i R T -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g i R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_r X T) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_u_r_r_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_u_r_r X f g i R T -> forall x :e X, i x = decode_u (S 3) x.
let S X f g i R T. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_r X T) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_u_r_r_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_u_r_r X f g i R T -> forall x y :e X, R x y = decode_r (S 4) x y.
let S X f g i R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_r X T) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_b_u_r_r_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, S = pack_b_b_u_r_r X f g i R T -> forall x y :e X, T x y = decode_r (S 5) x y.
let S X f g i R T. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_r X T) 5) x y.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem pack_struct_b_b_u_r_r: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x :e X, i x :e X) -> struct_b_b_u_r_r (pack_b_b_u_r_r X f g i R T).
let X f g i R T.
assume H1.
assume H2.
assume H3.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x :e X', i' x :e X') /\ pack_b_b_u_r_r X f g i R T = pack_b_b_u_r_r X' f' g' i' R' T'.
witness X. witness f. witness g. witness i. witness R. witness T.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
apply eqI set.
Qed.

Theorem struct_b_b_u_r_r_eta: forall S, struct_b_b_u_r_r S -> S = pack_b_b_u_r_r (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (decode_r (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let i.
assume H4. apply H4. let R.
assume H5. apply H5. let T.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_u_r_r_0_eq S X f g i R T Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_r X (decode_r (S 4)),encode_r X (decode_r (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_u_r_r_1_eq S X f g i R T Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_u_r_r_2_eq S X f g i R T Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_b_b_u_r_r_3_eq S X f g i R T Heq.
}
rewrite <- L3.
claim L4: encode_r X R = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_u_r_r_4_eq S X f g i R T Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L4.
claim L5: encode_r X T = encode_r X (decode_r (S 5)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_u_r_r_5_eq S X f g i R T Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_u_r_r.

Variable A:SType.

Definition unpack_b_b_u_r_r : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (decode_r (S 5)).

Theorem unpack_b_b_u_r_r_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) -> Phi X f g i R T = Phi X f' g' i' R' T')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, unpack_b_b_u_r_r (pack_b_b_u_r_r X f g i R T) Phi = Phi X f g i R T.
let Phi.
assume HPhi.
let X f g i R T.
prove Phi (pack_b_b_u_r_r X f g i R T 0) (decode_b (pack_b_b_u_r_r X f g i R T 1)) (decode_b (pack_b_b_u_r_r X f g i R T 2)) (decode_u (pack_b_b_u_r_r X f g i R T 3)) (decode_r (pack_b_b_u_r_r X f g i R T 4)) (decode_r (pack_b_b_u_r_r X f g i R T 5)) = Phi X f g i R T.
rewrite <- struct_b_b_u_r_r_0_eq (pack_b_b_u_r_r X f g i R T) X f g i R T (eqI set (pack_b_b_u_r_r X f g i R T)).
prove Phi X (decode_b (pack_b_b_u_r_r X f g i R T 1)) (decode_b (pack_b_b_u_r_r X f g i R T 2)) (decode_u (pack_b_b_u_r_r X f g i R T 3)) (decode_r (pack_b_b_u_r_r X f g i R T 4)) (decode_r (pack_b_b_u_r_r X f g i R T 5)) = Phi X f g i R T.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_r_r X f g i R T 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_u_r_r_1_eq (pack_b_b_u_r_r X f g i R T) X f g i R T (eqI set (pack_b_b_u_r_r X f g i R T)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_r_r X f g i R T 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_u_r_r_2_eq (pack_b_b_u_r_r X f g i R T) X f g i R T (eqI set (pack_b_b_u_r_r X f g i R T)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_r_r X f g i R T 3) x = i x.
  apply eq_sym set.
  exact struct_b_b_u_r_r_3_eq (pack_b_b_u_r_r X f g i R T) X f g i R T (eqI set (pack_b_b_u_r_r X f g i R T)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_u_r_r X f g i R T 4) x y <-> R x y.
  rewrite <- struct_b_b_u_r_r_4_eq (pack_b_b_u_r_r X f g i R T) X f g i R T (eqI set (pack_b_b_u_r_r X f g i R T)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_u_r_r X f g i R T 5) x y <-> T x y.
  rewrite <- struct_b_b_u_r_r_5_eq (pack_b_b_u_r_r X f g i R T) X f g i R T (eqI set (pack_b_b_u_r_r X f g i R T)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_b_b_u_r_r.

Definition pack_b_b_u_r_p : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set := fun X f g i R P => (X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_p X P).

Definition struct_b_b_u_r_p : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, exists P:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x :e X, i x :e X) /\ S = pack_b_b_u_r_p X f g i R P.

Theorem pack_b_b_u_r_p_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop, forall P P':set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_b_u_r_p X f g i R P = pack_b_b_u_r_p X f' g' i' R' P'.
let X f f' g g' i i' R R' P P'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_p X P) = (X,encode_b X f',encode_b X g',encode_u X i',encode_r X R',encode_p X P').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_u_r_p_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_u_r_p X f g i R P -> X = S 0.
let S X f g i R P. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_p X P) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_u_r_p_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_u_r_p X f g i R P -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g i R P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_p X P) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_u_r_p_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_u_r_p X f g i R P -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g i R P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_p X P) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_u_r_p_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_u_r_p X f g i R P -> forall x :e X, i x = decode_u (S 3) x.
let S X f g i R P. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_p X P) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_u_r_p_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_u_r_p X f g i R P -> forall x y :e X, R x y = decode_r (S 4) x y.
let S X f g i R P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_p X P) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_b_u_r_p_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, S = pack_b_b_u_r_p X f g i R P -> forall x :e X, P x = decode_p (S 5) x.
let S X f g i R P. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,encode_p X P) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem pack_struct_b_b_u_r_p: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x :e X, i x :e X) -> struct_b_b_u_r_p (pack_b_b_u_r_p X f g i R P).
let X f g i R P.
assume H1.
assume H2.
assume H3.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop, exists P':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x :e X', i' x :e X') /\ pack_b_b_u_r_p X f g i R P = pack_b_b_u_r_p X' f' g' i' R' P'.
witness X. witness f. witness g. witness i. witness R. witness P.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
apply eqI set.
Qed.

Theorem struct_b_b_u_r_p_eta: forall S, struct_b_b_u_r_p S -> S = pack_b_b_u_r_p (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let i.
assume H4. apply H4. let R.
assume H5. apply H5. let P.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_u_r_p_0_eq S X f g i R P Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_r X (decode_r (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_u_r_p_1_eq S X f g i R P Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_u_r_p_2_eq S X f g i R P Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_b_b_u_r_p_3_eq S X f g i R P Heq.
}
rewrite <- L3.
claim L4: encode_r X R = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_u_r_p_4_eq S X f g i R P Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L4.
claim L5: encode_p X P = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_u_r_p_5_eq S X f g i R P Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_u_r_p.

Variable A:SType.

Definition unpack_b_b_u_r_p : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (decode_p (S 5)).

Theorem unpack_b_b_u_r_p_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> Phi X f g i R P = Phi X f' g' i' R' P')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, unpack_b_b_u_r_p (pack_b_b_u_r_p X f g i R P) Phi = Phi X f g i R P.
let Phi.
assume HPhi.
let X f g i R P.
prove Phi (pack_b_b_u_r_p X f g i R P 0) (decode_b (pack_b_b_u_r_p X f g i R P 1)) (decode_b (pack_b_b_u_r_p X f g i R P 2)) (decode_u (pack_b_b_u_r_p X f g i R P 3)) (decode_r (pack_b_b_u_r_p X f g i R P 4)) (decode_p (pack_b_b_u_r_p X f g i R P 5)) = Phi X f g i R P.
rewrite <- struct_b_b_u_r_p_0_eq (pack_b_b_u_r_p X f g i R P) X f g i R P (eqI set (pack_b_b_u_r_p X f g i R P)).
prove Phi X (decode_b (pack_b_b_u_r_p X f g i R P 1)) (decode_b (pack_b_b_u_r_p X f g i R P 2)) (decode_u (pack_b_b_u_r_p X f g i R P 3)) (decode_r (pack_b_b_u_r_p X f g i R P 4)) (decode_p (pack_b_b_u_r_p X f g i R P 5)) = Phi X f g i R P.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_r_p X f g i R P 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_u_r_p_1_eq (pack_b_b_u_r_p X f g i R P) X f g i R P (eqI set (pack_b_b_u_r_p X f g i R P)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_r_p X f g i R P 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_u_r_p_2_eq (pack_b_b_u_r_p X f g i R P) X f g i R P (eqI set (pack_b_b_u_r_p X f g i R P)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_r_p X f g i R P 3) x = i x.
  apply eq_sym set.
  exact struct_b_b_u_r_p_3_eq (pack_b_b_u_r_p X f g i R P) X f g i R P (eqI set (pack_b_b_u_r_p X f g i R P)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_u_r_p X f g i R P 4) x y <-> R x y.
  rewrite <- struct_b_b_u_r_p_4_eq (pack_b_b_u_r_p X f g i R P) X f g i R P (eqI set (pack_b_b_u_r_p X f g i R P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_b_u_r_p X f g i R P 5) x <-> P x.
  rewrite <- struct_b_b_u_r_p_5_eq (pack_b_b_u_r_p X f g i R P) X f g i R P (eqI set (pack_b_b_u_r_p X f g i R P)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_u_r_p.

Definition pack_b_b_u_r_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> set := fun X f g i R c => (X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,c).

Definition struct_b_b_u_r_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ S = pack_b_b_u_r_e X f g i R c.

Theorem pack_b_b_u_r_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 pack_b_b_u_r_e X f g i R c = pack_b_b_u_r_e X f' g' i' R' c.
let X f f' g g' i i' R R' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,c) = (X,encode_b X f',encode_b X g',encode_u X i',encode_r X R',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_b_u_r_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_u_r_e X f g i R c -> X = S 0.
let S X f g i R c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_u_r_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_u_r_e X f g i R c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g i R c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_u_r_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_u_r_e X f g i R c -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g i R c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_u_r_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_u_r_e X f g i R c -> forall x :e X, i x = decode_u (S 3) x.
let S X f g i R c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_u_r_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_u_r_e X f g i R c -> forall x y :e X, R x y = decode_r (S 4) x y.
let S X f g i R c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,c) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_b_u_r_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, S = pack_b_b_u_r_e X f g i R c -> c = S 5.
let S X f g i R c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_u X i,encode_r X R,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_u_r_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> struct_b_b_u_r_e (pack_b_b_u_r_e X f g i R c).
let X f g i R c.
assume H1.
assume H2.
assume H3.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_b_b_u_r_e X f g i R c = pack_b_b_u_r_e X' f' g' i' R' c'.
witness X. witness f. witness g. witness i. witness R. witness c.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_u_r_e_eta: forall S, struct_b_b_u_r_e S -> S = pack_b_b_u_r_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let i.
assume H4. apply H4. let R.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_u_r_e_0_eq S X f g i R c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_r X (decode_r (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_u_r_e_1_eq S X f g i R c Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_u_r_e_2_eq S X f g i R c Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_b_b_u_r_e_3_eq S X f g i R c Heq.
}
rewrite <- L3.
claim L4: encode_r X R = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_u_r_e_4_eq S X f g i R c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_b_u_r_e_5_eq S X f g i R c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_u_r_e.

Variable A:SType.

Definition unpack_b_b_u_r_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_r (S 4)) (S 5).

Theorem unpack_b_b_u_r_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall c,Phi X f g i R c = Phi X f' g' i' R' c)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, unpack_b_b_u_r_e (pack_b_b_u_r_e X f g i R c) Phi = Phi X f g i R c.
let Phi.
assume HPhi.
let X f g i R c.
prove Phi (pack_b_b_u_r_e X f g i R c 0) (decode_b (pack_b_b_u_r_e X f g i R c 1)) (decode_b (pack_b_b_u_r_e X f g i R c 2)) (decode_u (pack_b_b_u_r_e X f g i R c 3)) (decode_r (pack_b_b_u_r_e X f g i R c 4)) (pack_b_b_u_r_e X f g i R c 5) = Phi X f g i R c.
rewrite <- struct_b_b_u_r_e_0_eq (pack_b_b_u_r_e X f g i R c) X f g i R c (eqI set (pack_b_b_u_r_e X f g i R c)).
prove Phi X (decode_b (pack_b_b_u_r_e X f g i R c 1)) (decode_b (pack_b_b_u_r_e X f g i R c 2)) (decode_u (pack_b_b_u_r_e X f g i R c 3)) (decode_r (pack_b_b_u_r_e X f g i R c 4)) (pack_b_b_u_r_e X f g i R c 5) = Phi X f g i R c.
rewrite <- struct_b_b_u_r_e_5_eq (pack_b_b_u_r_e X f g i R c) X f g i R c (eqI set (pack_b_b_u_r_e X f g i R c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_r_e X f g i R c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_u_r_e_1_eq (pack_b_b_u_r_e X f g i R c) X f g i R c (eqI set (pack_b_b_u_r_e X f g i R c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_r_e X f g i R c 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_u_r_e_2_eq (pack_b_b_u_r_e X f g i R c) X f g i R c (eqI set (pack_b_b_u_r_e X f g i R c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_r_e X f g i R c 3) x = i x.
  apply eq_sym set.
  exact struct_b_b_u_r_e_3_eq (pack_b_b_u_r_e X f g i R c) X f g i R c (eqI set (pack_b_b_u_r_e X f g i R c)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_u_r_e X f g i R c 4) x y <-> R x y.
  rewrite <- struct_b_b_u_r_e_4_eq (pack_b_b_u_r_e X f g i R c) X f g i R c (eqI set (pack_b_b_u_r_e X f g i R c)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_b_b_u_r_e.

Definition pack_b_b_u_p_p : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> set := fun X f g i P Q => (X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,encode_p X Q).

Definition struct_b_b_u_p_p : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists i:set -> set, exists P:set -> prop, exists Q:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x :e X, i x :e X) /\ S = pack_b_b_u_p_p X f g i P Q.

Theorem pack_b_b_u_p_p_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall i i':set -> set, forall P P':set -> prop, forall Q Q':set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_b_b_u_p_p X f g i P Q = pack_b_b_u_p_p X f' g' i' P' Q'.
let X f f' g g' i i' P P' Q Q'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,encode_p X Q) = (X,encode_b X f',encode_b X g',encode_u X i',encode_p X P',encode_p X Q').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_u_p_p_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_u_p_p X f g i P Q -> X = S 0.
let S X f g i P Q. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,encode_p X Q) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_u_p_p_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_u_p_p X f g i P Q -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g i P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,encode_p X Q) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_u_p_p_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_u_p_p X f g i P Q -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g i P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,encode_p X Q) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_u_p_p_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_u_p_p X f g i P Q -> forall x :e X, i x = decode_u (S 3) x.
let S X f g i P Q. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,encode_p X Q) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_u_p_p_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_u_p_p X f g i P Q -> forall x :e X, P x = decode_p (S 4) x.
let S X f g i P Q. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,encode_p X Q) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_b_u_p_p_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_u_p_p X f g i P Q -> forall x :e X, Q x = decode_p (S 5) x.
let S X f g i P Q. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,encode_p X Q) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem pack_struct_b_b_u_p_p: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x :e X, i x :e X) -> struct_b_b_u_p_p (pack_b_b_u_p_p X f g i P Q).
let X f g i P Q.
assume H1.
assume H2.
assume H3.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists i':set -> set, exists P':set -> prop, exists Q':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x :e X', i' x :e X') /\ pack_b_b_u_p_p X f g i P Q = pack_b_b_u_p_p X' f' g' i' P' Q'.
witness X. witness f. witness g. witness i. witness P. witness Q.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
apply eqI set.
Qed.

Theorem struct_b_b_u_p_p_eta: forall S, struct_b_b_u_p_p S -> S = pack_b_b_u_p_p (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_p (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let i.
assume H4. apply H4. let P.
assume H5. apply H5. let Q.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_u_p_p_0_eq S X f g i P Q Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_p X (decode_p (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_u_p_p_1_eq S X f g i P Q Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_u_p_p_2_eq S X f g i P Q Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_b_b_u_p_p_3_eq S X f g i P Q Heq.
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_u_p_p_4_eq S X f g i P Q Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: encode_p X Q = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_u_p_p_5_eq S X f g i P Q Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_u_p_p.

Variable A:SType.

Definition unpack_b_b_u_p_p : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_p (S 4)) (decode_p (S 5)).

Theorem unpack_b_b_u_p_p_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) -> Phi X f g i P Q = Phi X f' g' i' P' Q')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, unpack_b_b_u_p_p (pack_b_b_u_p_p X f g i P Q) Phi = Phi X f g i P Q.
let Phi.
assume HPhi.
let X f g i P Q.
prove Phi (pack_b_b_u_p_p X f g i P Q 0) (decode_b (pack_b_b_u_p_p X f g i P Q 1)) (decode_b (pack_b_b_u_p_p X f g i P Q 2)) (decode_u (pack_b_b_u_p_p X f g i P Q 3)) (decode_p (pack_b_b_u_p_p X f g i P Q 4)) (decode_p (pack_b_b_u_p_p X f g i P Q 5)) = Phi X f g i P Q.
rewrite <- struct_b_b_u_p_p_0_eq (pack_b_b_u_p_p X f g i P Q) X f g i P Q (eqI set (pack_b_b_u_p_p X f g i P Q)).
prove Phi X (decode_b (pack_b_b_u_p_p X f g i P Q 1)) (decode_b (pack_b_b_u_p_p X f g i P Q 2)) (decode_u (pack_b_b_u_p_p X f g i P Q 3)) (decode_p (pack_b_b_u_p_p X f g i P Q 4)) (decode_p (pack_b_b_u_p_p X f g i P Q 5)) = Phi X f g i P Q.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_p_p X f g i P Q 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_u_p_p_1_eq (pack_b_b_u_p_p X f g i P Q) X f g i P Q (eqI set (pack_b_b_u_p_p X f g i P Q)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_p_p X f g i P Q 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_u_p_p_2_eq (pack_b_b_u_p_p X f g i P Q) X f g i P Q (eqI set (pack_b_b_u_p_p X f g i P Q)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_p_p X f g i P Q 3) x = i x.
  apply eq_sym set.
  exact struct_b_b_u_p_p_3_eq (pack_b_b_u_p_p X f g i P Q) X f g i P Q (eqI set (pack_b_b_u_p_p X f g i P Q)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_b_b_u_p_p X f g i P Q 4) x <-> P x.
  rewrite <- struct_b_b_u_p_p_4_eq (pack_b_b_u_p_p X f g i P Q) X f g i P Q (eqI set (pack_b_b_u_p_p X f g i P Q)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_b_u_p_p X f g i P Q 5) x <-> Q x.
  rewrite <- struct_b_b_u_p_p_5_eq (pack_b_b_u_p_p X f g i P Q) X f g i P Q (eqI set (pack_b_b_u_p_p X f g i P Q)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_u_p_p.

Definition pack_b_b_u_p_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> set -> set := fun X f g i P c => (X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,c).

Definition struct_b_b_u_p_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists i:set -> set, exists P:set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ S = pack_b_b_u_p_e X f g i P c.

Theorem pack_b_b_u_p_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall i i':set -> set, forall P P':set -> prop, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_b_u_p_e X f g i P c = pack_b_b_u_p_e X f' g' i' P' c.
let X f f' g g' i i' P P' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,c) = (X,encode_b X f',encode_b X g',encode_u X i',encode_p X P',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_b_u_p_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_u_p_e X f g i P c -> X = S 0.
let S X f g i P c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_u_p_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_u_p_e X f g i P c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g i P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_u_p_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_u_p_e X f g i P c -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g i P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_u_p_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_u_p_e X f g i P c -> forall x :e X, i x = decode_u (S 3) x.
let S X f g i P c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_u_p_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_u_p_e X f g i P c -> forall x :e X, P x = decode_p (S 4) x.
let S X f g i P c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_b_u_p_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, S = pack_b_b_u_p_e X f g i P c -> c = S 5.
let S X f g i P c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_u X i,encode_p X P,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_u_p_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> struct_b_b_u_p_e (pack_b_b_u_p_e X f g i P c).
let X f g i P c.
assume H1.
assume H2.
assume H3.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists i':set -> set, exists P':set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_b_b_u_p_e X f g i P c = pack_b_b_u_p_e X' f' g' i' P' c'.
witness X. witness f. witness g. witness i. witness P. witness c.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_u_p_e_eta: forall S, struct_b_b_u_p_e S -> S = pack_b_b_u_p_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let i.
assume H4. apply H4. let P.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_u_p_e_0_eq S X f g i P c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_u_p_e_1_eq S X f g i P c Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_u_p_e_2_eq S X f g i P c Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_b_b_u_p_e_3_eq S X f g i P c Heq.
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_u_p_e_4_eq S X f g i P c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_b_u_p_e_5_eq S X f g i P c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_u_p_e.

Variable A:SType.

Definition unpack_b_b_u_p_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_b_b_u_p_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c,Phi X f g i P c = Phi X f' g' i' P' c)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, unpack_b_b_u_p_e (pack_b_b_u_p_e X f g i P c) Phi = Phi X f g i P c.
let Phi.
assume HPhi.
let X f g i P c.
prove Phi (pack_b_b_u_p_e X f g i P c 0) (decode_b (pack_b_b_u_p_e X f g i P c 1)) (decode_b (pack_b_b_u_p_e X f g i P c 2)) (decode_u (pack_b_b_u_p_e X f g i P c 3)) (decode_p (pack_b_b_u_p_e X f g i P c 4)) (pack_b_b_u_p_e X f g i P c 5) = Phi X f g i P c.
rewrite <- struct_b_b_u_p_e_0_eq (pack_b_b_u_p_e X f g i P c) X f g i P c (eqI set (pack_b_b_u_p_e X f g i P c)).
prove Phi X (decode_b (pack_b_b_u_p_e X f g i P c 1)) (decode_b (pack_b_b_u_p_e X f g i P c 2)) (decode_u (pack_b_b_u_p_e X f g i P c 3)) (decode_p (pack_b_b_u_p_e X f g i P c 4)) (pack_b_b_u_p_e X f g i P c 5) = Phi X f g i P c.
rewrite <- struct_b_b_u_p_e_5_eq (pack_b_b_u_p_e X f g i P c) X f g i P c (eqI set (pack_b_b_u_p_e X f g i P c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_p_e X f g i P c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_u_p_e_1_eq (pack_b_b_u_p_e X f g i P c) X f g i P c (eqI set (pack_b_b_u_p_e X f g i P c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_p_e X f g i P c 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_u_p_e_2_eq (pack_b_b_u_p_e X f g i P c) X f g i P c (eqI set (pack_b_b_u_p_e X f g i P c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_p_e X f g i P c 3) x = i x.
  apply eq_sym set.
  exact struct_b_b_u_p_e_3_eq (pack_b_b_u_p_e X f g i P c) X f g i P c (eqI set (pack_b_b_u_p_e X f g i P c)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_b_b_u_p_e X f g i P c 4) x <-> P x.
  rewrite <- struct_b_b_u_p_e_4_eq (pack_b_b_u_p_e X f g i P c) X f g i P c (eqI set (pack_b_b_u_p_e X f g i P c)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_u_p_e.

Definition pack_b_b_u_e_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> set -> set -> set := fun X f g i c d => (X,encode_b X f,encode_b X g,encode_u X i,c,d).

Definition struct_b_b_u_e_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists i:set -> set, exists c:set, exists d:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ d :e X /\ S = pack_b_b_u_e_e X f g i c d.

Theorem pack_b_b_u_e_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall i i':set -> set, forall c, forall d,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x :e X, i x = i' x) ->
 pack_b_b_u_e_e X f g i c d = pack_b_b_u_e_e X f' g' i' c d.
let X f f' g g' i i' c d. assume H1. assume H2. assume H3.
prove (X,encode_b X f,encode_b X g,encode_u X i,c,d) = (X,encode_b X f',encode_b X g',encode_u X i',c,d).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_b_b_u_e_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_b_b_u_e_e X f g i c d -> X = S 0.
let S X f g i c d. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_u X i,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_u_e_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_b_b_u_e_e X f g i c d -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g i c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,c,d) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_u_e_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_b_b_u_e_e X f g i c d -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g i c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_u X i,c,d) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_u_e_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_b_b_u_e_e X f g i c d -> forall x :e X, i x = decode_u (S 3) x.
let S X f g i c d. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_b X g,encode_u X i,c,d) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_b_u_e_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_b_b_u_e_e X f g i c d -> c = S 4.
let S X f g i c d. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_u X i,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_b_b_u_e_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, S = pack_b_b_u_e_e X f g i c d -> d = S 5.
let S X f g i c d. assume H1.
rewrite H1. prove d = (X,encode_b X f,encode_b X g,encode_u X i,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_u_e_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> d :e X -> struct_b_b_u_e_e (pack_b_b_u_e_e X f g i c d).
let X f g i c d.
assume H1.
assume H2.
assume H3.
assume H4.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists i':set -> set, exists c':set, exists d':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ d' :e X' /\ pack_b_b_u_e_e X f g i c d = pack_b_b_u_e_e X' f' g' i' c' d'.
witness X. witness f. witness g. witness i. witness c. witness d.
apply andI.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H3.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_u_e_e_eta: forall S, struct_b_b_u_e_e S -> S = pack_b_b_u_e_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let i.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_u_e_e_0_eq S X f g i c d Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_u X (decode_u (S 3)),S 4,S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_u_e_e_1_eq S X f g i c d Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_u_e_e_2_eq S X f g i c d Heq.
}
rewrite <- L2.
claim L3: encode_u X i = encode_u X (decode_u (S 3)).
{ apply encode_u_ext.
  exact struct_b_b_u_e_e_3_eq S X f g i c d Heq.
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_b_b_u_e_e_4_eq S X f g i c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_b_b_u_e_e_5_eq S X f g i c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_u_e_e.

Variable A:SType.

Definition unpack_b_b_u_e_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_u (S 3)) (S 4) (S 5).

Theorem unpack_b_b_u_e_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set) -> set -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall c, forall d,Phi X f g i c d = Phi X f' g' i' c d)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall i:set -> set, forall c:set, forall d:set, unpack_b_b_u_e_e (pack_b_b_u_e_e X f g i c d) Phi = Phi X f g i c d.
let Phi.
assume HPhi.
let X f g i c d.
prove Phi (pack_b_b_u_e_e X f g i c d 0) (decode_b (pack_b_b_u_e_e X f g i c d 1)) (decode_b (pack_b_b_u_e_e X f g i c d 2)) (decode_u (pack_b_b_u_e_e X f g i c d 3)) (pack_b_b_u_e_e X f g i c d 4) (pack_b_b_u_e_e X f g i c d 5) = Phi X f g i c d.
rewrite <- struct_b_b_u_e_e_0_eq (pack_b_b_u_e_e X f g i c d) X f g i c d (eqI set (pack_b_b_u_e_e X f g i c d)).
prove Phi X (decode_b (pack_b_b_u_e_e X f g i c d 1)) (decode_b (pack_b_b_u_e_e X f g i c d 2)) (decode_u (pack_b_b_u_e_e X f g i c d 3)) (pack_b_b_u_e_e X f g i c d 4) (pack_b_b_u_e_e X f g i c d 5) = Phi X f g i c d.
rewrite <- struct_b_b_u_e_e_4_eq (pack_b_b_u_e_e X f g i c d) X f g i c d (eqI set (pack_b_b_u_e_e X f g i c d)).
rewrite <- struct_b_b_u_e_e_5_eq (pack_b_b_u_e_e X f g i c d) X f g i c d (eqI set (pack_b_b_u_e_e X f g i c d)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_e_e X f g i c d 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_u_e_e_1_eq (pack_b_b_u_e_e X f g i c d) X f g i c d (eqI set (pack_b_b_u_e_e X f g i c d)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_u_e_e X f g i c d 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_u_e_e_2_eq (pack_b_b_u_e_e X f g i c d) X f g i c d (eqI set (pack_b_b_u_e_e X f g i c d)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_b_u_e_e X f g i c d 3) x = i x.
  apply eq_sym set.
  exact struct_b_b_u_e_e_3_eq (pack_b_b_u_e_e X f g i c d) X f g i c d (eqI set (pack_b_b_u_e_e X f g i c d)) x Hx.
Qed.

End unpack_b_b_u_e_e.

Definition pack_b_b_r_r_p : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> set := fun X f g R T P => (X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,encode_p X P).

Definition struct_b_b_r_r_p : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists P:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ S = pack_b_b_r_r_p X f g R T P.

Theorem pack_b_b_r_r_p_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall P P':set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_b_r_r_p X f g R T P = pack_b_b_r_r_p X f' g' R' T' P'.
let X f f' g g' R R' T T' P P'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,encode_p X P) = (X,encode_b X f',encode_b X g',encode_r X R',encode_r X T',encode_p X P').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_r_r_p_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_b_r_r_p X f g R T P -> X = S 0.
let S X f g R T P. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,encode_p X P) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_r_r_p_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_b_r_r_p X f g R T P -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,encode_p X P) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_r_r_p_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_b_r_r_p X f g R T P -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,encode_p X P) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_r_r_p_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_b_r_r_p X f g R T P -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X f g R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,encode_p X P) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_b_r_r_p_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_b_r_r_p X f g R T P -> forall x y :e X, T x y = decode_r (S 4) x y.
let S X f g R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,encode_p X P) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_b_b_r_r_p_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_b_r_r_p X f g R T P -> forall x :e X, P x = decode_p (S 5) x.
let S X f g R T P. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,encode_p X P) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem pack_struct_b_b_r_r_p: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> struct_b_b_r_r_p (pack_b_b_r_r_p X f g R T P).
let X f g R T P.
assume H1.
assume H2.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists P':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ pack_b_b_r_r_p X f g R T P = pack_b_b_r_r_p X' f' g' R' T' P'.
witness X. witness f. witness g. witness R. witness T. witness P.
apply andI.
apply andI.
exact H1.
exact H2.
apply eqI set.
Qed.

Theorem struct_b_b_r_r_p_eta: forall S, struct_b_b_r_r_p S -> S = pack_b_b_r_r_p (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_r (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let R.
assume H4. apply H4. let T.
assume H5. apply H5. let P.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_r_r_p_0_eq S X f g R T P Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_r X (decode_r (S 3)),encode_r X (decode_r (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_r_r_p_1_eq S X f g R T P Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_r_r_p_2_eq S X f g R T P Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_r_r_p_3_eq S X f g R T P Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_r X T = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_r_r_p_4_eq S X f g R T P Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L4.
claim L5: encode_p X P = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_r_r_p_5_eq S X f g R T P Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_r_r_p.

Variable A:SType.

Definition unpack_b_b_r_r_p : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_r (S 4)) (decode_p (S 5)).

Theorem unpack_b_b_r_r_p_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> Phi X f g R T P = Phi X f' g' R' T' P')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, unpack_b_b_r_r_p (pack_b_b_r_r_p X f g R T P) Phi = Phi X f g R T P.
let Phi.
assume HPhi.
let X f g R T P.
prove Phi (pack_b_b_r_r_p X f g R T P 0) (decode_b (pack_b_b_r_r_p X f g R T P 1)) (decode_b (pack_b_b_r_r_p X f g R T P 2)) (decode_r (pack_b_b_r_r_p X f g R T P 3)) (decode_r (pack_b_b_r_r_p X f g R T P 4)) (decode_p (pack_b_b_r_r_p X f g R T P 5)) = Phi X f g R T P.
rewrite <- struct_b_b_r_r_p_0_eq (pack_b_b_r_r_p X f g R T P) X f g R T P (eqI set (pack_b_b_r_r_p X f g R T P)).
prove Phi X (decode_b (pack_b_b_r_r_p X f g R T P 1)) (decode_b (pack_b_b_r_r_p X f g R T P 2)) (decode_r (pack_b_b_r_r_p X f g R T P 3)) (decode_r (pack_b_b_r_r_p X f g R T P 4)) (decode_p (pack_b_b_r_r_p X f g R T P 5)) = Phi X f g R T P.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_r_r_p X f g R T P 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_r_r_p_1_eq (pack_b_b_r_r_p X f g R T P) X f g R T P (eqI set (pack_b_b_r_r_p X f g R T P)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_r_r_p X f g R T P 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_r_r_p_2_eq (pack_b_b_r_r_p X f g R T P) X f g R T P (eqI set (pack_b_b_r_r_p X f g R T P)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_r_r_p X f g R T P 3) x y <-> R x y.
  rewrite <- struct_b_b_r_r_p_3_eq (pack_b_b_r_r_p X f g R T P) X f g R T P (eqI set (pack_b_b_r_r_p X f g R T P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_r_r_p X f g R T P 4) x y <-> T x y.
  rewrite <- struct_b_b_r_r_p_4_eq (pack_b_b_r_r_p X f g R T P) X f g R T P (eqI set (pack_b_b_r_r_p X f g R T P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_b_r_r_p X f g R T P 5) x <-> P x.
  rewrite <- struct_b_b_r_r_p_5_eq (pack_b_b_r_r_p X f g R T P) X f g R T P (eqI set (pack_b_b_r_r_p X f g R T P)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_r_r_p.

Definition pack_b_b_r_r_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> set := fun X f g R T c => (X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,c).

Definition struct_b_b_r_r_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ c :e X /\ S = pack_b_b_r_r_e X f g R T c.

Theorem pack_b_b_r_r_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 pack_b_b_r_r_e X f g R T c = pack_b_b_r_r_e X f' g' R' T' c.
let X f f' g g' R R' T T' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,c) = (X,encode_b X f',encode_b X g',encode_r X R',encode_r X T',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_b_r_r_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_b_r_r_e X f g R T c -> X = S 0.
let S X f g R T c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_r_r_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_b_r_r_e X f g R T c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_r_r_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_b_r_r_e X f g R T c -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_r_r_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_b_r_r_e X f g R T c -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X f g R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_b_r_r_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_b_r_r_e X f g R T c -> forall x y :e X, T x y = decode_r (S 4) x y.
let S X f g R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,c) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_b_b_r_r_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_b_r_r_e X f g R T c -> c = S 5.
let S X f g R T c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_r X R,encode_r X T,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_r_r_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> c :e X -> struct_b_b_r_r_e (pack_b_b_r_r_e X f g R T c).
let X f g R T c.
assume H1.
assume H2.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ c' :e X' /\ pack_b_b_r_r_e X f g R T c = pack_b_b_r_r_e X' f' g' R' T' c'.
witness X. witness f. witness g. witness R. witness T. witness c.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_r_r_e_eta: forall S, struct_b_b_r_r_e S -> S = pack_b_b_r_r_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_r (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let R.
assume H4. apply H4. let T.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_r_r_e_0_eq S X f g R T c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_r X (decode_r (S 3)),encode_r X (decode_r (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_r_r_e_1_eq S X f g R T c Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_r_r_e_2_eq S X f g R T c Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_r_r_e_3_eq S X f g R T c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_r X T = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_r_r_e_4_eq S X f g R T c Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_b_r_r_e_5_eq S X f g R T c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_r_r_e.

Variable A:SType.

Definition unpack_b_b_r_r_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_r (S 4)) (S 5).

Theorem unpack_b_b_r_r_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall c,Phi X f g R T c = Phi X f' g' R' T' c)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, unpack_b_b_r_r_e (pack_b_b_r_r_e X f g R T c) Phi = Phi X f g R T c.
let Phi.
assume HPhi.
let X f g R T c.
prove Phi (pack_b_b_r_r_e X f g R T c 0) (decode_b (pack_b_b_r_r_e X f g R T c 1)) (decode_b (pack_b_b_r_r_e X f g R T c 2)) (decode_r (pack_b_b_r_r_e X f g R T c 3)) (decode_r (pack_b_b_r_r_e X f g R T c 4)) (pack_b_b_r_r_e X f g R T c 5) = Phi X f g R T c.
rewrite <- struct_b_b_r_r_e_0_eq (pack_b_b_r_r_e X f g R T c) X f g R T c (eqI set (pack_b_b_r_r_e X f g R T c)).
prove Phi X (decode_b (pack_b_b_r_r_e X f g R T c 1)) (decode_b (pack_b_b_r_r_e X f g R T c 2)) (decode_r (pack_b_b_r_r_e X f g R T c 3)) (decode_r (pack_b_b_r_r_e X f g R T c 4)) (pack_b_b_r_r_e X f g R T c 5) = Phi X f g R T c.
rewrite <- struct_b_b_r_r_e_5_eq (pack_b_b_r_r_e X f g R T c) X f g R T c (eqI set (pack_b_b_r_r_e X f g R T c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_r_r_e X f g R T c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_r_r_e_1_eq (pack_b_b_r_r_e X f g R T c) X f g R T c (eqI set (pack_b_b_r_r_e X f g R T c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_r_r_e X f g R T c 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_r_r_e_2_eq (pack_b_b_r_r_e X f g R T c) X f g R T c (eqI set (pack_b_b_r_r_e X f g R T c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_r_r_e X f g R T c 3) x y <-> R x y.
  rewrite <- struct_b_b_r_r_e_3_eq (pack_b_b_r_r_e X f g R T c) X f g R T c (eqI set (pack_b_b_r_r_e X f g R T c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_r_r_e X f g R T c 4) x y <-> T x y.
  rewrite <- struct_b_b_r_r_e_4_eq (pack_b_b_r_r_e X f g R T c) X f g R T c (eqI set (pack_b_b_r_r_e X f g R T c)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_b_b_r_r_e.

Definition pack_b_b_r_p_p : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set := fun X f g R P Q => (X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,encode_p X Q).

Definition struct_b_b_r_p_p : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists Q:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ S = pack_b_b_r_p_p X f g R P Q.

Theorem pack_b_b_r_p_p_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall Q Q':set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_b_b_r_p_p X f g R P Q = pack_b_b_r_p_p X f' g' R' P' Q'.
let X f f' g g' R R' P P' Q Q'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,encode_p X Q) = (X,encode_b X f',encode_b X g',encode_r X R',encode_p X P',encode_p X Q').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_b_r_p_p_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_r_p_p X f g R P Q -> X = S 0.
let S X f g R P Q. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,encode_p X Q) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_r_p_p_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_r_p_p X f g R P Q -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g R P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,encode_p X Q) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_r_p_p_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_r_p_p X f g R P Q -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g R P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,encode_p X Q) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_r_p_p_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_r_p_p X f g R P Q -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X f g R P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,encode_p X Q) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_b_r_p_p_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_r_p_p X f g R P Q -> forall x :e X, P x = decode_p (S 4) x.
let S X f g R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,encode_p X Q) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_b_r_p_p_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_b_r_p_p X f g R P Q -> forall x :e X, Q x = decode_p (S 5) x.
let S X f g R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,encode_p X Q) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem pack_struct_b_b_r_p_p: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> struct_b_b_r_p_p (pack_b_b_r_p_p X f g R P Q).
let X f g R P Q.
assume H1.
assume H2.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists Q':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ pack_b_b_r_p_p X f g R P Q = pack_b_b_r_p_p X' f' g' R' P' Q'.
witness X. witness f. witness g. witness R. witness P. witness Q.
apply andI.
apply andI.
exact H1.
exact H2.
apply eqI set.
Qed.

Theorem struct_b_b_r_p_p_eta: forall S, struct_b_b_r_p_p S -> S = pack_b_b_r_p_p (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_p (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let R.
assume H4. apply H4. let P.
assume H5. apply H5. let Q.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_r_p_p_0_eq S X f g R P Q Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_r X (decode_r (S 3)),encode_p X (decode_p (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_r_p_p_1_eq S X f g R P Q Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_r_p_p_2_eq S X f g R P Q Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_r_p_p_3_eq S X f g R P Q Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_r_p_p_4_eq S X f g R P Q Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: encode_p X Q = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_r_p_p_5_eq S X f g R P Q Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_r_p_p.

Variable A:SType.

Definition unpack_b_b_r_p_p : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_p (S 4)) (decode_p (S 5)).

Theorem unpack_b_b_r_p_p_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) -> Phi X f g R P Q = Phi X f' g' R' P' Q')
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, unpack_b_b_r_p_p (pack_b_b_r_p_p X f g R P Q) Phi = Phi X f g R P Q.
let Phi.
assume HPhi.
let X f g R P Q.
prove Phi (pack_b_b_r_p_p X f g R P Q 0) (decode_b (pack_b_b_r_p_p X f g R P Q 1)) (decode_b (pack_b_b_r_p_p X f g R P Q 2)) (decode_r (pack_b_b_r_p_p X f g R P Q 3)) (decode_p (pack_b_b_r_p_p X f g R P Q 4)) (decode_p (pack_b_b_r_p_p X f g R P Q 5)) = Phi X f g R P Q.
rewrite <- struct_b_b_r_p_p_0_eq (pack_b_b_r_p_p X f g R P Q) X f g R P Q (eqI set (pack_b_b_r_p_p X f g R P Q)).
prove Phi X (decode_b (pack_b_b_r_p_p X f g R P Q 1)) (decode_b (pack_b_b_r_p_p X f g R P Q 2)) (decode_r (pack_b_b_r_p_p X f g R P Q 3)) (decode_p (pack_b_b_r_p_p X f g R P Q 4)) (decode_p (pack_b_b_r_p_p X f g R P Q 5)) = Phi X f g R P Q.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_r_p_p X f g R P Q 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_r_p_p_1_eq (pack_b_b_r_p_p X f g R P Q) X f g R P Q (eqI set (pack_b_b_r_p_p X f g R P Q)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_r_p_p X f g R P Q 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_r_p_p_2_eq (pack_b_b_r_p_p X f g R P Q) X f g R P Q (eqI set (pack_b_b_r_p_p X f g R P Q)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_r_p_p X f g R P Q 3) x y <-> R x y.
  rewrite <- struct_b_b_r_p_p_3_eq (pack_b_b_r_p_p X f g R P Q) X f g R P Q (eqI set (pack_b_b_r_p_p X f g R P Q)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_b_r_p_p X f g R P Q 4) x <-> P x.
  rewrite <- struct_b_b_r_p_p_4_eq (pack_b_b_r_p_p X f g R P Q) X f g R P Q (eqI set (pack_b_b_r_p_p X f g R P Q)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_b_r_p_p X f g R P Q 5) x <-> Q x.
  rewrite <- struct_b_b_r_p_p_5_eq (pack_b_b_r_p_p X f g R P Q) X f g R P Q (eqI set (pack_b_b_r_p_p X f g R P Q)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_r_p_p.

Definition pack_b_b_r_p_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> set := fun X f g R P c => (X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,c).

Definition struct_b_b_r_p_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ c :e X /\ S = pack_b_b_r_p_e X f g R P c.

Theorem pack_b_b_r_p_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_b_r_p_e X f g R P c = pack_b_b_r_p_e X f' g' R' P' c.
let X f f' g g' R R' P P' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,c) = (X,encode_b X f',encode_b X g',encode_r X R',encode_p X P',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_b_r_p_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_b_r_p_e X f g R P c -> X = S 0.
let S X f g R P c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_r_p_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_b_r_p_e X f g R P c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g R P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_r_p_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_b_r_p_e X f g R P c -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g R P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_r_p_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_b_r_p_e X f g R P c -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X f g R P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_b_r_p_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_b_r_p_e X f g R P c -> forall x :e X, P x = decode_p (S 4) x.
let S X f g R P c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_b_r_p_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_b_r_p_e X f g R P c -> c = S 5.
let S X f g R P c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_r X R,encode_p X P,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_r_p_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> c :e X -> struct_b_b_r_p_e (pack_b_b_r_p_e X f g R P c).
let X f g R P c.
assume H1.
assume H2.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ c' :e X' /\ pack_b_b_r_p_e X f g R P c = pack_b_b_r_p_e X' f' g' R' P' c'.
witness X. witness f. witness g. witness R. witness P. witness c.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_r_p_e_eta: forall S, struct_b_b_r_p_e S -> S = pack_b_b_r_p_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let R.
assume H4. apply H4. let P.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_r_p_e_0_eq S X f g R P c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_r X (decode_r (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_r_p_e_1_eq S X f g R P c Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_r_p_e_2_eq S X f g R P c Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_r_p_e_3_eq S X f g R P c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_r_p_e_4_eq S X f g R P c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_b_r_p_e_5_eq S X f g R P c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_r_p_e.

Variable A:SType.

Definition unpack_b_b_r_p_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_r (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_b_b_r_p_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c,Phi X f g R P c = Phi X f' g' R' P' c)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, unpack_b_b_r_p_e (pack_b_b_r_p_e X f g R P c) Phi = Phi X f g R P c.
let Phi.
assume HPhi.
let X f g R P c.
prove Phi (pack_b_b_r_p_e X f g R P c 0) (decode_b (pack_b_b_r_p_e X f g R P c 1)) (decode_b (pack_b_b_r_p_e X f g R P c 2)) (decode_r (pack_b_b_r_p_e X f g R P c 3)) (decode_p (pack_b_b_r_p_e X f g R P c 4)) (pack_b_b_r_p_e X f g R P c 5) = Phi X f g R P c.
rewrite <- struct_b_b_r_p_e_0_eq (pack_b_b_r_p_e X f g R P c) X f g R P c (eqI set (pack_b_b_r_p_e X f g R P c)).
prove Phi X (decode_b (pack_b_b_r_p_e X f g R P c 1)) (decode_b (pack_b_b_r_p_e X f g R P c 2)) (decode_r (pack_b_b_r_p_e X f g R P c 3)) (decode_p (pack_b_b_r_p_e X f g R P c 4)) (pack_b_b_r_p_e X f g R P c 5) = Phi X f g R P c.
rewrite <- struct_b_b_r_p_e_5_eq (pack_b_b_r_p_e X f g R P c) X f g R P c (eqI set (pack_b_b_r_p_e X f g R P c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_r_p_e X f g R P c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_r_p_e_1_eq (pack_b_b_r_p_e X f g R P c) X f g R P c (eqI set (pack_b_b_r_p_e X f g R P c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_r_p_e X f g R P c 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_r_p_e_2_eq (pack_b_b_r_p_e X f g R P c) X f g R P c (eqI set (pack_b_b_r_p_e X f g R P c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_r_p_e X f g R P c 3) x y <-> R x y.
  rewrite <- struct_b_b_r_p_e_3_eq (pack_b_b_r_p_e X f g R P c) X f g R P c (eqI set (pack_b_b_r_p_e X f g R P c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_b_r_p_e X f g R P c 4) x <-> P x.
  rewrite <- struct_b_b_r_p_e_4_eq (pack_b_b_r_p_e X f g R P c) X f g R P c (eqI set (pack_b_b_r_p_e X f g R P c)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_r_p_e.

Definition pack_b_b_r_e_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> set -> set -> set := fun X f g R c d => (X,encode_b X f,encode_b X g,encode_r X R,c,d).

Definition struct_b_b_r_e_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists R:set -> set -> prop, exists c:set, exists d:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ c :e X /\ d :e X /\ S = pack_b_b_r_e_e X f g R c d.

Theorem pack_b_b_r_e_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall R R':set -> set -> prop, forall c, forall d,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 pack_b_b_r_e_e X f g R c d = pack_b_b_r_e_e X f' g' R' c d.
let X f f' g g' R R' c d. assume H1. assume H2. assume H3.
prove (X,encode_b X f,encode_b X g,encode_r X R,c,d) = (X,encode_b X f',encode_b X g',encode_r X R',c,d).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_b_b_r_e_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_b_r_e_e X f g R c d -> X = S 0.
let S X f g R c d. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_r X R,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_r_e_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_b_r_e_e X f g R c d -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g R c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_r X R,c,d) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_r_e_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_b_r_e_e X f g R c d -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g R c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_r X R,c,d) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_r_e_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_b_r_e_e X f g R c d -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X f g R c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_b X g,encode_r X R,c,d) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_b_r_e_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_b_r_e_e X f g R c d -> c = S 4.
let S X f g R c d. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_r X R,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_b_b_r_e_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_b_r_e_e X f g R c d -> d = S 5.
let S X f g R c d. assume H1.
rewrite H1. prove d = (X,encode_b X f,encode_b X g,encode_r X R,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_r_e_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> c :e X -> d :e X -> struct_b_b_r_e_e (pack_b_b_r_e_e X f g R c d).
let X f g R c d.
assume H1.
assume H2.
assume H4.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists R':set -> set -> prop, exists c':set, exists d':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ c' :e X' /\ d' :e X' /\ pack_b_b_r_e_e X f g R c d = pack_b_b_r_e_e X' f' g' R' c' d'.
witness X. witness f. witness g. witness R. witness c. witness d.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_r_e_e_eta: forall S, struct_b_b_r_e_e S -> S = pack_b_b_r_e_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_r (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let R.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_r_e_e_0_eq S X f g R c d Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_r X (decode_r (S 3)),S 4,S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_r_e_e_1_eq S X f g R c d Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_r_e_e_2_eq S X f g R c d Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_b_r_e_e_3_eq S X f g R c d Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_b_b_r_e_e_4_eq S X f g R c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_b_b_r_e_e_5_eq S X f g R c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_r_e_e.

Variable A:SType.

Definition unpack_b_b_r_e_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_r (S 3)) (S 4) (S 5).

Theorem unpack_b_b_r_e_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> set -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall c, forall d,Phi X f g R c d = Phi X f' g' R' c d)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, unpack_b_b_r_e_e (pack_b_b_r_e_e X f g R c d) Phi = Phi X f g R c d.
let Phi.
assume HPhi.
let X f g R c d.
prove Phi (pack_b_b_r_e_e X f g R c d 0) (decode_b (pack_b_b_r_e_e X f g R c d 1)) (decode_b (pack_b_b_r_e_e X f g R c d 2)) (decode_r (pack_b_b_r_e_e X f g R c d 3)) (pack_b_b_r_e_e X f g R c d 4) (pack_b_b_r_e_e X f g R c d 5) = Phi X f g R c d.
rewrite <- struct_b_b_r_e_e_0_eq (pack_b_b_r_e_e X f g R c d) X f g R c d (eqI set (pack_b_b_r_e_e X f g R c d)).
prove Phi X (decode_b (pack_b_b_r_e_e X f g R c d 1)) (decode_b (pack_b_b_r_e_e X f g R c d 2)) (decode_r (pack_b_b_r_e_e X f g R c d 3)) (pack_b_b_r_e_e X f g R c d 4) (pack_b_b_r_e_e X f g R c d 5) = Phi X f g R c d.
rewrite <- struct_b_b_r_e_e_4_eq (pack_b_b_r_e_e X f g R c d) X f g R c d (eqI set (pack_b_b_r_e_e X f g R c d)).
rewrite <- struct_b_b_r_e_e_5_eq (pack_b_b_r_e_e X f g R c d) X f g R c d (eqI set (pack_b_b_r_e_e X f g R c d)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_r_e_e X f g R c d 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_r_e_e_1_eq (pack_b_b_r_e_e X f g R c d) X f g R c d (eqI set (pack_b_b_r_e_e X f g R c d)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_r_e_e X f g R c d 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_r_e_e_2_eq (pack_b_b_r_e_e X f g R c d) X f g R c d (eqI set (pack_b_b_r_e_e X f g R c d)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_b_r_e_e X f g R c d 3) x y <-> R x y.
  rewrite <- struct_b_b_r_e_e_3_eq (pack_b_b_r_e_e X f g R c d) X f g R c d (eqI set (pack_b_b_r_e_e X f g R c d)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_b_b_r_e_e.

Definition pack_b_b_p_p_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> (set -> prop) -> set -> set := fun X f g P Q c => (X,encode_b X f,encode_b X g,encode_p X P,encode_p X Q,c).

Definition struct_b_b_p_p_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists P:set -> prop, exists Q:set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ c :e X /\ S = pack_b_b_p_p_e X f g P Q c.

Theorem pack_b_b_p_p_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall P P':set -> prop, forall Q Q':set -> prop, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_b_b_p_p_e X f g P Q c = pack_b_b_p_p_e X f' g' P' Q' c.
let X f f' g g' P P' Q Q' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_b X g,encode_p X P,encode_p X Q,c) = (X,encode_b X f',encode_b X g',encode_p X P',encode_p X Q',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_b_p_p_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_b_p_p_e X f g P Q c -> X = S 0.
let S X f g P Q c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_p X P,encode_p X Q,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_p_p_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_b_p_p_e X f g P Q c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g P Q c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_p X P,encode_p X Q,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_p_p_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_b_p_p_e X f g P Q c -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g P Q c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_p X P,encode_p X Q,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_p_p_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_b_p_p_e X f g P Q c -> forall x :e X, P x = decode_p (S 3) x.
let S X f g P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_p X P,encode_p X Q,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_b_p_p_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_b_p_p_e X f g P Q c -> forall x :e X, Q x = decode_p (S 4) x.
let S X f g P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_b X f,encode_b X g,encode_p X P,encode_p X Q,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem struct_b_b_p_p_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_b_p_p_e X f g P Q c -> c = S 5.
let S X f g P Q c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_p X P,encode_p X Q,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_p_p_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> c :e X -> struct_b_b_p_p_e (pack_b_b_p_p_e X f g P Q c).
let X f g P Q c.
assume H1.
assume H2.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists P':set -> prop, exists Q':set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ c' :e X' /\ pack_b_b_p_p_e X f g P Q c = pack_b_b_p_p_e X' f' g' P' Q' c'.
witness X. witness f. witness g. witness P. witness Q. witness c.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_p_p_e_eta: forall S, struct_b_b_p_p_e S -> S = pack_b_b_p_p_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let P.
assume H4. apply H4. let Q.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_p_p_e_0_eq S X f g P Q c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_p X (decode_p (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_p_p_e_1_eq S X f g P Q c Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_p_p_e_2_eq S X f g P Q c Heq.
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_p_p_e_3_eq S X f g P Q c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: encode_p X Q = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_p_p_e_4_eq S X f g P Q c Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_b_p_p_e_5_eq S X f g P Q c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_p_p_e.

Variable A:SType.

Definition unpack_b_b_p_p_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_b_b_p_p_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) ->  forall c,Phi X f g P Q c = Phi X f' g' P' Q' c)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, unpack_b_b_p_p_e (pack_b_b_p_p_e X f g P Q c) Phi = Phi X f g P Q c.
let Phi.
assume HPhi.
let X f g P Q c.
prove Phi (pack_b_b_p_p_e X f g P Q c 0) (decode_b (pack_b_b_p_p_e X f g P Q c 1)) (decode_b (pack_b_b_p_p_e X f g P Q c 2)) (decode_p (pack_b_b_p_p_e X f g P Q c 3)) (decode_p (pack_b_b_p_p_e X f g P Q c 4)) (pack_b_b_p_p_e X f g P Q c 5) = Phi X f g P Q c.
rewrite <- struct_b_b_p_p_e_0_eq (pack_b_b_p_p_e X f g P Q c) X f g P Q c (eqI set (pack_b_b_p_p_e X f g P Q c)).
prove Phi X (decode_b (pack_b_b_p_p_e X f g P Q c 1)) (decode_b (pack_b_b_p_p_e X f g P Q c 2)) (decode_p (pack_b_b_p_p_e X f g P Q c 3)) (decode_p (pack_b_b_p_p_e X f g P Q c 4)) (pack_b_b_p_p_e X f g P Q c 5) = Phi X f g P Q c.
rewrite <- struct_b_b_p_p_e_5_eq (pack_b_b_p_p_e X f g P Q c) X f g P Q c (eqI set (pack_b_b_p_p_e X f g P Q c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_p_p_e X f g P Q c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_p_p_e_1_eq (pack_b_b_p_p_e X f g P Q c) X f g P Q c (eqI set (pack_b_b_p_p_e X f g P Q c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_p_p_e X f g P Q c 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_p_p_e_2_eq (pack_b_b_p_p_e X f g P Q c) X f g P Q c (eqI set (pack_b_b_p_p_e X f g P Q c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_p (pack_b_b_p_p_e X f g P Q c 3) x <-> P x.
  rewrite <- struct_b_b_p_p_e_3_eq (pack_b_b_p_p_e X f g P Q c) X f g P Q c (eqI set (pack_b_b_p_p_e X f g P Q c)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_b_p_p_e X f g P Q c 4) x <-> Q x.
  rewrite <- struct_b_b_p_p_e_4_eq (pack_b_b_p_p_e X f g P Q c) X f g P Q c (eqI set (pack_b_b_p_p_e X f g P Q c)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_p_p_e.

Definition pack_b_b_p_e_e : set -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> set -> set -> set := fun X f g P c d => (X,encode_b X f,encode_b X g,encode_p X P,c,d).

Definition struct_b_b_p_e_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists g:set -> set -> set, exists P:set -> prop, exists c:set, exists d:set, (forall x y :e X, f x y :e X) /\ (forall x y :e X, g x y :e X) /\ c :e X /\ d :e X /\ S = pack_b_b_p_e_e X f g P c d.

Theorem pack_b_b_p_e_e_ext : forall X, forall f f':set -> set -> set, forall g g':set -> set -> set, forall P P':set -> prop, forall c, forall d,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, g x y = g' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_b_p_e_e X f g P c d = pack_b_b_p_e_e X f' g' P' c d.
let X f f' g g' P P' c d. assume H1. assume H2. assume H3.
prove (X,encode_b X f,encode_b X g,encode_p X P,c,d) = (X,encode_b X f',encode_b X g',encode_p X P',c,d).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_b X g = encode_b X g'.
{ apply encode_b_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_b_b_p_e_e_0_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_b_p_e_e X f g P c d -> X = S 0.
let S X f g P c d. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_b X g,encode_p X P,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_b_p_e_e_1_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_b_p_e_e X f g P c d -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f g P c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_b X g,encode_p X P,c,d) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_b_p_e_e_2_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_b_p_e_e X f g P c d -> forall x y :e X, g x y = decode_b (S 2) x y.
let S X f g P c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove g x y = decode_b ((X,encode_b X f,encode_b X g,encode_p X P,c,d) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym set. exact decode_encode_b X g x Hx y Hy.
Qed.

Theorem struct_b_b_p_e_e_3_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_b_p_e_e X f g P c d -> forall x :e X, P x = decode_p (S 3) x.
let S X f g P c d. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_b X g,encode_p X P,c,d) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_b_p_e_e_4_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_b_p_e_e X f g P c d -> c = S 4.
let S X f g P c d. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_b X g,encode_p X P,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_b_b_p_e_e_5_eq: forall S X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_b_p_e_e X f g P c d -> d = S 5.
let S X f g P c d. assume H1.
rewrite H1. prove d = (X,encode_b X f,encode_b X g,encode_p X P,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_b_p_e_e: forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, (forall x y :e X, f x y :e X) -> (forall x y :e X, g x y :e X) -> c :e X -> d :e X -> struct_b_b_p_e_e (pack_b_b_p_e_e X f g P c d).
let X f g P c d.
assume H1.
assume H2.
assume H4.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists g':set -> set -> set, exists P':set -> prop, exists c':set, exists d':set,  (forall x y :e X', f' x y :e X') /\ (forall x y :e X', g' x y :e X') /\ c' :e X' /\ d' :e X' /\ pack_b_b_p_e_e X f g P c d = pack_b_b_p_e_e X' f' g' P' c' d'.
witness X. witness f. witness g. witness P. witness c. witness d.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_b_p_e_e_eta: forall S, struct_b_b_p_e_e S -> S = pack_b_b_p_e_e (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_p (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let g.
assume H3. apply H3. let P.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_b_p_e_e_0_eq S X f g P c d Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_b X (decode_b (S 2)),encode_p X (decode_p (S 3)),S 4,S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_b_p_e_e_1_eq S X f g P c d Heq.
}
rewrite <- L1.
claim L2: encode_b X g = encode_b X (decode_b (S 2)).
{ apply encode_b_ext.
  exact struct_b_b_p_e_e_2_eq S X f g P c d Heq.
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_b_p_e_e_3_eq S X f g P c d Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_b_b_p_e_e_4_eq S X f g P c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_b_b_p_e_e_5_eq S X f g P c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_b_p_e_e.

Variable A:SType.

Definition unpack_b_b_p_e_e : set -> (set -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_b (S 2)) (decode_p (S 3)) (S 4) (S 5).

Theorem unpack_b_b_p_e_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> set) -> (set -> prop) -> set -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall g g':set -> set -> set, (forall x y :e X, g x y = g' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c, forall d,Phi X f g P c d = Phi X f' g' P' c d)
  ->
  forall X, forall f:set -> set -> set, forall g:set -> set -> set, forall P:set -> prop, forall c:set, forall d:set, unpack_b_b_p_e_e (pack_b_b_p_e_e X f g P c d) Phi = Phi X f g P c d.
let Phi.
assume HPhi.
let X f g P c d.
prove Phi (pack_b_b_p_e_e X f g P c d 0) (decode_b (pack_b_b_p_e_e X f g P c d 1)) (decode_b (pack_b_b_p_e_e X f g P c d 2)) (decode_p (pack_b_b_p_e_e X f g P c d 3)) (pack_b_b_p_e_e X f g P c d 4) (pack_b_b_p_e_e X f g P c d 5) = Phi X f g P c d.
rewrite <- struct_b_b_p_e_e_0_eq (pack_b_b_p_e_e X f g P c d) X f g P c d (eqI set (pack_b_b_p_e_e X f g P c d)).
prove Phi X (decode_b (pack_b_b_p_e_e X f g P c d 1)) (decode_b (pack_b_b_p_e_e X f g P c d 2)) (decode_p (pack_b_b_p_e_e X f g P c d 3)) (pack_b_b_p_e_e X f g P c d 4) (pack_b_b_p_e_e X f g P c d 5) = Phi X f g P c d.
rewrite <- struct_b_b_p_e_e_4_eq (pack_b_b_p_e_e X f g P c d) X f g P c d (eqI set (pack_b_b_p_e_e X f g P c d)).
rewrite <- struct_b_b_p_e_e_5_eq (pack_b_b_p_e_e X f g P c d) X f g P c d (eqI set (pack_b_b_p_e_e X f g P c d)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_p_e_e X f g P c d 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_b_p_e_e_1_eq (pack_b_b_p_e_e X f g P c d) X f g P c d (eqI set (pack_b_b_p_e_e X f g P c d)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_b_p_e_e X f g P c d 2) x y = g x y.
  apply eq_sym set.
  exact struct_b_b_p_e_e_2_eq (pack_b_b_p_e_e X f g P c d) X f g P c d (eqI set (pack_b_b_p_e_e X f g P c d)) x Hx y Hy.
- let x. assume Hx.
  prove decode_p (pack_b_b_p_e_e X f g P c d 3) x <-> P x.
  rewrite <- struct_b_b_p_e_e_3_eq (pack_b_b_p_e_e X f g P c d) X f g P c d (eqI set (pack_b_b_p_e_e X f g P c d)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_b_p_e_e.

Definition pack_b_u_r_r_p : set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> set := fun X f i R T P => (X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,encode_p X P).

Definition struct_b_u_r_r_p : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists P:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ S = pack_b_u_r_r_p X f i R T P.

Theorem pack_b_u_r_r_p_ext : forall X, forall f f':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall P P':set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_u_r_r_p X f i R T P = pack_b_u_r_r_p X f' i' R' T' P'.
let X f f' i i' R R' T T' P P'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,encode_p X P) = (X,encode_b X f',encode_u X i',encode_r X R',encode_r X T',encode_p X P').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_u_r_r_p_0_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_u_r_r_p X f i R T P -> X = S 0.
let S X f i R T P. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_u_r_r_p_1_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_u_r_r_p X f i R T P -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f i R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_u_r_r_p_2_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_u_r_r_p X f i R T P -> forall x :e X, i x = decode_u (S 2) x.
let S X f i R T P. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_u_r_r_p_3_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_u_r_r_p X f i R T P -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X f i R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_u_r_r_p_4_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_u_r_r_p X f i R T P -> forall x y :e X, T x y = decode_r (S 4) x y.
let S X f i R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_b_u_r_r_p_5_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_b_u_r_r_p X f i R T P -> forall x :e X, P x = decode_p (S 5) x.
let S X f i R T P. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,encode_p X P) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem pack_struct_b_u_r_r_p: forall X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> struct_b_u_r_r_p (pack_b_u_r_r_p X f i R T P).
let X f i R T P.
assume H1.
assume H2.
prove exists X':set, exists f':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists P':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ pack_b_u_r_r_p X f i R T P = pack_b_u_r_r_p X' f' i' R' T' P'.
witness X. witness f. witness i. witness R. witness T. witness P.
apply andI.
apply andI.
exact H1.
exact H2.
apply eqI set.
Qed.

Theorem struct_b_u_r_r_p_eta: forall S, struct_b_u_r_r_p S -> S = pack_b_u_r_r_p (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let i.
assume H3. apply H3. let R.
assume H4. apply H4. let T.
assume H5. apply H5. let P.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_u_r_r_p_0_eq S X f i R T P Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_r X (decode_r (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_u_r_r_p_1_eq S X f i R T P Heq.
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_b_u_r_r_p_2_eq S X f i R T P Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_u_r_r_p_3_eq S X f i R T P Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_r X T = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_u_r_r_p_4_eq S X f i R T P Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L4.
claim L5: encode_p X P = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_u_r_r_p_5_eq S X f i R T P Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_u_r_r_p.

Variable A:SType.

Definition unpack_b_u_r_r_p : set -> (set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (decode_p (S 5)).

Theorem unpack_b_u_r_r_p_eq : forall Phi:set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> Phi X f i R T P = Phi X f' i' R' T' P')
  ->
  forall X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, unpack_b_u_r_r_p (pack_b_u_r_r_p X f i R T P) Phi = Phi X f i R T P.
let Phi.
assume HPhi.
let X f i R T P.
prove Phi (pack_b_u_r_r_p X f i R T P 0) (decode_b (pack_b_u_r_r_p X f i R T P 1)) (decode_u (pack_b_u_r_r_p X f i R T P 2)) (decode_r (pack_b_u_r_r_p X f i R T P 3)) (decode_r (pack_b_u_r_r_p X f i R T P 4)) (decode_p (pack_b_u_r_r_p X f i R T P 5)) = Phi X f i R T P.
rewrite <- struct_b_u_r_r_p_0_eq (pack_b_u_r_r_p X f i R T P) X f i R T P (eqI set (pack_b_u_r_r_p X f i R T P)).
prove Phi X (decode_b (pack_b_u_r_r_p X f i R T P 1)) (decode_u (pack_b_u_r_r_p X f i R T P 2)) (decode_r (pack_b_u_r_r_p X f i R T P 3)) (decode_r (pack_b_u_r_r_p X f i R T P 4)) (decode_p (pack_b_u_r_r_p X f i R T P 5)) = Phi X f i R T P.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_u_r_r_p X f i R T P 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_u_r_r_p_1_eq (pack_b_u_r_r_p X f i R T P) X f i R T P (eqI set (pack_b_u_r_r_p X f i R T P)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_u_r_r_p X f i R T P 2) x = i x.
  apply eq_sym set.
  exact struct_b_u_r_r_p_2_eq (pack_b_u_r_r_p X f i R T P) X f i R T P (eqI set (pack_b_u_r_r_p X f i R T P)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_u_r_r_p X f i R T P 3) x y <-> R x y.
  rewrite <- struct_b_u_r_r_p_3_eq (pack_b_u_r_r_p X f i R T P) X f i R T P (eqI set (pack_b_u_r_r_p X f i R T P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_u_r_r_p X f i R T P 4) x y <-> T x y.
  rewrite <- struct_b_u_r_r_p_4_eq (pack_b_u_r_r_p X f i R T P) X f i R T P (eqI set (pack_b_u_r_r_p X f i R T P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_u_r_r_p X f i R T P 5) x <-> P x.
  rewrite <- struct_b_u_r_r_p_5_eq (pack_b_u_r_r_p X f i R T P) X f i R T P (eqI set (pack_b_u_r_r_p X f i R T P)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_u_r_r_p.

Definition pack_b_u_r_r_e : set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> set := fun X f i R T c => (X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,c).

Definition struct_b_u_r_r_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ S = pack_b_u_r_r_e X f i R T c.

Theorem pack_b_u_r_r_e_ext : forall X, forall f f':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 pack_b_u_r_r_e X f i R T c = pack_b_u_r_r_e X f' i' R' T' c.
let X f f' i i' R R' T T' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,c) = (X,encode_b X f',encode_u X i',encode_r X R',encode_r X T',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_u_r_r_e_0_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_u_r_r_e X f i R T c -> X = S 0.
let S X f i R T c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_u_r_r_e_1_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_u_r_r_e X f i R T c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f i R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_u_r_r_e_2_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_u_r_r_e X f i R T c -> forall x :e X, i x = decode_u (S 2) x.
let S X f i R T c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,c) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_u_r_r_e_3_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_u_r_r_e X f i R T c -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X f i R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_u_r_r_e_4_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_u_r_r_e X f i R T c -> forall x y :e X, T x y = decode_r (S 4) x y.
let S X f i R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,c) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_b_u_r_r_e_5_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_b_u_r_r_e X f i R T c -> c = S 5.
let S X f i R T c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_u X i,encode_r X R,encode_r X T,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_u_r_r_e: forall X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> struct_b_u_r_r_e (pack_b_u_r_r_e X f i R T c).
let X f i R T c.
assume H1.
assume H2.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_b_u_r_r_e X f i R T c = pack_b_u_r_r_e X' f' i' R' T' c'.
witness X. witness f. witness i. witness R. witness T. witness c.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_u_r_r_e_eta: forall S, struct_b_u_r_r_e S -> S = pack_b_u_r_r_e (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let i.
assume H3. apply H3. let R.
assume H4. apply H4. let T.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_u_r_r_e_0_eq S X f i R T c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_r X (decode_r (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_u_r_r_e_1_eq S X f i R T c Heq.
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_b_u_r_r_e_2_eq S X f i R T c Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_u_r_r_e_3_eq S X f i R T c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_r X T = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_u_r_r_e_4_eq S X f i R T c Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_u_r_r_e_5_eq S X f i R T c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_u_r_r_e.

Variable A:SType.

Definition unpack_b_u_r_r_e : set -> (set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (S 5).

Theorem unpack_b_u_r_r_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall c,Phi X f i R T c = Phi X f' i' R' T' c)
  ->
  forall X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, unpack_b_u_r_r_e (pack_b_u_r_r_e X f i R T c) Phi = Phi X f i R T c.
let Phi.
assume HPhi.
let X f i R T c.
prove Phi (pack_b_u_r_r_e X f i R T c 0) (decode_b (pack_b_u_r_r_e X f i R T c 1)) (decode_u (pack_b_u_r_r_e X f i R T c 2)) (decode_r (pack_b_u_r_r_e X f i R T c 3)) (decode_r (pack_b_u_r_r_e X f i R T c 4)) (pack_b_u_r_r_e X f i R T c 5) = Phi X f i R T c.
rewrite <- struct_b_u_r_r_e_0_eq (pack_b_u_r_r_e X f i R T c) X f i R T c (eqI set (pack_b_u_r_r_e X f i R T c)).
prove Phi X (decode_b (pack_b_u_r_r_e X f i R T c 1)) (decode_u (pack_b_u_r_r_e X f i R T c 2)) (decode_r (pack_b_u_r_r_e X f i R T c 3)) (decode_r (pack_b_u_r_r_e X f i R T c 4)) (pack_b_u_r_r_e X f i R T c 5) = Phi X f i R T c.
rewrite <- struct_b_u_r_r_e_5_eq (pack_b_u_r_r_e X f i R T c) X f i R T c (eqI set (pack_b_u_r_r_e X f i R T c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_u_r_r_e X f i R T c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_u_r_r_e_1_eq (pack_b_u_r_r_e X f i R T c) X f i R T c (eqI set (pack_b_u_r_r_e X f i R T c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_u_r_r_e X f i R T c 2) x = i x.
  apply eq_sym set.
  exact struct_b_u_r_r_e_2_eq (pack_b_u_r_r_e X f i R T c) X f i R T c (eqI set (pack_b_u_r_r_e X f i R T c)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_u_r_r_e X f i R T c 3) x y <-> R x y.
  rewrite <- struct_b_u_r_r_e_3_eq (pack_b_u_r_r_e X f i R T c) X f i R T c (eqI set (pack_b_u_r_r_e X f i R T c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_u_r_r_e X f i R T c 4) x y <-> T x y.
  rewrite <- struct_b_u_r_r_e_4_eq (pack_b_u_r_r_e X f i R T c) X f i R T c (eqI set (pack_b_u_r_r_e X f i R T c)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_b_u_r_r_e.

Definition pack_b_u_r_p_p : set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set := fun X f i R P Q => (X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,encode_p X Q).

Definition struct_b_u_r_p_p : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists Q:set -> prop, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ S = pack_b_u_r_p_p X f i R P Q.

Theorem pack_b_u_r_p_p_ext : forall X, forall f f':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall Q Q':set -> prop,
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_b_u_r_p_p X f i R P Q = pack_b_u_r_p_p X f' i' R' P' Q'.
let X f f' i i' R R' P P' Q Q'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) = (X,encode_b X f',encode_u X i',encode_r X R',encode_p X P',encode_p X Q').
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_b_u_r_p_p_0_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_u_r_p_p X f i R P Q -> X = S 0.
let S X f i R P Q. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_u_r_p_p_1_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_u_r_p_p X f i R P Q -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f i R P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_u_r_p_p_2_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_u_r_p_p X f i R P Q -> forall x :e X, i x = decode_u (S 2) x.
let S X f i R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_u_r_p_p_3_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_u_r_p_p X f i R P Q -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X f i R P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_u_r_p_p_4_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_u_r_p_p X f i R P Q -> forall x :e X, P x = decode_p (S 4) x.
let S X f i R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_u_r_p_p_5_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_b_u_r_p_p X f i R P Q -> forall x :e X, Q x = decode_p (S 5) x.
let S X f i R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,encode_p X Q) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem pack_struct_b_u_r_p_p: forall X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> struct_b_u_r_p_p (pack_b_u_r_p_p X f i R P Q).
let X f i R P Q.
assume H1.
assume H2.
prove exists X':set, exists f':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists Q':set -> prop,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ pack_b_u_r_p_p X f i R P Q = pack_b_u_r_p_p X' f' i' R' P' Q'.
witness X. witness f. witness i. witness R. witness P. witness Q.
apply andI.
apply andI.
exact H1.
exact H2.
apply eqI set.
Qed.

Theorem struct_b_u_r_p_p_eta: forall S, struct_b_u_r_p_p S -> S = pack_b_u_r_p_p (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let i.
assume H3. apply H3. let R.
assume H4. apply H4. let P.
assume H5. apply H5. let Q.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_u_r_p_p_0_eq S X f i R P Q Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_p X (decode_p (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_u_r_p_p_1_eq S X f i R P Q Heq.
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_b_u_r_p_p_2_eq S X f i R P Q Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_u_r_p_p_3_eq S X f i R P Q Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_u_r_p_p_4_eq S X f i R P Q Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: encode_p X Q = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_u_r_p_p_5_eq S X f i R P Q Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_u_r_p_p.

Variable A:SType.

Definition unpack_b_u_r_p_p : set -> (set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (decode_p (S 5)).

Theorem unpack_b_u_r_p_p_eq : forall Phi:set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) -> Phi X f i R P Q = Phi X f' i' R' P' Q')
  ->
  forall X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, unpack_b_u_r_p_p (pack_b_u_r_p_p X f i R P Q) Phi = Phi X f i R P Q.
let Phi.
assume HPhi.
let X f i R P Q.
prove Phi (pack_b_u_r_p_p X f i R P Q 0) (decode_b (pack_b_u_r_p_p X f i R P Q 1)) (decode_u (pack_b_u_r_p_p X f i R P Q 2)) (decode_r (pack_b_u_r_p_p X f i R P Q 3)) (decode_p (pack_b_u_r_p_p X f i R P Q 4)) (decode_p (pack_b_u_r_p_p X f i R P Q 5)) = Phi X f i R P Q.
rewrite <- struct_b_u_r_p_p_0_eq (pack_b_u_r_p_p X f i R P Q) X f i R P Q (eqI set (pack_b_u_r_p_p X f i R P Q)).
prove Phi X (decode_b (pack_b_u_r_p_p X f i R P Q 1)) (decode_u (pack_b_u_r_p_p X f i R P Q 2)) (decode_r (pack_b_u_r_p_p X f i R P Q 3)) (decode_p (pack_b_u_r_p_p X f i R P Q 4)) (decode_p (pack_b_u_r_p_p X f i R P Q 5)) = Phi X f i R P Q.
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_u_r_p_p X f i R P Q 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_u_r_p_p_1_eq (pack_b_u_r_p_p X f i R P Q) X f i R P Q (eqI set (pack_b_u_r_p_p X f i R P Q)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_u_r_p_p X f i R P Q 2) x = i x.
  apply eq_sym set.
  exact struct_b_u_r_p_p_2_eq (pack_b_u_r_p_p X f i R P Q) X f i R P Q (eqI set (pack_b_u_r_p_p X f i R P Q)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_u_r_p_p X f i R P Q 3) x y <-> R x y.
  rewrite <- struct_b_u_r_p_p_3_eq (pack_b_u_r_p_p X f i R P Q) X f i R P Q (eqI set (pack_b_u_r_p_p X f i R P Q)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_u_r_p_p X f i R P Q 4) x <-> P x.
  rewrite <- struct_b_u_r_p_p_4_eq (pack_b_u_r_p_p X f i R P Q) X f i R P Q (eqI set (pack_b_u_r_p_p X f i R P Q)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_u_r_p_p X f i R P Q 5) x <-> Q x.
  rewrite <- struct_b_u_r_p_p_5_eq (pack_b_u_r_p_p X f i R P Q) X f i R P Q (eqI set (pack_b_u_r_p_p X f i R P Q)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_u_r_p_p.

Definition pack_b_u_r_p_e : set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> set := fun X f i R P c => (X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,c).

Definition struct_b_u_r_p_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ S = pack_b_u_r_p_e X f i R P c.

Theorem pack_b_u_r_p_e_ext : forall X, forall f f':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_u_r_p_e X f i R P c = pack_b_u_r_p_e X f' i' R' P' c.
let X f f' i i' R R' P P' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,c) = (X,encode_b X f',encode_u X i',encode_r X R',encode_p X P',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_u_r_p_e_0_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_u_r_p_e X f i R P c -> X = S 0.
let S X f i R P c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_u_r_p_e_1_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_u_r_p_e X f i R P c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f i R P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_u_r_p_e_2_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_u_r_p_e X f i R P c -> forall x :e X, i x = decode_u (S 2) x.
let S X f i R P c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,c) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_u_r_p_e_3_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_u_r_p_e X f i R P c -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X f i R P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_u_r_p_e_4_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_u_r_p_e X f i R P c -> forall x :e X, P x = decode_p (S 4) x.
let S X f i R P c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_u_r_p_e_5_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_b_u_r_p_e X f i R P c -> c = S 5.
let S X f i R P c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_u X i,encode_r X R,encode_p X P,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_u_r_p_e: forall X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> struct_b_u_r_p_e (pack_b_u_r_p_e X f i R P c).
let X f i R P c.
assume H1.
assume H2.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_b_u_r_p_e X f i R P c = pack_b_u_r_p_e X' f' i' R' P' c'.
witness X. witness f. witness i. witness R. witness P. witness c.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_u_r_p_e_eta: forall S, struct_b_u_r_p_e S -> S = pack_b_u_r_p_e (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let i.
assume H3. apply H3. let R.
assume H4. apply H4. let P.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_u_r_p_e_0_eq S X f i R P c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_u_r_p_e_1_eq S X f i R P c Heq.
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_b_u_r_p_e_2_eq S X f i R P c Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_u_r_p_e_3_eq S X f i R P c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_u_r_p_e_4_eq S X f i R P c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_u_r_p_e_5_eq S X f i R P c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_u_r_p_e.

Variable A:SType.

Definition unpack_b_u_r_p_e : set -> (set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_b_u_r_p_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c,Phi X f i R P c = Phi X f' i' R' P' c)
  ->
  forall X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, unpack_b_u_r_p_e (pack_b_u_r_p_e X f i R P c) Phi = Phi X f i R P c.
let Phi.
assume HPhi.
let X f i R P c.
prove Phi (pack_b_u_r_p_e X f i R P c 0) (decode_b (pack_b_u_r_p_e X f i R P c 1)) (decode_u (pack_b_u_r_p_e X f i R P c 2)) (decode_r (pack_b_u_r_p_e X f i R P c 3)) (decode_p (pack_b_u_r_p_e X f i R P c 4)) (pack_b_u_r_p_e X f i R P c 5) = Phi X f i R P c.
rewrite <- struct_b_u_r_p_e_0_eq (pack_b_u_r_p_e X f i R P c) X f i R P c (eqI set (pack_b_u_r_p_e X f i R P c)).
prove Phi X (decode_b (pack_b_u_r_p_e X f i R P c 1)) (decode_u (pack_b_u_r_p_e X f i R P c 2)) (decode_r (pack_b_u_r_p_e X f i R P c 3)) (decode_p (pack_b_u_r_p_e X f i R P c 4)) (pack_b_u_r_p_e X f i R P c 5) = Phi X f i R P c.
rewrite <- struct_b_u_r_p_e_5_eq (pack_b_u_r_p_e X f i R P c) X f i R P c (eqI set (pack_b_u_r_p_e X f i R P c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_u_r_p_e X f i R P c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_u_r_p_e_1_eq (pack_b_u_r_p_e X f i R P c) X f i R P c (eqI set (pack_b_u_r_p_e X f i R P c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_u_r_p_e X f i R P c 2) x = i x.
  apply eq_sym set.
  exact struct_b_u_r_p_e_2_eq (pack_b_u_r_p_e X f i R P c) X f i R P c (eqI set (pack_b_u_r_p_e X f i R P c)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_u_r_p_e X f i R P c 3) x y <-> R x y.
  rewrite <- struct_b_u_r_p_e_3_eq (pack_b_u_r_p_e X f i R P c) X f i R P c (eqI set (pack_b_u_r_p_e X f i R P c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_u_r_p_e X f i R P c 4) x <-> P x.
  rewrite <- struct_b_u_r_p_e_4_eq (pack_b_u_r_p_e X f i R P c) X f i R P c (eqI set (pack_b_u_r_p_e X f i R P c)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_u_r_p_e.

Definition pack_b_u_r_e_e : set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> set -> set := fun X f i R c d => (X,encode_b X f,encode_u X i,encode_r X R,c,d).

Definition struct_b_u_r_e_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists i:set -> set, exists R:set -> set -> prop, exists c:set, exists d:set, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ d :e X /\ S = pack_b_u_r_e_e X f i R c d.

Theorem pack_b_u_r_e_e_ext : forall X, forall f f':set -> set -> set, forall i i':set -> set, forall R R':set -> set -> prop, forall c, forall d,
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 pack_b_u_r_e_e X f i R c d = pack_b_u_r_e_e X f' i' R' c d.
let X f f' i i' R R' c d. assume H1. assume H2. assume H3.
prove (X,encode_b X f,encode_u X i,encode_r X R,c,d) = (X,encode_b X f',encode_u X i',encode_r X R',c,d).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_b_u_r_e_e_0_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_u_r_e_e X f i R c d -> X = S 0.
let S X f i R c d. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_u X i,encode_r X R,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_u_r_e_e_1_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_u_r_e_e X f i R c d -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f i R c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_u X i,encode_r X R,c,d) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_u_r_e_e_2_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_u_r_e_e X f i R c d -> forall x :e X, i x = decode_u (S 2) x.
let S X f i R c d. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_u X i,encode_r X R,c,d) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_u_r_e_e_3_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_u_r_e_e X f i R c d -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X f i R c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_u X i,encode_r X R,c,d) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_u_r_e_e_4_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_u_r_e_e X f i R c d -> c = S 4.
let S X f i R c d. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_u X i,encode_r X R,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_b_u_r_e_e_5_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_b_u_r_e_e X f i R c d -> d = S 5.
let S X f i R c d. assume H1.
rewrite H1. prove d = (X,encode_b X f,encode_u X i,encode_r X R,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_u_r_e_e: forall X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> d :e X -> struct_b_u_r_e_e (pack_b_u_r_e_e X f i R c d).
let X f i R c d.
assume H1.
assume H2.
assume H4.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists i':set -> set, exists R':set -> set -> prop, exists c':set, exists d':set,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ d' :e X' /\ pack_b_u_r_e_e X f i R c d = pack_b_u_r_e_e X' f' i' R' c' d'.
witness X. witness f. witness i. witness R. witness c. witness d.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_u_r_e_e_eta: forall S, struct_b_u_r_e_e S -> S = pack_b_u_r_e_e (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_r (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let i.
assume H3. apply H3. let R.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_u_r_e_e_0_eq S X f i R c d Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),S 4,S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_u_r_e_e_1_eq S X f i R c d Heq.
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_b_u_r_e_e_2_eq S X f i R c d Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_u_r_e_e_3_eq S X f i R c d Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_b_u_r_e_e_4_eq S X f i R c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_b_u_r_e_e_5_eq S X f i R c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_u_r_e_e.

Variable A:SType.

Definition unpack_b_u_r_e_e : set -> (set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_r (S 3)) (S 4) (S 5).

Theorem unpack_b_u_r_e_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall c, forall d,Phi X f i R c d = Phi X f' i' R' c d)
  ->
  forall X, forall f:set -> set -> set, forall i:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, unpack_b_u_r_e_e (pack_b_u_r_e_e X f i R c d) Phi = Phi X f i R c d.
let Phi.
assume HPhi.
let X f i R c d.
prove Phi (pack_b_u_r_e_e X f i R c d 0) (decode_b (pack_b_u_r_e_e X f i R c d 1)) (decode_u (pack_b_u_r_e_e X f i R c d 2)) (decode_r (pack_b_u_r_e_e X f i R c d 3)) (pack_b_u_r_e_e X f i R c d 4) (pack_b_u_r_e_e X f i R c d 5) = Phi X f i R c d.
rewrite <- struct_b_u_r_e_e_0_eq (pack_b_u_r_e_e X f i R c d) X f i R c d (eqI set (pack_b_u_r_e_e X f i R c d)).
prove Phi X (decode_b (pack_b_u_r_e_e X f i R c d 1)) (decode_u (pack_b_u_r_e_e X f i R c d 2)) (decode_r (pack_b_u_r_e_e X f i R c d 3)) (pack_b_u_r_e_e X f i R c d 4) (pack_b_u_r_e_e X f i R c d 5) = Phi X f i R c d.
rewrite <- struct_b_u_r_e_e_4_eq (pack_b_u_r_e_e X f i R c d) X f i R c d (eqI set (pack_b_u_r_e_e X f i R c d)).
rewrite <- struct_b_u_r_e_e_5_eq (pack_b_u_r_e_e X f i R c d) X f i R c d (eqI set (pack_b_u_r_e_e X f i R c d)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_u_r_e_e X f i R c d 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_u_r_e_e_1_eq (pack_b_u_r_e_e X f i R c d) X f i R c d (eqI set (pack_b_u_r_e_e X f i R c d)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_u_r_e_e X f i R c d 2) x = i x.
  apply eq_sym set.
  exact struct_b_u_r_e_e_2_eq (pack_b_u_r_e_e X f i R c d) X f i R c d (eqI set (pack_b_u_r_e_e X f i R c d)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_u_r_e_e X f i R c d 3) x y <-> R x y.
  rewrite <- struct_b_u_r_e_e_3_eq (pack_b_u_r_e_e X f i R c d) X f i R c d (eqI set (pack_b_u_r_e_e X f i R c d)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_b_u_r_e_e.

Definition pack_b_u_p_p_e : set -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> set -> set := fun X f i P Q c => (X,encode_b X f,encode_u X i,encode_p X P,encode_p X Q,c).

Definition struct_b_u_p_p_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists i:set -> set, exists P:set -> prop, exists Q:set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ S = pack_b_u_p_p_e X f i P Q c.

Theorem pack_b_u_p_p_e_ext : forall X, forall f f':set -> set -> set, forall i i':set -> set, forall P P':set -> prop, forall Q Q':set -> prop, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_b_u_p_p_e X f i P Q c = pack_b_u_p_p_e X f' i' P' Q' c.
let X f f' i i' P P' Q Q' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_u X i,encode_p X P,encode_p X Q,c) = (X,encode_b X f',encode_u X i',encode_p X P',encode_p X Q',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_u_p_p_e_0_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_u_p_p_e X f i P Q c -> X = S 0.
let S X f i P Q c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_u X i,encode_p X P,encode_p X Q,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_u_p_p_e_1_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_u_p_p_e X f i P Q c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f i P Q c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_u X i,encode_p X P,encode_p X Q,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_u_p_p_e_2_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_u_p_p_e X f i P Q c -> forall x :e X, i x = decode_u (S 2) x.
let S X f i P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_u X i,encode_p X P,encode_p X Q,c) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_u_p_p_e_3_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_u_p_p_e X f i P Q c -> forall x :e X, P x = decode_p (S 3) x.
let S X f i P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_u X i,encode_p X P,encode_p X Q,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_u_p_p_e_4_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_u_p_p_e X f i P Q c -> forall x :e X, Q x = decode_p (S 4) x.
let S X f i P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_b X f,encode_u X i,encode_p X P,encode_p X Q,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem struct_b_u_p_p_e_5_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_u_p_p_e X f i P Q c -> c = S 5.
let S X f i P Q c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_u X i,encode_p X P,encode_p X Q,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_u_p_p_e: forall X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> struct_b_u_p_p_e (pack_b_u_p_p_e X f i P Q c).
let X f i P Q c.
assume H1.
assume H2.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists i':set -> set, exists P':set -> prop, exists Q':set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_b_u_p_p_e X f i P Q c = pack_b_u_p_p_e X' f' i' P' Q' c'.
witness X. witness f. witness i. witness P. witness Q. witness c.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_u_p_p_e_eta: forall S, struct_b_u_p_p_e S -> S = pack_b_u_p_p_e (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let i.
assume H3. apply H3. let P.
assume H4. apply H4. let Q.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_u_p_p_e_0_eq S X f i P Q c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_u X (decode_u (S 2)),encode_p X (decode_p (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_u_p_p_e_1_eq S X f i P Q c Heq.
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_b_u_p_p_e_2_eq S X f i P Q c Heq.
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_u_p_p_e_3_eq S X f i P Q c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: encode_p X Q = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_u_p_p_e_4_eq S X f i P Q c Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_u_p_p_e_5_eq S X f i P Q c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_u_p_p_e.

Variable A:SType.

Definition unpack_b_u_p_p_e : set -> (set -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_b_u_p_p_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) ->  forall c,Phi X f i P Q c = Phi X f' i' P' Q' c)
  ->
  forall X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, unpack_b_u_p_p_e (pack_b_u_p_p_e X f i P Q c) Phi = Phi X f i P Q c.
let Phi.
assume HPhi.
let X f i P Q c.
prove Phi (pack_b_u_p_p_e X f i P Q c 0) (decode_b (pack_b_u_p_p_e X f i P Q c 1)) (decode_u (pack_b_u_p_p_e X f i P Q c 2)) (decode_p (pack_b_u_p_p_e X f i P Q c 3)) (decode_p (pack_b_u_p_p_e X f i P Q c 4)) (pack_b_u_p_p_e X f i P Q c 5) = Phi X f i P Q c.
rewrite <- struct_b_u_p_p_e_0_eq (pack_b_u_p_p_e X f i P Q c) X f i P Q c (eqI set (pack_b_u_p_p_e X f i P Q c)).
prove Phi X (decode_b (pack_b_u_p_p_e X f i P Q c 1)) (decode_u (pack_b_u_p_p_e X f i P Q c 2)) (decode_p (pack_b_u_p_p_e X f i P Q c 3)) (decode_p (pack_b_u_p_p_e X f i P Q c 4)) (pack_b_u_p_p_e X f i P Q c 5) = Phi X f i P Q c.
rewrite <- struct_b_u_p_p_e_5_eq (pack_b_u_p_p_e X f i P Q c) X f i P Q c (eqI set (pack_b_u_p_p_e X f i P Q c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_u_p_p_e X f i P Q c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_u_p_p_e_1_eq (pack_b_u_p_p_e X f i P Q c) X f i P Q c (eqI set (pack_b_u_p_p_e X f i P Q c)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_u_p_p_e X f i P Q c 2) x = i x.
  apply eq_sym set.
  exact struct_b_u_p_p_e_2_eq (pack_b_u_p_p_e X f i P Q c) X f i P Q c (eqI set (pack_b_u_p_p_e X f i P Q c)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_b_u_p_p_e X f i P Q c 3) x <-> P x.
  rewrite <- struct_b_u_p_p_e_3_eq (pack_b_u_p_p_e X f i P Q c) X f i P Q c (eqI set (pack_b_u_p_p_e X f i P Q c)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_u_p_p_e X f i P Q c 4) x <-> Q x.
  rewrite <- struct_b_u_p_p_e_4_eq (pack_b_u_p_p_e X f i P Q c) X f i P Q c (eqI set (pack_b_u_p_p_e X f i P Q c)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_u_p_p_e.

Definition pack_b_u_p_e_e : set -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> set -> set -> set := fun X f i P c d => (X,encode_b X f,encode_u X i,encode_p X P,c,d).

Definition struct_b_u_p_e_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists i:set -> set, exists P:set -> prop, exists c:set, exists d:set, (forall x y :e X, f x y :e X) /\ (forall x :e X, i x :e X) /\ c :e X /\ d :e X /\ S = pack_b_u_p_e_e X f i P c d.

Theorem pack_b_u_p_e_e_ext : forall X, forall f f':set -> set -> set, forall i i':set -> set, forall P P':set -> prop, forall c, forall d,
 (forall x y :e X, f x y = f' x y) ->
 (forall x :e X, i x = i' x) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_u_p_e_e X f i P c d = pack_b_u_p_e_e X f' i' P' c d.
let X f f' i i' P P' c d. assume H1. assume H2. assume H3.
prove (X,encode_b X f,encode_u X i,encode_p X P,c,d) = (X,encode_b X f',encode_u X i',encode_p X P',c,d).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_b_u_p_e_e_0_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_u_p_e_e X f i P c d -> X = S 0.
let S X f i P c d. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_u X i,encode_p X P,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_u_p_e_e_1_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_u_p_e_e X f i P c d -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f i P c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_u X i,encode_p X P,c,d) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_u_p_e_e_2_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_u_p_e_e X f i P c d -> forall x :e X, i x = decode_u (S 2) x.
let S X f i P c d. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_b X f,encode_u X i,encode_p X P,c,d) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_b_u_p_e_e_3_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_u_p_e_e X f i P c d -> forall x :e X, P x = decode_p (S 3) x.
let S X f i P c d. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_u X i,encode_p X P,c,d) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_u_p_e_e_4_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_u_p_e_e X f i P c d -> c = S 4.
let S X f i P c d. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_u X i,encode_p X P,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_b_u_p_e_e_5_eq: forall S X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_u_p_e_e X f i P c d -> d = S 5.
let S X f i P c d. assume H1.
rewrite H1. prove d = (X,encode_b X f,encode_u X i,encode_p X P,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_u_p_e_e: forall X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, (forall x y :e X, f x y :e X) -> (forall x :e X, i x :e X) -> c :e X -> d :e X -> struct_b_u_p_e_e (pack_b_u_p_e_e X f i P c d).
let X f i P c d.
assume H1.
assume H2.
assume H4.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists i':set -> set, exists P':set -> prop, exists c':set, exists d':set,  (forall x y :e X', f' x y :e X') /\ (forall x :e X', i' x :e X') /\ c' :e X' /\ d' :e X' /\ pack_b_u_p_e_e X f i P c d = pack_b_u_p_e_e X' f' i' P' c' d'.
witness X. witness f. witness i. witness P. witness c. witness d.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_u_p_e_e_eta: forall S, struct_b_u_p_e_e S -> S = pack_b_u_p_e_e (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_p (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let i.
assume H3. apply H3. let P.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_u_p_e_e_0_eq S X f i P c d Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_u X (decode_u (S 2)),encode_p X (decode_p (S 3)),S 4,S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_u_p_e_e_1_eq S X f i P c d Heq.
}
rewrite <- L1.
claim L2: encode_u X i = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_b_u_p_e_e_2_eq S X f i P c d Heq.
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_u_p_e_e_3_eq S X f i P c d Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_b_u_p_e_e_4_eq S X f i P c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_b_u_p_e_e_5_eq S X f i P c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_u_p_e_e.

Variable A:SType.

Definition unpack_b_u_p_e_e : set -> (set -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_u (S 2)) (decode_p (S 3)) (S 4) (S 5).

Theorem unpack_b_u_p_e_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set) -> (set -> prop) -> set -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c, forall d,Phi X f i P c d = Phi X f' i' P' c d)
  ->
  forall X, forall f:set -> set -> set, forall i:set -> set, forall P:set -> prop, forall c:set, forall d:set, unpack_b_u_p_e_e (pack_b_u_p_e_e X f i P c d) Phi = Phi X f i P c d.
let Phi.
assume HPhi.
let X f i P c d.
prove Phi (pack_b_u_p_e_e X f i P c d 0) (decode_b (pack_b_u_p_e_e X f i P c d 1)) (decode_u (pack_b_u_p_e_e X f i P c d 2)) (decode_p (pack_b_u_p_e_e X f i P c d 3)) (pack_b_u_p_e_e X f i P c d 4) (pack_b_u_p_e_e X f i P c d 5) = Phi X f i P c d.
rewrite <- struct_b_u_p_e_e_0_eq (pack_b_u_p_e_e X f i P c d) X f i P c d (eqI set (pack_b_u_p_e_e X f i P c d)).
prove Phi X (decode_b (pack_b_u_p_e_e X f i P c d 1)) (decode_u (pack_b_u_p_e_e X f i P c d 2)) (decode_p (pack_b_u_p_e_e X f i P c d 3)) (pack_b_u_p_e_e X f i P c d 4) (pack_b_u_p_e_e X f i P c d 5) = Phi X f i P c d.
rewrite <- struct_b_u_p_e_e_4_eq (pack_b_u_p_e_e X f i P c d) X f i P c d (eqI set (pack_b_u_p_e_e X f i P c d)).
rewrite <- struct_b_u_p_e_e_5_eq (pack_b_u_p_e_e X f i P c d) X f i P c d (eqI set (pack_b_u_p_e_e X f i P c d)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_u_p_e_e X f i P c d 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_u_p_e_e_1_eq (pack_b_u_p_e_e X f i P c d) X f i P c d (eqI set (pack_b_u_p_e_e X f i P c d)) x Hx y Hy.
- let x. assume Hx.
  prove decode_u (pack_b_u_p_e_e X f i P c d 2) x = i x.
  apply eq_sym set.
  exact struct_b_u_p_e_e_2_eq (pack_b_u_p_e_e X f i P c d) X f i P c d (eqI set (pack_b_u_p_e_e X f i P c d)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_b_u_p_e_e X f i P c d 3) x <-> P x.
  rewrite <- struct_b_u_p_e_e_3_eq (pack_b_u_p_e_e X f i P c d) X f i P c d (eqI set (pack_b_u_p_e_e X f i P c d)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_u_p_e_e.

Definition pack_b_r_p_p_e : set -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> set := fun X f R P Q c => (X,encode_b X f,encode_r X R,encode_p X P,encode_p X Q,c).

Definition struct_b_r_p_p_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists Q:set -> prop, exists c:set, (forall x y :e X, f x y :e X) /\ c :e X /\ S = pack_b_r_p_p_e X f R P Q c.

Theorem pack_b_r_p_p_e_ext : forall X, forall f f':set -> set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall Q Q':set -> prop, forall c,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_b_r_p_p_e X f R P Q c = pack_b_r_p_p_e X f' R' P' Q' c.
let X f f' R R' P P' Q Q' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_b X f,encode_r X R,encode_p X P,encode_p X Q,c) = (X,encode_b X f',encode_r X R',encode_p X P',encode_p X Q',c).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_b_r_p_p_e_0_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_r_p_p_e X f R P Q c -> X = S 0.
let S X f R P Q c. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_r X R,encode_p X P,encode_p X Q,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_r_p_p_e_1_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_r_p_p_e X f R P Q c -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f R P Q c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_r X R,encode_p X P,encode_p X Q,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_r_p_p_e_2_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_r_p_p_e X f R P Q c -> forall x y :e X, R x y = decode_r (S 2) x y.
let S X f R P Q c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_r X R,encode_p X P,encode_p X Q,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_r_p_p_e_3_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_r_p_p_e X f R P Q c -> forall x :e X, P x = decode_p (S 3) x.
let S X f R P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_r X R,encode_p X P,encode_p X Q,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_r_p_p_e_4_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_r_p_p_e X f R P Q c -> forall x :e X, Q x = decode_p (S 4) x.
let S X f R P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_b X f,encode_r X R,encode_p X P,encode_p X Q,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem struct_b_r_p_p_e_5_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_b_r_p_p_e X f R P Q c -> c = S 5.
let S X f R P Q c. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_r X R,encode_p X P,encode_p X Q,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_r_p_p_e: forall X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, (forall x y :e X, f x y :e X) -> c :e X -> struct_b_r_p_p_e (pack_b_r_p_p_e X f R P Q c).
let X f R P Q c.
assume H1.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists Q':set -> prop, exists c':set,  (forall x y :e X', f' x y :e X') /\ c' :e X' /\ pack_b_r_p_p_e X f R P Q c = pack_b_r_p_p_e X' f' R' P' Q' c'.
witness X. witness f. witness R. witness P. witness Q. witness c.
apply andI.
apply andI.
exact H1.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_r_p_p_e_eta: forall S, struct_b_r_p_p_e S -> S = pack_b_r_p_p_e (S 0) (decode_b (S 1)) (decode_r (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let R.
assume H3. apply H3. let P.
assume H4. apply H4. let Q.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_r_p_p_e_0_eq S X f R P Q c Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_r X (decode_r (S 2)),encode_p X (decode_p (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_r_p_p_e_1_eq S X f R P Q c Heq.
}
rewrite <- L1.
claim L2: encode_r X R = encode_r X (decode_r (S 2)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_r_p_p_e_2_eq S X f R P Q c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_r_p_p_e_3_eq S X f R P Q c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: encode_p X Q = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_r_p_p_e_4_eq S X f R P Q c Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_b_r_p_p_e_5_eq S X f R P Q c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_r_p_p_e.

Variable A:SType.

Definition unpack_b_r_p_p_e : set -> (set -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_r (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_b_r_p_p_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) ->  forall c,Phi X f R P Q c = Phi X f' R' P' Q' c)
  ->
  forall X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, unpack_b_r_p_p_e (pack_b_r_p_p_e X f R P Q c) Phi = Phi X f R P Q c.
let Phi.
assume HPhi.
let X f R P Q c.
prove Phi (pack_b_r_p_p_e X f R P Q c 0) (decode_b (pack_b_r_p_p_e X f R P Q c 1)) (decode_r (pack_b_r_p_p_e X f R P Q c 2)) (decode_p (pack_b_r_p_p_e X f R P Q c 3)) (decode_p (pack_b_r_p_p_e X f R P Q c 4)) (pack_b_r_p_p_e X f R P Q c 5) = Phi X f R P Q c.
rewrite <- struct_b_r_p_p_e_0_eq (pack_b_r_p_p_e X f R P Q c) X f R P Q c (eqI set (pack_b_r_p_p_e X f R P Q c)).
prove Phi X (decode_b (pack_b_r_p_p_e X f R P Q c 1)) (decode_r (pack_b_r_p_p_e X f R P Q c 2)) (decode_p (pack_b_r_p_p_e X f R P Q c 3)) (decode_p (pack_b_r_p_p_e X f R P Q c 4)) (pack_b_r_p_p_e X f R P Q c 5) = Phi X f R P Q c.
rewrite <- struct_b_r_p_p_e_5_eq (pack_b_r_p_p_e X f R P Q c) X f R P Q c (eqI set (pack_b_r_p_p_e X f R P Q c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_r_p_p_e X f R P Q c 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_r_p_p_e_1_eq (pack_b_r_p_p_e X f R P Q c) X f R P Q c (eqI set (pack_b_r_p_p_e X f R P Q c)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_r_p_p_e X f R P Q c 2) x y <-> R x y.
  rewrite <- struct_b_r_p_p_e_2_eq (pack_b_r_p_p_e X f R P Q c) X f R P Q c (eqI set (pack_b_r_p_p_e X f R P Q c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_r_p_p_e X f R P Q c 3) x <-> P x.
  rewrite <- struct_b_r_p_p_e_3_eq (pack_b_r_p_p_e X f R P Q c) X f R P Q c (eqI set (pack_b_r_p_p_e X f R P Q c)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_r_p_p_e X f R P Q c 4) x <-> Q x.
  rewrite <- struct_b_r_p_p_e_4_eq (pack_b_r_p_p_e X f R P Q c) X f R P Q c (eqI set (pack_b_r_p_p_e X f R P Q c)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_r_p_p_e.

Definition pack_b_r_p_e_e : set -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> set := fun X f R P c d => (X,encode_b X f,encode_r X R,encode_p X P,c,d).

Definition struct_b_r_p_e_e : set -> prop := fun S => exists X:set, exists f:set -> set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists c:set, exists d:set, (forall x y :e X, f x y :e X) /\ c :e X /\ d :e X /\ S = pack_b_r_p_e_e X f R P c d.

Theorem pack_b_r_p_e_e_ext : forall X, forall f f':set -> set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall c, forall d,
 (forall x y :e X, f x y = f' x y) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_b_r_p_e_e X f R P c d = pack_b_r_p_e_e X f' R' P' c d.
let X f f' R R' P P' c d. assume H1. assume H2. assume H3.
prove (X,encode_b X f,encode_r X R,encode_p X P,c,d) = (X,encode_b X f',encode_r X R',encode_p X P',c,d).
claim L1: encode_b X f = encode_b X f'.
{ apply encode_b_ext. exact H1. }
rewrite <- L1.
claim L2: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_b_r_p_e_e_0_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_r_p_e_e X f R P c d -> X = S 0.
let S X f R P c d. assume H1. rewrite H1.
prove X = (X,encode_b X f,encode_r X R,encode_p X P,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_b_r_p_e_e_1_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_r_p_e_e X f R P c d -> forall x y :e X, f x y = decode_b (S 1) x y.
let S X f R P c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove f x y = decode_b ((X,encode_b X f,encode_r X R,encode_p X P,c,d) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym set. exact decode_encode_b X f x Hx y Hy.
Qed.

Theorem struct_b_r_p_e_e_2_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_r_p_e_e X f R P c d -> forall x y :e X, R x y = decode_r (S 2) x y.
let S X f R P c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_b X f,encode_r X R,encode_p X P,c,d) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_b_r_p_e_e_3_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_r_p_e_e X f R P c d -> forall x :e X, P x = decode_p (S 3) x.
let S X f R P c d. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_b X f,encode_r X R,encode_p X P,c,d) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_b_r_p_e_e_4_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_r_p_e_e X f R P c d -> c = S 4.
let S X f R P c d. assume H1.
rewrite H1. prove c = (X,encode_b X f,encode_r X R,encode_p X P,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_b_r_p_e_e_5_eq: forall S X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_b_r_p_e_e X f R P c d -> d = S 5.
let S X f R P c d. assume H1.
rewrite H1. prove d = (X,encode_b X f,encode_r X R,encode_p X P,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_b_r_p_e_e: forall X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, (forall x y :e X, f x y :e X) -> c :e X -> d :e X -> struct_b_r_p_e_e (pack_b_r_p_e_e X f R P c d).
let X f R P c d.
assume H1.
assume H4.
assume H5.
prove exists X':set, exists f':set -> set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists c':set, exists d':set,  (forall x y :e X', f' x y :e X') /\ c' :e X' /\ d' :e X' /\ pack_b_r_p_e_e X f R P c d = pack_b_r_p_e_e X' f' R' P' c' d'.
witness X. witness f. witness R. witness P. witness c. witness d.
apply andI.
apply andI.
apply andI.
exact H1.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_b_r_p_e_e_eta: forall S, struct_b_r_p_e_e S -> S = pack_b_r_p_e_e (S 0) (decode_b (S 1)) (decode_r (S 2)) (decode_p (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let f.
assume H2. apply H2. let R.
assume H3. apply H3. let P.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_b_r_p_e_e_0_eq S X f R P c d Heq.
prove S = (X,encode_b X (decode_b (S 1)),encode_r X (decode_r (S 2)),encode_p X (decode_p (S 3)),S 4,S 5).
claim L1: encode_b X f = encode_b X (decode_b (S 1)).
{ apply encode_b_ext.
  exact struct_b_r_p_e_e_1_eq S X f R P c d Heq.
}
rewrite <- L1.
claim L2: encode_r X R = encode_r X (decode_r (S 2)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_b_r_p_e_e_2_eq S X f R P c d Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_b_r_p_e_e_3_eq S X f R P c d Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_b_r_p_e_e_4_eq S X f R P c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_b_r_p_e_e_5_eq S X f R P c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_b_r_p_e_e.

Variable A:SType.

Definition unpack_b_r_p_e_e : set -> (set -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_b (S 1)) (decode_r (S 2)) (decode_p (S 3)) (S 4) (S 5).

Theorem unpack_b_r_p_e_e_eq : forall Phi:set -> (set -> set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> A,
  (forall X, forall f f':set -> set -> set, (forall x y :e X, f x y = f' x y) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c, forall d,Phi X f R P c d = Phi X f' R' P' c d)
  ->
  forall X, forall f:set -> set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, unpack_b_r_p_e_e (pack_b_r_p_e_e X f R P c d) Phi = Phi X f R P c d.
let Phi.
assume HPhi.
let X f R P c d.
prove Phi (pack_b_r_p_e_e X f R P c d 0) (decode_b (pack_b_r_p_e_e X f R P c d 1)) (decode_r (pack_b_r_p_e_e X f R P c d 2)) (decode_p (pack_b_r_p_e_e X f R P c d 3)) (pack_b_r_p_e_e X f R P c d 4) (pack_b_r_p_e_e X f R P c d 5) = Phi X f R P c d.
rewrite <- struct_b_r_p_e_e_0_eq (pack_b_r_p_e_e X f R P c d) X f R P c d (eqI set (pack_b_r_p_e_e X f R P c d)).
prove Phi X (decode_b (pack_b_r_p_e_e X f R P c d 1)) (decode_r (pack_b_r_p_e_e X f R P c d 2)) (decode_p (pack_b_r_p_e_e X f R P c d 3)) (pack_b_r_p_e_e X f R P c d 4) (pack_b_r_p_e_e X f R P c d 5) = Phi X f R P c d.
rewrite <- struct_b_r_p_e_e_4_eq (pack_b_r_p_e_e X f R P c d) X f R P c d (eqI set (pack_b_r_p_e_e X f R P c d)).
rewrite <- struct_b_r_p_e_e_5_eq (pack_b_r_p_e_e X f R P c d) X f R P c d (eqI set (pack_b_r_p_e_e X f R P c d)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_b (pack_b_r_p_e_e X f R P c d 1) x y = f x y.
  apply eq_sym set.
  exact struct_b_r_p_e_e_1_eq (pack_b_r_p_e_e X f R P c d) X f R P c d (eqI set (pack_b_r_p_e_e X f R P c d)) x Hx y Hy.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_b_r_p_e_e X f R P c d 2) x y <-> R x y.
  rewrite <- struct_b_r_p_e_e_2_eq (pack_b_r_p_e_e X f R P c d) X f R P c d (eqI set (pack_b_r_p_e_e X f R P c d)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_b_r_p_e_e X f R P c d 3) x <-> P x.
  rewrite <- struct_b_r_p_e_e_3_eq (pack_b_r_p_e_e X f R P c d) X f R P c d (eqI set (pack_b_r_p_e_e X f R P c d)) x Hx.
  apply iff_refl.
Qed.

End unpack_b_r_p_e_e.

Definition pack_u_u_r_r_p : set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> set := fun X i j R T P => (X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,encode_p X P).

Definition struct_u_u_r_r_p : set -> prop := fun S => exists X:set, exists i:set -> set, exists j:set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists P:set -> prop, (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ S = pack_u_u_r_r_p X i j R T P.

Theorem pack_u_u_r_r_p_ext : forall X, forall i i':set -> set, forall j j':set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall P P':set -> prop,
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_u_u_r_r_p X i j R T P = pack_u_u_r_r_p X i' j' R' T' P'.
let X i i' j j' R R' T T' P P'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,encode_p X P) = (X,encode_u X i',encode_u X j',encode_r X R',encode_r X T',encode_p X P').
claim L1: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_u_u_r_r_p_0_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_u_u_r_r_p X i j R T P -> X = S 0.
let S X i j R T P. assume H1. rewrite H1.
prove X = (X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,encode_p X P) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_u_u_r_r_p_1_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_u_u_r_r_p X i j R T P -> forall x :e X, i x = decode_u (S 1) x.
let S X i j R T P. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,encode_p X P) 1) x.
rewrite tuple_6_1_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_u_u_r_r_p_2_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_u_u_r_r_p X i j R T P -> forall x :e X, j x = decode_u (S 2) x.
let S X i j R T P. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,encode_p X P) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_u_u_r_r_p_3_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_u_u_r_r_p X i j R T P -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X i j R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,encode_p X P) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_u_u_r_r_p_4_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_u_u_r_r_p X i j R T P -> forall x y :e X, T x y = decode_r (S 4) x y.
let S X i j R T P. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,encode_p X P) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_u_u_r_r_p_5_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, S = pack_u_u_r_r_p X i j R T P -> forall x :e X, P x = decode_p (S 5) x.
let S X i j R T P. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,encode_p X P) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem pack_struct_u_u_r_r_p: forall X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> struct_u_u_r_r_p (pack_u_u_r_r_p X i j R T P).
let X i j R T P.
assume H1.
assume H2.
prove exists X':set, exists i':set -> set, exists j':set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists P':set -> prop,  (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ pack_u_u_r_r_p X i j R T P = pack_u_u_r_r_p X' i' j' R' T' P'.
witness X. witness i. witness j. witness R. witness T. witness P.
apply andI.
apply andI.
exact H1.
exact H2.
apply eqI set.
Qed.

Theorem struct_u_u_r_r_p_eta: forall S, struct_u_u_r_r_p S -> S = pack_u_u_r_r_p (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let i.
assume H2. apply H2. let j.
assume H3. apply H3. let R.
assume H4. apply H4. let T.
assume H5. apply H5. let P.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_u_u_r_r_p_0_eq S X i j R T P Heq.
prove S = (X,encode_u X (decode_u (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_r X (decode_r (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_u X i = encode_u X (decode_u (S 1)).
{ apply encode_u_ext.
  exact struct_u_u_r_r_p_1_eq S X i j R T P Heq.
}
rewrite <- L1.
claim L2: encode_u X j = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_u_u_r_r_p_2_eq S X i j R T P Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_u_u_r_r_p_3_eq S X i j R T P Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_r X T = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_u_u_r_r_p_4_eq S X i j R T P Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L4.
claim L5: encode_p X P = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_u_u_r_r_p_5_eq S X i j R T P Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_u_u_r_r_p.

Variable A:SType.

Definition unpack_u_u_r_r_p : set -> (set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (decode_p (S 5)).

Theorem unpack_u_u_r_r_p_eq : forall Phi:set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> A,
  (forall X, forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> Phi X i j R T P = Phi X i' j' R' T' P')
  ->
  forall X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, unpack_u_u_r_r_p (pack_u_u_r_r_p X i j R T P) Phi = Phi X i j R T P.
let Phi.
assume HPhi.
let X i j R T P.
prove Phi (pack_u_u_r_r_p X i j R T P 0) (decode_u (pack_u_u_r_r_p X i j R T P 1)) (decode_u (pack_u_u_r_r_p X i j R T P 2)) (decode_r (pack_u_u_r_r_p X i j R T P 3)) (decode_r (pack_u_u_r_r_p X i j R T P 4)) (decode_p (pack_u_u_r_r_p X i j R T P 5)) = Phi X i j R T P.
rewrite <- struct_u_u_r_r_p_0_eq (pack_u_u_r_r_p X i j R T P) X i j R T P (eqI set (pack_u_u_r_r_p X i j R T P)).
prove Phi X (decode_u (pack_u_u_r_r_p X i j R T P 1)) (decode_u (pack_u_u_r_r_p X i j R T P 2)) (decode_r (pack_u_u_r_r_p X i j R T P 3)) (decode_r (pack_u_u_r_r_p X i j R T P 4)) (decode_p (pack_u_u_r_r_p X i j R T P 5)) = Phi X i j R T P.
apply HPhi.
- let x. assume Hx.
  prove decode_u (pack_u_u_r_r_p X i j R T P 1) x = i x.
  apply eq_sym set.
  exact struct_u_u_r_r_p_1_eq (pack_u_u_r_r_p X i j R T P) X i j R T P (eqI set (pack_u_u_r_r_p X i j R T P)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_u_u_r_r_p X i j R T P 2) x = j x.
  apply eq_sym set.
  exact struct_u_u_r_r_p_2_eq (pack_u_u_r_r_p X i j R T P) X i j R T P (eqI set (pack_u_u_r_r_p X i j R T P)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_u_u_r_r_p X i j R T P 3) x y <-> R x y.
  rewrite <- struct_u_u_r_r_p_3_eq (pack_u_u_r_r_p X i j R T P) X i j R T P (eqI set (pack_u_u_r_r_p X i j R T P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_u_u_r_r_p X i j R T P 4) x y <-> T x y.
  rewrite <- struct_u_u_r_r_p_4_eq (pack_u_u_r_r_p X i j R T P) X i j R T P (eqI set (pack_u_u_r_r_p X i j R T P)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_u_u_r_r_p X i j R T P 5) x <-> P x.
  rewrite <- struct_u_u_r_r_p_5_eq (pack_u_u_r_r_p X i j R T P) X i j R T P (eqI set (pack_u_u_r_r_p X i j R T P)) x Hx.
  apply iff_refl.
Qed.

End unpack_u_u_r_r_p.

Definition pack_u_u_r_r_e : set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> set := fun X i j R T c => (X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,c).

Definition struct_u_u_r_r_e : set -> prop := fun S => exists X:set, exists i:set -> set, exists j:set -> set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists c:set, (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ c :e X /\ S = pack_u_u_r_r_e X i j R T c.

Theorem pack_u_u_r_r_e_ext : forall X, forall i i':set -> set, forall j j':set -> set, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall c,
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 pack_u_u_r_r_e X i j R T c = pack_u_u_r_r_e X i' j' R' T' c.
let X i i' j j' R R' T T' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,c) = (X,encode_u X i',encode_u X j',encode_r X R',encode_r X T',c).
claim L1: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_u_u_r_r_e_0_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_u_u_r_r_e X i j R T c -> X = S 0.
let S X i j R T c. assume H1. rewrite H1.
prove X = (X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_u_u_r_r_e_1_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_u_u_r_r_e X i j R T c -> forall x :e X, i x = decode_u (S 1) x.
let S X i j R T c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,c) 1) x.
rewrite tuple_6_1_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_u_u_r_r_e_2_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_u_u_r_r_e X i j R T c -> forall x :e X, j x = decode_u (S 2) x.
let S X i j R T c. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,c) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_u_u_r_r_e_3_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_u_u_r_r_e X i j R T c -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X i j R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_u_u_r_r_e_4_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_u_u_r_r_e X i j R T c -> forall x y :e X, T x y = decode_r (S 4) x y.
let S X i j R T c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,c) 4) x y.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_u_u_r_r_e_5_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, S = pack_u_u_r_r_e X i j R T c -> c = S 5.
let S X i j R T c. assume H1.
rewrite H1. prove c = (X,encode_u X i,encode_u X j,encode_r X R,encode_r X T,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_u_u_r_r_e: forall X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> c :e X -> struct_u_u_r_r_e (pack_u_u_r_r_e X i j R T c).
let X i j R T c.
assume H1.
assume H2.
assume H5.
prove exists X':set, exists i':set -> set, exists j':set -> set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists c':set,  (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ c' :e X' /\ pack_u_u_r_r_e X i j R T c = pack_u_u_r_r_e X' i' j' R' T' c'.
witness X. witness i. witness j. witness R. witness T. witness c.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_u_u_r_r_e_eta: forall S, struct_u_u_r_r_e S -> S = pack_u_u_r_r_e (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let i.
assume H2. apply H2. let j.
assume H3. apply H3. let R.
assume H4. apply H4. let T.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_u_u_r_r_e_0_eq S X i j R T c Heq.
prove S = (X,encode_u X (decode_u (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_r X (decode_r (S 4)),S 5).
claim L1: encode_u X i = encode_u X (decode_u (S 1)).
{ apply encode_u_ext.
  exact struct_u_u_r_r_e_1_eq S X i j R T c Heq.
}
rewrite <- L1.
claim L2: encode_u X j = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_u_u_r_r_e_2_eq S X i j R T c Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_u_u_r_r_e_3_eq S X i j R T c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_r X T = encode_r X (decode_r (S 4)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_u_u_r_r_e_4_eq S X i j R T c Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_u_u_r_r_e_5_eq S X i j R T c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_u_u_r_r_e.

Variable A:SType.

Definition unpack_u_u_r_r_e : set -> (set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_r (S 4)) (S 5).

Theorem unpack_u_u_r_r_e_eq : forall Phi:set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> set -> prop) -> set -> A,
  (forall X, forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall c,Phi X i j R T c = Phi X i' j' R' T' c)
  ->
  forall X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall T:set -> set -> prop, forall c:set, unpack_u_u_r_r_e (pack_u_u_r_r_e X i j R T c) Phi = Phi X i j R T c.
let Phi.
assume HPhi.
let X i j R T c.
prove Phi (pack_u_u_r_r_e X i j R T c 0) (decode_u (pack_u_u_r_r_e X i j R T c 1)) (decode_u (pack_u_u_r_r_e X i j R T c 2)) (decode_r (pack_u_u_r_r_e X i j R T c 3)) (decode_r (pack_u_u_r_r_e X i j R T c 4)) (pack_u_u_r_r_e X i j R T c 5) = Phi X i j R T c.
rewrite <- struct_u_u_r_r_e_0_eq (pack_u_u_r_r_e X i j R T c) X i j R T c (eqI set (pack_u_u_r_r_e X i j R T c)).
prove Phi X (decode_u (pack_u_u_r_r_e X i j R T c 1)) (decode_u (pack_u_u_r_r_e X i j R T c 2)) (decode_r (pack_u_u_r_r_e X i j R T c 3)) (decode_r (pack_u_u_r_r_e X i j R T c 4)) (pack_u_u_r_r_e X i j R T c 5) = Phi X i j R T c.
rewrite <- struct_u_u_r_r_e_5_eq (pack_u_u_r_r_e X i j R T c) X i j R T c (eqI set (pack_u_u_r_r_e X i j R T c)).
apply HPhi.
- let x. assume Hx.
  prove decode_u (pack_u_u_r_r_e X i j R T c 1) x = i x.
  apply eq_sym set.
  exact struct_u_u_r_r_e_1_eq (pack_u_u_r_r_e X i j R T c) X i j R T c (eqI set (pack_u_u_r_r_e X i j R T c)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_u_u_r_r_e X i j R T c 2) x = j x.
  apply eq_sym set.
  exact struct_u_u_r_r_e_2_eq (pack_u_u_r_r_e X i j R T c) X i j R T c (eqI set (pack_u_u_r_r_e X i j R T c)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_u_u_r_r_e X i j R T c 3) x y <-> R x y.
  rewrite <- struct_u_u_r_r_e_3_eq (pack_u_u_r_r_e X i j R T c) X i j R T c (eqI set (pack_u_u_r_r_e X i j R T c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_u_u_r_r_e X i j R T c 4) x y <-> T x y.
  rewrite <- struct_u_u_r_r_e_4_eq (pack_u_u_r_r_e X i j R T c) X i j R T c (eqI set (pack_u_u_r_r_e X i j R T c)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_u_u_r_r_e.

Definition pack_u_u_r_p_p : set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set := fun X i j R P Q => (X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,encode_p X Q).

Definition struct_u_u_r_p_p : set -> prop := fun S => exists X:set, exists i:set -> set, exists j:set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists Q:set -> prop, (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ S = pack_u_u_r_p_p X i j R P Q.

Theorem pack_u_u_r_p_p_ext : forall X, forall i i':set -> set, forall j j':set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall Q Q':set -> prop,
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_u_u_r_p_p X i j R P Q = pack_u_u_r_p_p X i' j' R' P' Q'.
let X i i' j j' R R' P P' Q Q'. assume H1. assume H2. assume H3. assume H4. assume H5.
prove (X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,encode_p X Q) = (X,encode_u X i',encode_u X j',encode_r X R',encode_p X P',encode_p X Q').
claim L1: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
claim L5: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H5. }
rewrite <- L5.
apply eqI set.
Qed.

Theorem struct_u_u_r_p_p_0_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_u_u_r_p_p X i j R P Q -> X = S 0.
let S X i j R P Q. assume H1. rewrite H1.
prove X = (X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,encode_p X Q) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_u_u_r_p_p_1_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_u_u_r_p_p X i j R P Q -> forall x :e X, i x = decode_u (S 1) x.
let S X i j R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,encode_p X Q) 1) x.
rewrite tuple_6_1_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_u_u_r_p_p_2_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_u_u_r_p_p X i j R P Q -> forall x :e X, j x = decode_u (S 2) x.
let S X i j R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,encode_p X Q) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_u_u_r_p_p_3_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_u_u_r_p_p X i j R P Q -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X i j R P Q. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,encode_p X Q) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_u_u_r_p_p_4_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_u_u_r_p_p X i j R P Q -> forall x :e X, P x = decode_p (S 4) x.
let S X i j R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,encode_p X Q) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_u_u_r_p_p_5_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, S = pack_u_u_r_p_p X i j R P Q -> forall x :e X, Q x = decode_p (S 5) x.
let S X i j R P Q. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,encode_p X Q) 5) x.
rewrite tuple_6_5_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem pack_struct_u_u_r_p_p: forall X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> struct_u_u_r_p_p (pack_u_u_r_p_p X i j R P Q).
let X i j R P Q.
assume H1.
assume H2.
prove exists X':set, exists i':set -> set, exists j':set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists Q':set -> prop,  (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ pack_u_u_r_p_p X i j R P Q = pack_u_u_r_p_p X' i' j' R' P' Q'.
witness X. witness i. witness j. witness R. witness P. witness Q.
apply andI.
apply andI.
exact H1.
exact H2.
apply eqI set.
Qed.

Theorem struct_u_u_r_p_p_eta: forall S, struct_u_u_r_p_p S -> S = pack_u_u_r_p_p (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (decode_p (S 5)).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let i.
assume H2. apply H2. let j.
assume H3. apply H3. let R.
assume H4. apply H4. let P.
assume H5. apply H5. let Q.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_u_u_r_p_p_0_eq S X i j R P Q Heq.
prove S = (X,encode_u X (decode_u (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_p X (decode_p (S 4)),encode_p X (decode_p (S 5))).
claim L1: encode_u X i = encode_u X (decode_u (S 1)).
{ apply encode_u_ext.
  exact struct_u_u_r_p_p_1_eq S X i j R P Q Heq.
}
rewrite <- L1.
claim L2: encode_u X j = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_u_u_r_p_p_2_eq S X i j R P Q Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_u_u_r_p_p_3_eq S X i j R P Q Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_u_u_r_p_p_4_eq S X i j R P Q Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: encode_p X Q = encode_p X (decode_p (S 5)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_u_u_r_p_p_5_eq S X i j R P Q Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L5.
exact Heq.
Qed.

Section unpack_u_u_r_p_p.

Variable A:SType.

Definition unpack_u_u_r_p_p : set -> (set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (decode_p (S 5)).

Theorem unpack_u_u_r_p_p_eq : forall Phi:set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> A,
  (forall X, forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) -> Phi X i j R P Q = Phi X i' j' R' P' Q')
  ->
  forall X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, unpack_u_u_r_p_p (pack_u_u_r_p_p X i j R P Q) Phi = Phi X i j R P Q.
let Phi.
assume HPhi.
let X i j R P Q.
prove Phi (pack_u_u_r_p_p X i j R P Q 0) (decode_u (pack_u_u_r_p_p X i j R P Q 1)) (decode_u (pack_u_u_r_p_p X i j R P Q 2)) (decode_r (pack_u_u_r_p_p X i j R P Q 3)) (decode_p (pack_u_u_r_p_p X i j R P Q 4)) (decode_p (pack_u_u_r_p_p X i j R P Q 5)) = Phi X i j R P Q.
rewrite <- struct_u_u_r_p_p_0_eq (pack_u_u_r_p_p X i j R P Q) X i j R P Q (eqI set (pack_u_u_r_p_p X i j R P Q)).
prove Phi X (decode_u (pack_u_u_r_p_p X i j R P Q 1)) (decode_u (pack_u_u_r_p_p X i j R P Q 2)) (decode_r (pack_u_u_r_p_p X i j R P Q 3)) (decode_p (pack_u_u_r_p_p X i j R P Q 4)) (decode_p (pack_u_u_r_p_p X i j R P Q 5)) = Phi X i j R P Q.
apply HPhi.
- let x. assume Hx.
  prove decode_u (pack_u_u_r_p_p X i j R P Q 1) x = i x.
  apply eq_sym set.
  exact struct_u_u_r_p_p_1_eq (pack_u_u_r_p_p X i j R P Q) X i j R P Q (eqI set (pack_u_u_r_p_p X i j R P Q)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_u_u_r_p_p X i j R P Q 2) x = j x.
  apply eq_sym set.
  exact struct_u_u_r_p_p_2_eq (pack_u_u_r_p_p X i j R P Q) X i j R P Q (eqI set (pack_u_u_r_p_p X i j R P Q)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_u_u_r_p_p X i j R P Q 3) x y <-> R x y.
  rewrite <- struct_u_u_r_p_p_3_eq (pack_u_u_r_p_p X i j R P Q) X i j R P Q (eqI set (pack_u_u_r_p_p X i j R P Q)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_u_u_r_p_p X i j R P Q 4) x <-> P x.
  rewrite <- struct_u_u_r_p_p_4_eq (pack_u_u_r_p_p X i j R P Q) X i j R P Q (eqI set (pack_u_u_r_p_p X i j R P Q)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_u_u_r_p_p X i j R P Q 5) x <-> Q x.
  rewrite <- struct_u_u_r_p_p_5_eq (pack_u_u_r_p_p X i j R P Q) X i j R P Q (eqI set (pack_u_u_r_p_p X i j R P Q)) x Hx.
  apply iff_refl.
Qed.

End unpack_u_u_r_p_p.

Definition pack_u_u_r_p_e : set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> set := fun X i j R P c => (X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,c).

Definition struct_u_u_r_p_e : set -> prop := fun S => exists X:set, exists i:set -> set, exists j:set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists c:set, (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ c :e X /\ S = pack_u_u_r_p_e X i j R P c.

Theorem pack_u_u_r_p_e_ext : forall X, forall i i':set -> set, forall j j':set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall c,
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_u_u_r_p_e X i j R P c = pack_u_u_r_p_e X i' j' R' P' c.
let X i i' j j' R R' P P' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,c) = (X,encode_u X i',encode_u X j',encode_r X R',encode_p X P',c).
claim L1: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_u_u_r_p_e_0_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_u_u_r_p_e X i j R P c -> X = S 0.
let S X i j R P c. assume H1. rewrite H1.
prove X = (X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_u_u_r_p_e_1_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_u_u_r_p_e X i j R P c -> forall x :e X, i x = decode_u (S 1) x.
let S X i j R P c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,c) 1) x.
rewrite tuple_6_1_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_u_u_r_p_e_2_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_u_u_r_p_e X i j R P c -> forall x :e X, j x = decode_u (S 2) x.
let S X i j R P c. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,c) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_u_u_r_p_e_3_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_u_u_r_p_e X i j R P c -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X i j R P c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,c) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_u_u_r_p_e_4_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_u_u_r_p_e X i j R P c -> forall x :e X, P x = decode_p (S 4) x.
let S X i j R P c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_u_u_r_p_e_5_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, S = pack_u_u_r_p_e X i j R P c -> c = S 5.
let S X i j R P c. assume H1.
rewrite H1. prove c = (X,encode_u X i,encode_u X j,encode_r X R,encode_p X P,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_u_u_r_p_e: forall X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> c :e X -> struct_u_u_r_p_e (pack_u_u_r_p_e X i j R P c).
let X i j R P c.
assume H1.
assume H2.
assume H5.
prove exists X':set, exists i':set -> set, exists j':set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists c':set,  (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ c' :e X' /\ pack_u_u_r_p_e X i j R P c = pack_u_u_r_p_e X' i' j' R' P' c'.
witness X. witness i. witness j. witness R. witness P. witness c.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_u_u_r_p_e_eta: forall S, struct_u_u_r_p_e S -> S = pack_u_u_r_p_e (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let i.
assume H2. apply H2. let j.
assume H3. apply H3. let R.
assume H4. apply H4. let P.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_u_u_r_p_e_0_eq S X i j R P c Heq.
prove S = (X,encode_u X (decode_u (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_u X i = encode_u X (decode_u (S 1)).
{ apply encode_u_ext.
  exact struct_u_u_r_p_e_1_eq S X i j R P c Heq.
}
rewrite <- L1.
claim L2: encode_u X j = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_u_u_r_p_e_2_eq S X i j R P c Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_u_u_r_p_e_3_eq S X i j R P c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: encode_p X P = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_u_u_r_p_e_4_eq S X i j R P c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_u_u_r_p_e_5_eq S X i j R P c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_u_u_r_p_e.

Variable A:SType.

Definition unpack_u_u_r_p_e : set -> (set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_r (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_u_u_r_p_e_eq : forall Phi:set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c,Phi X i j R P c = Phi X i' j' R' P' c)
  ->
  forall X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, unpack_u_u_r_p_e (pack_u_u_r_p_e X i j R P c) Phi = Phi X i j R P c.
let Phi.
assume HPhi.
let X i j R P c.
prove Phi (pack_u_u_r_p_e X i j R P c 0) (decode_u (pack_u_u_r_p_e X i j R P c 1)) (decode_u (pack_u_u_r_p_e X i j R P c 2)) (decode_r (pack_u_u_r_p_e X i j R P c 3)) (decode_p (pack_u_u_r_p_e X i j R P c 4)) (pack_u_u_r_p_e X i j R P c 5) = Phi X i j R P c.
rewrite <- struct_u_u_r_p_e_0_eq (pack_u_u_r_p_e X i j R P c) X i j R P c (eqI set (pack_u_u_r_p_e X i j R P c)).
prove Phi X (decode_u (pack_u_u_r_p_e X i j R P c 1)) (decode_u (pack_u_u_r_p_e X i j R P c 2)) (decode_r (pack_u_u_r_p_e X i j R P c 3)) (decode_p (pack_u_u_r_p_e X i j R P c 4)) (pack_u_u_r_p_e X i j R P c 5) = Phi X i j R P c.
rewrite <- struct_u_u_r_p_e_5_eq (pack_u_u_r_p_e X i j R P c) X i j R P c (eqI set (pack_u_u_r_p_e X i j R P c)).
apply HPhi.
- let x. assume Hx.
  prove decode_u (pack_u_u_r_p_e X i j R P c 1) x = i x.
  apply eq_sym set.
  exact struct_u_u_r_p_e_1_eq (pack_u_u_r_p_e X i j R P c) X i j R P c (eqI set (pack_u_u_r_p_e X i j R P c)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_u_u_r_p_e X i j R P c 2) x = j x.
  apply eq_sym set.
  exact struct_u_u_r_p_e_2_eq (pack_u_u_r_p_e X i j R P c) X i j R P c (eqI set (pack_u_u_r_p_e X i j R P c)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_u_u_r_p_e X i j R P c 3) x y <-> R x y.
  rewrite <- struct_u_u_r_p_e_3_eq (pack_u_u_r_p_e X i j R P c) X i j R P c (eqI set (pack_u_u_r_p_e X i j R P c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_u_u_r_p_e X i j R P c 4) x <-> P x.
  rewrite <- struct_u_u_r_p_e_4_eq (pack_u_u_r_p_e X i j R P c) X i j R P c (eqI set (pack_u_u_r_p_e X i j R P c)) x Hx.
  apply iff_refl.
Qed.

End unpack_u_u_r_p_e.

Definition pack_u_u_r_e_e : set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> set -> set := fun X i j R c d => (X,encode_u X i,encode_u X j,encode_r X R,c,d).

Definition struct_u_u_r_e_e : set -> prop := fun S => exists X:set, exists i:set -> set, exists j:set -> set, exists R:set -> set -> prop, exists c:set, exists d:set, (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ c :e X /\ d :e X /\ S = pack_u_u_r_e_e X i j R c d.

Theorem pack_u_u_r_e_e_ext : forall X, forall i i':set -> set, forall j j':set -> set, forall R R':set -> set -> prop, forall c, forall d,
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 pack_u_u_r_e_e X i j R c d = pack_u_u_r_e_e X i' j' R' c d.
let X i i' j j' R R' c d. assume H1. assume H2. assume H3.
prove (X,encode_u X i,encode_u X j,encode_r X R,c,d) = (X,encode_u X i',encode_u X j',encode_r X R',c,d).
claim L1: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_u_u_r_e_e_0_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_u_u_r_e_e X i j R c d -> X = S 0.
let S X i j R c d. assume H1. rewrite H1.
prove X = (X,encode_u X i,encode_u X j,encode_r X R,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_u_u_r_e_e_1_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_u_u_r_e_e X i j R c d -> forall x :e X, i x = decode_u (S 1) x.
let S X i j R c d. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_u X i,encode_u X j,encode_r X R,c,d) 1) x.
rewrite tuple_6_1_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_u_u_r_e_e_2_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_u_u_r_e_e X i j R c d -> forall x :e X, j x = decode_u (S 2) x.
let S X i j R c d. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_u X i,encode_u X j,encode_r X R,c,d) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_u_u_r_e_e_3_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_u_u_r_e_e X i j R c d -> forall x y :e X, R x y = decode_r (S 3) x y.
let S X i j R c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_u X i,encode_u X j,encode_r X R,c,d) 3) x y.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_u_u_r_e_e_4_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_u_u_r_e_e X i j R c d -> c = S 4.
let S X i j R c d. assume H1.
rewrite H1. prove c = (X,encode_u X i,encode_u X j,encode_r X R,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_u_u_r_e_e_5_eq: forall S X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, S = pack_u_u_r_e_e X i j R c d -> d = S 5.
let S X i j R c d. assume H1.
rewrite H1. prove d = (X,encode_u X i,encode_u X j,encode_r X R,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_u_u_r_e_e: forall X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> c :e X -> d :e X -> struct_u_u_r_e_e (pack_u_u_r_e_e X i j R c d).
let X i j R c d.
assume H1.
assume H2.
assume H4.
assume H5.
prove exists X':set, exists i':set -> set, exists j':set -> set, exists R':set -> set -> prop, exists c':set, exists d':set,  (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ c' :e X' /\ d' :e X' /\ pack_u_u_r_e_e X i j R c d = pack_u_u_r_e_e X' i' j' R' c' d'.
witness X. witness i. witness j. witness R. witness c. witness d.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_u_u_r_e_e_eta: forall S, struct_u_u_r_e_e S -> S = pack_u_u_r_e_e (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_r (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let i.
assume H2. apply H2. let j.
assume H3. apply H3. let R.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_u_u_r_e_e_0_eq S X i j R c d Heq.
prove S = (X,encode_u X (decode_u (S 1)),encode_u X (decode_u (S 2)),encode_r X (decode_r (S 3)),S 4,S 5).
claim L1: encode_u X i = encode_u X (decode_u (S 1)).
{ apply encode_u_ext.
  exact struct_u_u_r_e_e_1_eq S X i j R c d Heq.
}
rewrite <- L1.
claim L2: encode_u X j = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_u_u_r_e_e_2_eq S X i j R c d Heq.
}
rewrite <- L2.
claim L3: encode_r X R = encode_r X (decode_r (S 3)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_u_u_r_e_e_3_eq S X i j R c d Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_u_u_r_e_e_4_eq S X i j R c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_u_u_r_e_e_5_eq S X i j R c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_u_u_r_e_e.

Variable A:SType.

Definition unpack_u_u_r_e_e : set -> (set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_r (S 3)) (S 4) (S 5).

Theorem unpack_u_u_r_e_e_eq : forall Phi:set -> (set -> set) -> (set -> set) -> (set -> set -> prop) -> set -> set -> A,
  (forall X, forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall c, forall d,Phi X i j R c d = Phi X i' j' R' c d)
  ->
  forall X, forall i:set -> set, forall j:set -> set, forall R:set -> set -> prop, forall c:set, forall d:set, unpack_u_u_r_e_e (pack_u_u_r_e_e X i j R c d) Phi = Phi X i j R c d.
let Phi.
assume HPhi.
let X i j R c d.
prove Phi (pack_u_u_r_e_e X i j R c d 0) (decode_u (pack_u_u_r_e_e X i j R c d 1)) (decode_u (pack_u_u_r_e_e X i j R c d 2)) (decode_r (pack_u_u_r_e_e X i j R c d 3)) (pack_u_u_r_e_e X i j R c d 4) (pack_u_u_r_e_e X i j R c d 5) = Phi X i j R c d.
rewrite <- struct_u_u_r_e_e_0_eq (pack_u_u_r_e_e X i j R c d) X i j R c d (eqI set (pack_u_u_r_e_e X i j R c d)).
prove Phi X (decode_u (pack_u_u_r_e_e X i j R c d 1)) (decode_u (pack_u_u_r_e_e X i j R c d 2)) (decode_r (pack_u_u_r_e_e X i j R c d 3)) (pack_u_u_r_e_e X i j R c d 4) (pack_u_u_r_e_e X i j R c d 5) = Phi X i j R c d.
rewrite <- struct_u_u_r_e_e_4_eq (pack_u_u_r_e_e X i j R c d) X i j R c d (eqI set (pack_u_u_r_e_e X i j R c d)).
rewrite <- struct_u_u_r_e_e_5_eq (pack_u_u_r_e_e X i j R c d) X i j R c d (eqI set (pack_u_u_r_e_e X i j R c d)).
apply HPhi.
- let x. assume Hx.
  prove decode_u (pack_u_u_r_e_e X i j R c d 1) x = i x.
  apply eq_sym set.
  exact struct_u_u_r_e_e_1_eq (pack_u_u_r_e_e X i j R c d) X i j R c d (eqI set (pack_u_u_r_e_e X i j R c d)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_u_u_r_e_e X i j R c d 2) x = j x.
  apply eq_sym set.
  exact struct_u_u_r_e_e_2_eq (pack_u_u_r_e_e X i j R c d) X i j R c d (eqI set (pack_u_u_r_e_e X i j R c d)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_u_u_r_e_e X i j R c d 3) x y <-> R x y.
  rewrite <- struct_u_u_r_e_e_3_eq (pack_u_u_r_e_e X i j R c d) X i j R c d (eqI set (pack_u_u_r_e_e X i j R c d)) x Hx y Hy.
  apply iff_refl.
Qed.

End unpack_u_u_r_e_e.

Definition pack_u_u_p_p_e : set -> (set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> set -> set := fun X i j P Q c => (X,encode_u X i,encode_u X j,encode_p X P,encode_p X Q,c).

Definition struct_u_u_p_p_e : set -> prop := fun S => exists X:set, exists i:set -> set, exists j:set -> set, exists P:set -> prop, exists Q:set -> prop, exists c:set, (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ c :e X /\ S = pack_u_u_p_p_e X i j P Q c.

Theorem pack_u_u_p_p_e_ext : forall X, forall i i':set -> set, forall j j':set -> set, forall P P':set -> prop, forall Q Q':set -> prop, forall c,
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_u_u_p_p_e X i j P Q c = pack_u_u_p_p_e X i' j' P' Q' c.
let X i i' j j' P P' Q Q' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_u X i,encode_u X j,encode_p X P,encode_p X Q,c) = (X,encode_u X i',encode_u X j',encode_p X P',encode_p X Q',c).
claim L1: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_u_u_p_p_e_0_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_u_p_p_e X i j P Q c -> X = S 0.
let S X i j P Q c. assume H1. rewrite H1.
prove X = (X,encode_u X i,encode_u X j,encode_p X P,encode_p X Q,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_u_u_p_p_e_1_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_u_p_p_e X i j P Q c -> forall x :e X, i x = decode_u (S 1) x.
let S X i j P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_u X i,encode_u X j,encode_p X P,encode_p X Q,c) 1) x.
rewrite tuple_6_1_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_u_u_p_p_e_2_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_u_p_p_e X i j P Q c -> forall x :e X, j x = decode_u (S 2) x.
let S X i j P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_u X i,encode_u X j,encode_p X P,encode_p X Q,c) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_u_u_p_p_e_3_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_u_p_p_e X i j P Q c -> forall x :e X, P x = decode_p (S 3) x.
let S X i j P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_u X i,encode_u X j,encode_p X P,encode_p X Q,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_u_u_p_p_e_4_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_u_p_p_e X i j P Q c -> forall x :e X, Q x = decode_p (S 4) x.
let S X i j P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_u X i,encode_u X j,encode_p X P,encode_p X Q,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem struct_u_u_p_p_e_5_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_u_p_p_e X i j P Q c -> c = S 5.
let S X i j P Q c. assume H1.
rewrite H1. prove c = (X,encode_u X i,encode_u X j,encode_p X P,encode_p X Q,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_u_u_p_p_e: forall X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> c :e X -> struct_u_u_p_p_e (pack_u_u_p_p_e X i j P Q c).
let X i j P Q c.
assume H1.
assume H2.
assume H5.
prove exists X':set, exists i':set -> set, exists j':set -> set, exists P':set -> prop, exists Q':set -> prop, exists c':set,  (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ c' :e X' /\ pack_u_u_p_p_e X i j P Q c = pack_u_u_p_p_e X' i' j' P' Q' c'.
witness X. witness i. witness j. witness P. witness Q. witness c.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H5.
apply eqI set.
Qed.

Theorem struct_u_u_p_p_e_eta: forall S, struct_u_u_p_p_e S -> S = pack_u_u_p_p_e (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let i.
assume H2. apply H2. let j.
assume H3. apply H3. let P.
assume H4. apply H4. let Q.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_u_u_p_p_e_0_eq S X i j P Q c Heq.
prove S = (X,encode_u X (decode_u (S 1)),encode_u X (decode_u (S 2)),encode_p X (decode_p (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_u X i = encode_u X (decode_u (S 1)).
{ apply encode_u_ext.
  exact struct_u_u_p_p_e_1_eq S X i j P Q c Heq.
}
rewrite <- L1.
claim L2: encode_u X j = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_u_u_p_p_e_2_eq S X i j P Q c Heq.
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_u_u_p_p_e_3_eq S X i j P Q c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: encode_p X Q = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_u_u_p_p_e_4_eq S X i j P Q c Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_u_u_p_p_e_5_eq S X i j P Q c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_u_u_p_p_e.

Variable A:SType.

Definition unpack_u_u_p_p_e : set -> (set -> (set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_u_u_p_p_e_eq : forall Phi:set -> (set -> set) -> (set -> set) -> (set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) ->  forall c,Phi X i j P Q c = Phi X i' j' P' Q' c)
  ->
  forall X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall Q:set -> prop, forall c:set, unpack_u_u_p_p_e (pack_u_u_p_p_e X i j P Q c) Phi = Phi X i j P Q c.
let Phi.
assume HPhi.
let X i j P Q c.
prove Phi (pack_u_u_p_p_e X i j P Q c 0) (decode_u (pack_u_u_p_p_e X i j P Q c 1)) (decode_u (pack_u_u_p_p_e X i j P Q c 2)) (decode_p (pack_u_u_p_p_e X i j P Q c 3)) (decode_p (pack_u_u_p_p_e X i j P Q c 4)) (pack_u_u_p_p_e X i j P Q c 5) = Phi X i j P Q c.
rewrite <- struct_u_u_p_p_e_0_eq (pack_u_u_p_p_e X i j P Q c) X i j P Q c (eqI set (pack_u_u_p_p_e X i j P Q c)).
prove Phi X (decode_u (pack_u_u_p_p_e X i j P Q c 1)) (decode_u (pack_u_u_p_p_e X i j P Q c 2)) (decode_p (pack_u_u_p_p_e X i j P Q c 3)) (decode_p (pack_u_u_p_p_e X i j P Q c 4)) (pack_u_u_p_p_e X i j P Q c 5) = Phi X i j P Q c.
rewrite <- struct_u_u_p_p_e_5_eq (pack_u_u_p_p_e X i j P Q c) X i j P Q c (eqI set (pack_u_u_p_p_e X i j P Q c)).
apply HPhi.
- let x. assume Hx.
  prove decode_u (pack_u_u_p_p_e X i j P Q c 1) x = i x.
  apply eq_sym set.
  exact struct_u_u_p_p_e_1_eq (pack_u_u_p_p_e X i j P Q c) X i j P Q c (eqI set (pack_u_u_p_p_e X i j P Q c)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_u_u_p_p_e X i j P Q c 2) x = j x.
  apply eq_sym set.
  exact struct_u_u_p_p_e_2_eq (pack_u_u_p_p_e X i j P Q c) X i j P Q c (eqI set (pack_u_u_p_p_e X i j P Q c)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_u_u_p_p_e X i j P Q c 3) x <-> P x.
  rewrite <- struct_u_u_p_p_e_3_eq (pack_u_u_p_p_e X i j P Q c) X i j P Q c (eqI set (pack_u_u_p_p_e X i j P Q c)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_u_u_p_p_e X i j P Q c 4) x <-> Q x.
  rewrite <- struct_u_u_p_p_e_4_eq (pack_u_u_p_p_e X i j P Q c) X i j P Q c (eqI set (pack_u_u_p_p_e X i j P Q c)) x Hx.
  apply iff_refl.
Qed.

End unpack_u_u_p_p_e.

Definition pack_u_u_p_e_e : set -> (set -> set) -> (set -> set) -> (set -> prop) -> set -> set -> set := fun X i j P c d => (X,encode_u X i,encode_u X j,encode_p X P,c,d).

Definition struct_u_u_p_e_e : set -> prop := fun S => exists X:set, exists i:set -> set, exists j:set -> set, exists P:set -> prop, exists c:set, exists d:set, (forall x :e X, i x :e X) /\ (forall x :e X, j x :e X) /\ c :e X /\ d :e X /\ S = pack_u_u_p_e_e X i j P c d.

Theorem pack_u_u_p_e_e_ext : forall X, forall i i':set -> set, forall j j':set -> set, forall P P':set -> prop, forall c, forall d,
 (forall x :e X, i x = i' x) ->
 (forall x :e X, j x = j' x) ->
 (forall x :e X, P x <-> P' x) ->
 pack_u_u_p_e_e X i j P c d = pack_u_u_p_e_e X i' j' P' c d.
let X i i' j j' P P' c d. assume H1. assume H2. assume H3.
prove (X,encode_u X i,encode_u X j,encode_p X P,c,d) = (X,encode_u X i',encode_u X j',encode_p X P',c,d).
claim L1: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H1. }
rewrite <- L1.
claim L2: encode_u X j = encode_u X j'.
{ apply encode_u_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_u_u_p_e_e_0_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_u_p_e_e X i j P c d -> X = S 0.
let S X i j P c d. assume H1. rewrite H1.
prove X = (X,encode_u X i,encode_u X j,encode_p X P,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_u_u_p_e_e_1_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_u_p_e_e X i j P c d -> forall x :e X, i x = decode_u (S 1) x.
let S X i j P c d. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_u X i,encode_u X j,encode_p X P,c,d) 1) x.
rewrite tuple_6_1_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_u_u_p_e_e_2_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_u_p_e_e X i j P c d -> forall x :e X, j x = decode_u (S 2) x.
let S X i j P c d. assume H1.
let x. assume Hx. rewrite H1.
prove j x = decode_u ((X,encode_u X i,encode_u X j,encode_p X P,c,d) 2) x.
rewrite tuple_6_2_eq.
apply eq_sym set. apply decode_encode_u X j x Hx.
Qed.

Theorem struct_u_u_p_e_e_3_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_u_p_e_e X i j P c d -> forall x :e X, P x = decode_p (S 3) x.
let S X i j P c d. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_u X i,encode_u X j,encode_p X P,c,d) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_u_u_p_e_e_4_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_u_p_e_e X i j P c d -> c = S 4.
let S X i j P c d. assume H1.
rewrite H1. prove c = (X,encode_u X i,encode_u X j,encode_p X P,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_u_u_p_e_e_5_eq: forall S X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_u_p_e_e X i j P c d -> d = S 5.
let S X i j P c d. assume H1.
rewrite H1. prove d = (X,encode_u X i,encode_u X j,encode_p X P,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_u_u_p_e_e: forall X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall c:set, forall d:set, (forall x :e X, i x :e X) -> (forall x :e X, j x :e X) -> c :e X -> d :e X -> struct_u_u_p_e_e (pack_u_u_p_e_e X i j P c d).
let X i j P c d.
assume H1.
assume H2.
assume H4.
assume H5.
prove exists X':set, exists i':set -> set, exists j':set -> set, exists P':set -> prop, exists c':set, exists d':set,  (forall x :e X', i' x :e X') /\ (forall x :e X', j' x :e X') /\ c' :e X' /\ d' :e X' /\ pack_u_u_p_e_e X i j P c d = pack_u_u_p_e_e X' i' j' P' c' d'.
witness X. witness i. witness j. witness P. witness c. witness d.
apply andI.
apply andI.
apply andI.
apply andI.
exact H1.
exact H2.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_u_u_p_e_e_eta: forall S, struct_u_u_p_e_e S -> S = pack_u_u_p_e_e (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_p (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let i.
assume H2. apply H2. let j.
assume H3. apply H3. let P.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_u_u_p_e_e_0_eq S X i j P c d Heq.
prove S = (X,encode_u X (decode_u (S 1)),encode_u X (decode_u (S 2)),encode_p X (decode_p (S 3)),S 4,S 5).
claim L1: encode_u X i = encode_u X (decode_u (S 1)).
{ apply encode_u_ext.
  exact struct_u_u_p_e_e_1_eq S X i j P c d Heq.
}
rewrite <- L1.
claim L2: encode_u X j = encode_u X (decode_u (S 2)).
{ apply encode_u_ext.
  exact struct_u_u_p_e_e_2_eq S X i j P c d Heq.
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_u_u_p_e_e_3_eq S X i j P c d Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_u_u_p_e_e_4_eq S X i j P c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_u_u_p_e_e_5_eq S X i j P c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_u_u_p_e_e.

Variable A:SType.

Definition unpack_u_u_p_e_e : set -> (set -> (set -> set) -> (set -> set) -> (set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_u (S 1)) (decode_u (S 2)) (decode_p (S 3)) (S 4) (S 5).

Theorem unpack_u_u_p_e_e_eq : forall Phi:set -> (set -> set) -> (set -> set) -> (set -> prop) -> set -> set -> A,
  (forall X, forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall j j':set -> set, (forall x :e X, j x = j' x) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c, forall d,Phi X i j P c d = Phi X i' j' P' c d)
  ->
  forall X, forall i:set -> set, forall j:set -> set, forall P:set -> prop, forall c:set, forall d:set, unpack_u_u_p_e_e (pack_u_u_p_e_e X i j P c d) Phi = Phi X i j P c d.
let Phi.
assume HPhi.
let X i j P c d.
prove Phi (pack_u_u_p_e_e X i j P c d 0) (decode_u (pack_u_u_p_e_e X i j P c d 1)) (decode_u (pack_u_u_p_e_e X i j P c d 2)) (decode_p (pack_u_u_p_e_e X i j P c d 3)) (pack_u_u_p_e_e X i j P c d 4) (pack_u_u_p_e_e X i j P c d 5) = Phi X i j P c d.
rewrite <- struct_u_u_p_e_e_0_eq (pack_u_u_p_e_e X i j P c d) X i j P c d (eqI set (pack_u_u_p_e_e X i j P c d)).
prove Phi X (decode_u (pack_u_u_p_e_e X i j P c d 1)) (decode_u (pack_u_u_p_e_e X i j P c d 2)) (decode_p (pack_u_u_p_e_e X i j P c d 3)) (pack_u_u_p_e_e X i j P c d 4) (pack_u_u_p_e_e X i j P c d 5) = Phi X i j P c d.
rewrite <- struct_u_u_p_e_e_4_eq (pack_u_u_p_e_e X i j P c d) X i j P c d (eqI set (pack_u_u_p_e_e X i j P c d)).
rewrite <- struct_u_u_p_e_e_5_eq (pack_u_u_p_e_e X i j P c d) X i j P c d (eqI set (pack_u_u_p_e_e X i j P c d)).
apply HPhi.
- let x. assume Hx.
  prove decode_u (pack_u_u_p_e_e X i j P c d 1) x = i x.
  apply eq_sym set.
  exact struct_u_u_p_e_e_1_eq (pack_u_u_p_e_e X i j P c d) X i j P c d (eqI set (pack_u_u_p_e_e X i j P c d)) x Hx.
- let x. assume Hx.
  prove decode_u (pack_u_u_p_e_e X i j P c d 2) x = j x.
  apply eq_sym set.
  exact struct_u_u_p_e_e_2_eq (pack_u_u_p_e_e X i j P c d) X i j P c d (eqI set (pack_u_u_p_e_e X i j P c d)) x Hx.
- let x. assume Hx.
  prove decode_p (pack_u_u_p_e_e X i j P c d 3) x <-> P x.
  rewrite <- struct_u_u_p_e_e_3_eq (pack_u_u_p_e_e X i j P c d) X i j P c d (eqI set (pack_u_u_p_e_e X i j P c d)) x Hx.
  apply iff_refl.
Qed.

End unpack_u_u_p_e_e.

Definition pack_u_r_p_p_e : set -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> set := fun X i R P Q c => (X,encode_u X i,encode_r X R,encode_p X P,encode_p X Q,c).

Definition struct_u_r_p_p_e : set -> prop := fun S => exists X:set, exists i:set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists Q:set -> prop, exists c:set, (forall x :e X, i x :e X) /\ c :e X /\ S = pack_u_r_p_p_e X i R P Q c.

Theorem pack_u_r_p_p_e_ext : forall X, forall i i':set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall Q Q':set -> prop, forall c,
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_u_r_p_p_e X i R P Q c = pack_u_r_p_p_e X i' R' P' Q' c.
let X i i' R R' P P' Q Q' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_u X i,encode_r X R,encode_p X P,encode_p X Q,c) = (X,encode_u X i',encode_r X R',encode_p X P',encode_p X Q',c).
claim L1: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H1. }
rewrite <- L1.
claim L2: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_u_r_p_p_e_0_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_r_p_p_e X i R P Q c -> X = S 0.
let S X i R P Q c. assume H1. rewrite H1.
prove X = (X,encode_u X i,encode_r X R,encode_p X P,encode_p X Q,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_u_r_p_p_e_1_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_r_p_p_e X i R P Q c -> forall x :e X, i x = decode_u (S 1) x.
let S X i R P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_u X i,encode_r X R,encode_p X P,encode_p X Q,c) 1) x.
rewrite tuple_6_1_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_u_r_p_p_e_2_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_r_p_p_e X i R P Q c -> forall x y :e X, R x y = decode_r (S 2) x y.
let S X i R P Q c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_u X i,encode_r X R,encode_p X P,encode_p X Q,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_u_r_p_p_e_3_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_r_p_p_e X i R P Q c -> forall x :e X, P x = decode_p (S 3) x.
let S X i R P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_u X i,encode_r X R,encode_p X P,encode_p X Q,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_u_r_p_p_e_4_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_r_p_p_e X i R P Q c -> forall x :e X, Q x = decode_p (S 4) x.
let S X i R P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_u X i,encode_r X R,encode_p X P,encode_p X Q,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem struct_u_r_p_p_e_5_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_u_r_p_p_e X i R P Q c -> c = S 5.
let S X i R P Q c. assume H1.
rewrite H1. prove c = (X,encode_u X i,encode_r X R,encode_p X P,encode_p X Q,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_u_r_p_p_e: forall X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, (forall x :e X, i x :e X) -> c :e X -> struct_u_r_p_p_e (pack_u_r_p_p_e X i R P Q c).
let X i R P Q c.
assume H1.
assume H5.
prove exists X':set, exists i':set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists Q':set -> prop, exists c':set,  (forall x :e X', i' x :e X') /\ c' :e X' /\ pack_u_r_p_p_e X i R P Q c = pack_u_r_p_p_e X' i' R' P' Q' c'.
witness X. witness i. witness R. witness P. witness Q. witness c.
apply andI.
apply andI.
exact H1.
exact H5.
apply eqI set.
Qed.

Theorem struct_u_r_p_p_e_eta: forall S, struct_u_r_p_p_e S -> S = pack_u_r_p_p_e (S 0) (decode_u (S 1)) (decode_r (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let i.
assume H2. apply H2. let R.
assume H3. apply H3. let P.
assume H4. apply H4. let Q.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_u_r_p_p_e_0_eq S X i R P Q c Heq.
prove S = (X,encode_u X (decode_u (S 1)),encode_r X (decode_r (S 2)),encode_p X (decode_p (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_u X i = encode_u X (decode_u (S 1)).
{ apply encode_u_ext.
  exact struct_u_r_p_p_e_1_eq S X i R P Q c Heq.
}
rewrite <- L1.
claim L2: encode_r X R = encode_r X (decode_r (S 2)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_u_r_p_p_e_2_eq S X i R P Q c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_u_r_p_p_e_3_eq S X i R P Q c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: encode_p X Q = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_u_r_p_p_e_4_eq S X i R P Q c Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_u_r_p_p_e_5_eq S X i R P Q c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_u_r_p_p_e.

Variable A:SType.

Definition unpack_u_r_p_p_e : set -> (set -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_u (S 1)) (decode_r (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_u_r_p_p_e_eq : forall Phi:set -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) ->  forall c,Phi X i R P Q c = Phi X i' R' P' Q' c)
  ->
  forall X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, unpack_u_r_p_p_e (pack_u_r_p_p_e X i R P Q c) Phi = Phi X i R P Q c.
let Phi.
assume HPhi.
let X i R P Q c.
prove Phi (pack_u_r_p_p_e X i R P Q c 0) (decode_u (pack_u_r_p_p_e X i R P Q c 1)) (decode_r (pack_u_r_p_p_e X i R P Q c 2)) (decode_p (pack_u_r_p_p_e X i R P Q c 3)) (decode_p (pack_u_r_p_p_e X i R P Q c 4)) (pack_u_r_p_p_e X i R P Q c 5) = Phi X i R P Q c.
rewrite <- struct_u_r_p_p_e_0_eq (pack_u_r_p_p_e X i R P Q c) X i R P Q c (eqI set (pack_u_r_p_p_e X i R P Q c)).
prove Phi X (decode_u (pack_u_r_p_p_e X i R P Q c 1)) (decode_r (pack_u_r_p_p_e X i R P Q c 2)) (decode_p (pack_u_r_p_p_e X i R P Q c 3)) (decode_p (pack_u_r_p_p_e X i R P Q c 4)) (pack_u_r_p_p_e X i R P Q c 5) = Phi X i R P Q c.
rewrite <- struct_u_r_p_p_e_5_eq (pack_u_r_p_p_e X i R P Q c) X i R P Q c (eqI set (pack_u_r_p_p_e X i R P Q c)).
apply HPhi.
- let x. assume Hx.
  prove decode_u (pack_u_r_p_p_e X i R P Q c 1) x = i x.
  apply eq_sym set.
  exact struct_u_r_p_p_e_1_eq (pack_u_r_p_p_e X i R P Q c) X i R P Q c (eqI set (pack_u_r_p_p_e X i R P Q c)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_u_r_p_p_e X i R P Q c 2) x y <-> R x y.
  rewrite <- struct_u_r_p_p_e_2_eq (pack_u_r_p_p_e X i R P Q c) X i R P Q c (eqI set (pack_u_r_p_p_e X i R P Q c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_u_r_p_p_e X i R P Q c 3) x <-> P x.
  rewrite <- struct_u_r_p_p_e_3_eq (pack_u_r_p_p_e X i R P Q c) X i R P Q c (eqI set (pack_u_r_p_p_e X i R P Q c)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_u_r_p_p_e X i R P Q c 4) x <-> Q x.
  rewrite <- struct_u_r_p_p_e_4_eq (pack_u_r_p_p_e X i R P Q c) X i R P Q c (eqI set (pack_u_r_p_p_e X i R P Q c)) x Hx.
  apply iff_refl.
Qed.

End unpack_u_r_p_p_e.

Definition pack_u_r_p_e_e : set -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> set := fun X i R P c d => (X,encode_u X i,encode_r X R,encode_p X P,c,d).

Definition struct_u_r_p_e_e : set -> prop := fun S => exists X:set, exists i:set -> set, exists R:set -> set -> prop, exists P:set -> prop, exists c:set, exists d:set, (forall x :e X, i x :e X) /\ c :e X /\ d :e X /\ S = pack_u_r_p_e_e X i R P c d.

Theorem pack_u_r_p_e_e_ext : forall X, forall i i':set -> set, forall R R':set -> set -> prop, forall P P':set -> prop, forall c, forall d,
 (forall x :e X, i x = i' x) ->
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_u_r_p_e_e X i R P c d = pack_u_r_p_e_e X i' R' P' c d.
let X i i' R R' P P' c d. assume H1. assume H2. assume H3.
prove (X,encode_u X i,encode_r X R,encode_p X P,c,d) = (X,encode_u X i',encode_r X R',encode_p X P',c,d).
claim L1: encode_u X i = encode_u X i'.
{ apply encode_u_ext. exact H1. }
rewrite <- L1.
claim L2: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_u_r_p_e_e_0_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_r_p_e_e X i R P c d -> X = S 0.
let S X i R P c d. assume H1. rewrite H1.
prove X = (X,encode_u X i,encode_r X R,encode_p X P,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_u_r_p_e_e_1_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_r_p_e_e X i R P c d -> forall x :e X, i x = decode_u (S 1) x.
let S X i R P c d. assume H1.
let x. assume Hx. rewrite H1.
prove i x = decode_u ((X,encode_u X i,encode_r X R,encode_p X P,c,d) 1) x.
rewrite tuple_6_1_eq.
apply eq_sym set. apply decode_encode_u X i x Hx.
Qed.

Theorem struct_u_r_p_e_e_2_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_r_p_e_e X i R P c d -> forall x y :e X, R x y = decode_r (S 2) x y.
let S X i R P c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_u X i,encode_r X R,encode_p X P,c,d) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_u_r_p_e_e_3_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_r_p_e_e X i R P c d -> forall x :e X, P x = decode_p (S 3) x.
let S X i R P c d. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_u X i,encode_r X R,encode_p X P,c,d) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_u_r_p_e_e_4_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_r_p_e_e X i R P c d -> c = S 4.
let S X i R P c d. assume H1.
rewrite H1. prove c = (X,encode_u X i,encode_r X R,encode_p X P,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_u_r_p_e_e_5_eq: forall S X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_u_r_p_e_e X i R P c d -> d = S 5.
let S X i R P c d. assume H1.
rewrite H1. prove d = (X,encode_u X i,encode_r X R,encode_p X P,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_u_r_p_e_e: forall X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, (forall x :e X, i x :e X) -> c :e X -> d :e X -> struct_u_r_p_e_e (pack_u_r_p_e_e X i R P c d).
let X i R P c d.
assume H1.
assume H4.
assume H5.
prove exists X':set, exists i':set -> set, exists R':set -> set -> prop, exists P':set -> prop, exists c':set, exists d':set,  (forall x :e X', i' x :e X') /\ c' :e X' /\ d' :e X' /\ pack_u_r_p_e_e X i R P c d = pack_u_r_p_e_e X' i' R' P' c' d'.
witness X. witness i. witness R. witness P. witness c. witness d.
apply andI.
apply andI.
apply andI.
exact H1.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_u_r_p_e_e_eta: forall S, struct_u_r_p_e_e S -> S = pack_u_r_p_e_e (S 0) (decode_u (S 1)) (decode_r (S 2)) (decode_p (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let i.
assume H2. apply H2. let R.
assume H3. apply H3. let P.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_u_r_p_e_e_0_eq S X i R P c d Heq.
prove S = (X,encode_u X (decode_u (S 1)),encode_r X (decode_r (S 2)),encode_p X (decode_p (S 3)),S 4,S 5).
claim L1: encode_u X i = encode_u X (decode_u (S 1)).
{ apply encode_u_ext.
  exact struct_u_r_p_e_e_1_eq S X i R P c d Heq.
}
rewrite <- L1.
claim L2: encode_r X R = encode_r X (decode_r (S 2)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_u_r_p_e_e_2_eq S X i R P c d Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_u_r_p_e_e_3_eq S X i R P c d Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_u_r_p_e_e_4_eq S X i R P c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_u_r_p_e_e_5_eq S X i R P c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_u_r_p_e_e.

Variable A:SType.

Definition unpack_u_r_p_e_e : set -> (set -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_u (S 1)) (decode_r (S 2)) (decode_p (S 3)) (S 4) (S 5).

Theorem unpack_u_r_p_e_e_eq : forall Phi:set -> (set -> set) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> A,
  (forall X, forall i i':set -> set, (forall x :e X, i x = i' x) ->  forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c, forall d,Phi X i R P c d = Phi X i' R' P' c d)
  ->
  forall X, forall i:set -> set, forall R:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, unpack_u_r_p_e_e (pack_u_r_p_e_e X i R P c d) Phi = Phi X i R P c d.
let Phi.
assume HPhi.
let X i R P c d.
prove Phi (pack_u_r_p_e_e X i R P c d 0) (decode_u (pack_u_r_p_e_e X i R P c d 1)) (decode_r (pack_u_r_p_e_e X i R P c d 2)) (decode_p (pack_u_r_p_e_e X i R P c d 3)) (pack_u_r_p_e_e X i R P c d 4) (pack_u_r_p_e_e X i R P c d 5) = Phi X i R P c d.
rewrite <- struct_u_r_p_e_e_0_eq (pack_u_r_p_e_e X i R P c d) X i R P c d (eqI set (pack_u_r_p_e_e X i R P c d)).
prove Phi X (decode_u (pack_u_r_p_e_e X i R P c d 1)) (decode_r (pack_u_r_p_e_e X i R P c d 2)) (decode_p (pack_u_r_p_e_e X i R P c d 3)) (pack_u_r_p_e_e X i R P c d 4) (pack_u_r_p_e_e X i R P c d 5) = Phi X i R P c d.
rewrite <- struct_u_r_p_e_e_4_eq (pack_u_r_p_e_e X i R P c d) X i R P c d (eqI set (pack_u_r_p_e_e X i R P c d)).
rewrite <- struct_u_r_p_e_e_5_eq (pack_u_r_p_e_e X i R P c d) X i R P c d (eqI set (pack_u_r_p_e_e X i R P c d)).
apply HPhi.
- let x. assume Hx.
  prove decode_u (pack_u_r_p_e_e X i R P c d 1) x = i x.
  apply eq_sym set.
  exact struct_u_r_p_e_e_1_eq (pack_u_r_p_e_e X i R P c d) X i R P c d (eqI set (pack_u_r_p_e_e X i R P c d)) x Hx.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_u_r_p_e_e X i R P c d 2) x y <-> R x y.
  rewrite <- struct_u_r_p_e_e_2_eq (pack_u_r_p_e_e X i R P c d) X i R P c d (eqI set (pack_u_r_p_e_e X i R P c d)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_u_r_p_e_e X i R P c d 3) x <-> P x.
  rewrite <- struct_u_r_p_e_e_3_eq (pack_u_r_p_e_e X i R P c d) X i R P c d (eqI set (pack_u_r_p_e_e X i R P c d)) x Hx.
  apply iff_refl.
Qed.

End unpack_u_r_p_e_e.

Definition pack_r_r_p_p_e : set -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> set := fun X R T P Q c => (X,encode_r X R,encode_r X T,encode_p X P,encode_p X Q,c).

Definition struct_r_r_p_p_e : set -> prop := fun S => exists X:set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists P:set -> prop, exists Q:set -> prop, exists c:set, c :e X /\ S = pack_r_r_p_p_e X R T P Q c.

Theorem pack_r_r_p_p_e_ext : forall X, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall P P':set -> prop, forall Q Q':set -> prop, forall c,
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 (forall x :e X, P x <-> P' x) ->
 (forall x :e X, Q x <-> Q' x) ->
 pack_r_r_p_p_e X R T P Q c = pack_r_r_p_p_e X R' T' P' Q' c.
let X R R' T T' P P' Q Q' c. assume H1. assume H2. assume H3. assume H4.
prove (X,encode_r X R,encode_r X T,encode_p X P,encode_p X Q,c) = (X,encode_r X R',encode_r X T',encode_p X P',encode_p X Q',c).
claim L1: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H1. }
rewrite <- L1.
claim L2: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
claim L4: encode_p X Q = encode_p X Q'.
{ apply encode_p_ext. exact H4. }
rewrite <- L4.
apply eqI set.
Qed.

Theorem struct_r_r_p_p_e_0_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_r_r_p_p_e X R T P Q c -> X = S 0.
let S X R T P Q c. assume H1. rewrite H1.
prove X = (X,encode_r X R,encode_r X T,encode_p X P,encode_p X Q,c) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_r_r_p_p_e_1_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_r_r_p_p_e X R T P Q c -> forall x y :e X, R x y = decode_r (S 1) x y.
let S X R T P Q c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_r X R,encode_r X T,encode_p X P,encode_p X Q,c) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_r_r_p_p_e_2_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_r_r_p_p_e X R T P Q c -> forall x y :e X, T x y = decode_r (S 2) x y.
let S X R T P Q c. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_r X R,encode_r X T,encode_p X P,encode_p X Q,c) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_r_r_p_p_e_3_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_r_r_p_p_e X R T P Q c -> forall x :e X, P x = decode_p (S 3) x.
let S X R T P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_r X R,encode_r X T,encode_p X P,encode_p X Q,c) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_r_r_p_p_e_4_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_r_r_p_p_e X R T P Q c -> forall x :e X, Q x = decode_p (S 4) x.
let S X R T P Q c. assume H1.
let x. assume Hx. rewrite H1.
prove Q x = decode_p ((X,encode_r X R,encode_r X T,encode_p X P,encode_p X Q,c) 4) x.
rewrite tuple_6_4_eq.
apply eq_sym prop. exact decode_encode_p X Q x Hx.
Qed.

Theorem struct_r_r_p_p_e_5_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, S = pack_r_r_p_p_e X R T P Q c -> c = S 5.
let S X R T P Q c. assume H1.
rewrite H1. prove c = (X,encode_r X R,encode_r X T,encode_p X P,encode_p X Q,c) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_r_r_p_p_e: forall X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, c :e X -> struct_r_r_p_p_e (pack_r_r_p_p_e X R T P Q c).
let X R T P Q c.
assume H5.
prove exists X':set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists P':set -> prop, exists Q':set -> prop, exists c':set,  c' :e X' /\ pack_r_r_p_p_e X R T P Q c = pack_r_r_p_p_e X' R' T' P' Q' c'.
witness X. witness R. witness T. witness P. witness Q. witness c.
apply andI.
exact H5.
apply eqI set.
Qed.

Theorem struct_r_r_p_p_e_eta: forall S, struct_r_r_p_p_e S -> S = pack_r_r_p_p_e (S 0) (decode_r (S 1)) (decode_r (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let R.
assume H2. apply H2. let T.
assume H3. apply H3. let P.
assume H4. apply H4. let Q.
assume H5. apply H5. let c.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_r_r_p_p_e_0_eq S X R T P Q c Heq.
prove S = (X,encode_r X (decode_r (S 1)),encode_r X (decode_r (S 2)),encode_p X (decode_p (S 3)),encode_p X (decode_p (S 4)),S 5).
claim L1: encode_r X R = encode_r X (decode_r (S 1)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_r_r_p_p_e_1_eq S X R T P Q c Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L1.
claim L2: encode_r X T = encode_r X (decode_r (S 2)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_r_r_p_p_e_2_eq S X R T P Q c Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_r_r_p_p_e_3_eq S X R T P Q c Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: encode_p X Q = encode_p X (decode_p (S 4)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_r_r_p_p_e_4_eq S X R T P Q c Heq x Hx.
  exact iff_refl (Q x).
}
rewrite <- L4.
claim L5: c = (S 5).
{ exact struct_r_r_p_p_e_5_eq S X R T P Q c Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_r_r_p_p_e.

Variable A:SType.

Definition unpack_r_r_p_p_e : set -> (set -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_r (S 1)) (decode_r (S 2)) (decode_p (S 3)) (decode_p (S 4)) (S 5).

Theorem unpack_r_r_p_p_e_eq : forall Phi:set -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> (set -> prop) -> set -> A,
  (forall X, forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall Q Q':set -> prop, (forall x :e X, Q x <-> Q' x) ->  forall c,Phi X R T P Q c = Phi X R' T' P' Q' c)
  ->
  forall X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall Q:set -> prop, forall c:set, unpack_r_r_p_p_e (pack_r_r_p_p_e X R T P Q c) Phi = Phi X R T P Q c.
let Phi.
assume HPhi.
let X R T P Q c.
prove Phi (pack_r_r_p_p_e X R T P Q c 0) (decode_r (pack_r_r_p_p_e X R T P Q c 1)) (decode_r (pack_r_r_p_p_e X R T P Q c 2)) (decode_p (pack_r_r_p_p_e X R T P Q c 3)) (decode_p (pack_r_r_p_p_e X R T P Q c 4)) (pack_r_r_p_p_e X R T P Q c 5) = Phi X R T P Q c.
rewrite <- struct_r_r_p_p_e_0_eq (pack_r_r_p_p_e X R T P Q c) X R T P Q c (eqI set (pack_r_r_p_p_e X R T P Q c)).
prove Phi X (decode_r (pack_r_r_p_p_e X R T P Q c 1)) (decode_r (pack_r_r_p_p_e X R T P Q c 2)) (decode_p (pack_r_r_p_p_e X R T P Q c 3)) (decode_p (pack_r_r_p_p_e X R T P Q c 4)) (pack_r_r_p_p_e X R T P Q c 5) = Phi X R T P Q c.
rewrite <- struct_r_r_p_p_e_5_eq (pack_r_r_p_p_e X R T P Q c) X R T P Q c (eqI set (pack_r_r_p_p_e X R T P Q c)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_r_r_p_p_e X R T P Q c 1) x y <-> R x y.
  rewrite <- struct_r_r_p_p_e_1_eq (pack_r_r_p_p_e X R T P Q c) X R T P Q c (eqI set (pack_r_r_p_p_e X R T P Q c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_r_r_p_p_e X R T P Q c 2) x y <-> T x y.
  rewrite <- struct_r_r_p_p_e_2_eq (pack_r_r_p_p_e X R T P Q c) X R T P Q c (eqI set (pack_r_r_p_p_e X R T P Q c)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_r_r_p_p_e X R T P Q c 3) x <-> P x.
  rewrite <- struct_r_r_p_p_e_3_eq (pack_r_r_p_p_e X R T P Q c) X R T P Q c (eqI set (pack_r_r_p_p_e X R T P Q c)) x Hx.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_r_r_p_p_e X R T P Q c 4) x <-> Q x.
  rewrite <- struct_r_r_p_p_e_4_eq (pack_r_r_p_p_e X R T P Q c) X R T P Q c (eqI set (pack_r_r_p_p_e X R T P Q c)) x Hx.
  apply iff_refl.
Qed.

End unpack_r_r_p_p_e.

Definition pack_r_r_p_e_e : set -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> set := fun X R T P c d => (X,encode_r X R,encode_r X T,encode_p X P,c,d).

Definition struct_r_r_p_e_e : set -> prop := fun S => exists X:set, exists R:set -> set -> prop, exists T:set -> set -> prop, exists P:set -> prop, exists c:set, exists d:set, c :e X /\ d :e X /\ S = pack_r_r_p_e_e X R T P c d.

Theorem pack_r_r_p_e_e_ext : forall X, forall R R':set -> set -> prop, forall T T':set -> set -> prop, forall P P':set -> prop, forall c, forall d,
 (forall x y :e X, R x y <-> R' x y) ->
 (forall x y :e X, T x y <-> T' x y) ->
 (forall x :e X, P x <-> P' x) ->
 pack_r_r_p_e_e X R T P c d = pack_r_r_p_e_e X R' T' P' c d.
let X R R' T T' P P' c d. assume H1. assume H2. assume H3.
prove (X,encode_r X R,encode_r X T,encode_p X P,c,d) = (X,encode_r X R',encode_r X T',encode_p X P',c,d).
claim L1: encode_r X R = encode_r X R'.
{ apply encode_r_ext. exact H1. }
rewrite <- L1.
claim L2: encode_r X T = encode_r X T'.
{ apply encode_r_ext. exact H2. }
rewrite <- L2.
claim L3: encode_p X P = encode_p X P'.
{ apply encode_p_ext. exact H3. }
rewrite <- L3.
apply eqI set.
Qed.

Theorem struct_r_r_p_e_e_0_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_r_r_p_e_e X R T P c d -> X = S 0.
let S X R T P c d. assume H1. rewrite H1.
prove X = (X,encode_r X R,encode_r X T,encode_p X P,c,d) 0.
apply eq_sym set. apply tuple_6_0_eq.
Qed.

Theorem struct_r_r_p_e_e_1_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_r_r_p_e_e X R T P c d -> forall x y :e X, R x y = decode_r (S 1) x y.
let S X R T P c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove R x y = decode_r ((X,encode_r X R,encode_r X T,encode_p X P,c,d) 1) x y.
rewrite tuple_6_1_eq.
apply eq_sym prop. exact decode_encode_r X R x Hx y Hy.
Qed.

Theorem struct_r_r_p_e_e_2_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_r_r_p_e_e X R T P c d -> forall x y :e X, T x y = decode_r (S 2) x y.
let S X R T P c d. assume H1.
let x. assume Hx. let y. assume Hy. rewrite H1.
prove T x y = decode_r ((X,encode_r X R,encode_r X T,encode_p X P,c,d) 2) x y.
rewrite tuple_6_2_eq.
apply eq_sym prop. exact decode_encode_r X T x Hx y Hy.
Qed.

Theorem struct_r_r_p_e_e_3_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_r_r_p_e_e X R T P c d -> forall x :e X, P x = decode_p (S 3) x.
let S X R T P c d. assume H1.
let x. assume Hx. rewrite H1.
prove P x = decode_p ((X,encode_r X R,encode_r X T,encode_p X P,c,d) 3) x.
rewrite tuple_6_3_eq.
apply eq_sym prop. exact decode_encode_p X P x Hx.
Qed.

Theorem struct_r_r_p_e_e_4_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_r_r_p_e_e X R T P c d -> c = S 4.
let S X R T P c d. assume H1.
rewrite H1. prove c = (X,encode_r X R,encode_r X T,encode_p X P,c,d) 4. apply eq_sym set. apply tuple_6_4_eq.
Qed.

Theorem struct_r_r_p_e_e_5_eq: forall S X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, S = pack_r_r_p_e_e X R T P c d -> d = S 5.
let S X R T P c d. assume H1.
rewrite H1. prove d = (X,encode_r X R,encode_r X T,encode_p X P,c,d) 5. apply eq_sym set. apply tuple_6_5_eq.
Qed.

Theorem pack_struct_r_r_p_e_e: forall X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, c :e X -> d :e X -> struct_r_r_p_e_e (pack_r_r_p_e_e X R T P c d).
let X R T P c d.
assume H4.
assume H5.
prove exists X':set, exists R':set -> set -> prop, exists T':set -> set -> prop, exists P':set -> prop, exists c':set, exists d':set,  c' :e X' /\ d' :e X' /\ pack_r_r_p_e_e X R T P c d = pack_r_r_p_e_e X' R' T' P' c' d'.
witness X. witness R. witness T. witness P. witness c. witness d.
apply andI.
apply andI.
exact H4.
exact H5.
apply eqI set.
Qed.

Theorem struct_r_r_p_e_e_eta: forall S, struct_r_r_p_e_e S -> S = pack_r_r_p_e_e (S 0) (decode_r (S 1)) (decode_r (S 2)) (decode_p (S 3)) (S 4) (S 5).
let S.
assume H0. apply H0. let X.
assume H1. apply H1. let R.
assume H2. apply H2. let T.
assume H3. apply H3. let P.
assume H4. apply H4. let c.
assume H5. apply H5. let d.
assume H. apply H. assume _.
assume Heq.
rewrite <- struct_r_r_p_e_e_0_eq S X R T P c d Heq.
prove S = (X,encode_r X (decode_r (S 1)),encode_r X (decode_r (S 2)),encode_p X (decode_p (S 3)),S 4,S 5).
claim L1: encode_r X R = encode_r X (decode_r (S 1)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_r_r_p_e_e_1_eq S X R T P c d Heq x Hx y Hy.
  exact iff_refl (R x y).
}
rewrite <- L1.
claim L2: encode_r X T = encode_r X (decode_r (S 2)).
{ apply encode_r_ext.
  let x. assume Hx. let y. assume Hy.
  rewrite <- struct_r_r_p_e_e_2_eq S X R T P c d Heq x Hx y Hy.
  exact iff_refl (T x y).
}
rewrite <- L2.
claim L3: encode_p X P = encode_p X (decode_p (S 3)).
{ apply encode_p_ext.
  let x. assume Hx.
  rewrite <- struct_r_r_p_e_e_3_eq S X R T P c d Heq x Hx.
  exact iff_refl (P x).
}
rewrite <- L3.
claim L4: c = (S 4).
{ exact struct_r_r_p_e_e_4_eq S X R T P c d Heq. }
rewrite <- L4.
claim L5: d = (S 5).
{ exact struct_r_r_p_e_e_5_eq S X R T P c d Heq. }
rewrite <- L5.
exact Heq.
Qed.

Section unpack_r_r_p_e_e.

Variable A:SType.

Definition unpack_r_r_p_e_e : set -> (set -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> A) -> A := fun S Phi => Phi (S 0) (decode_r (S 1)) (decode_r (S 2)) (decode_p (S 3)) (S 4) (S 5).

Theorem unpack_r_r_p_e_e_eq : forall Phi:set -> (set -> set -> prop) -> (set -> set -> prop) -> (set -> prop) -> set -> set -> A,
  (forall X, forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) ->  forall T T':set -> set -> prop, (forall x y :e X, T x y <-> T' x y) ->  forall P P':set -> prop, (forall x :e X, P x <-> P' x) ->  forall c, forall d,Phi X R T P c d = Phi X R' T' P' c d)
  ->
  forall X, forall R:set -> set -> prop, forall T:set -> set -> prop, forall P:set -> prop, forall c:set, forall d:set, unpack_r_r_p_e_e (pack_r_r_p_e_e X R T P c d) Phi = Phi X R T P c d.
let Phi.
assume HPhi.
let X R T P c d.
prove Phi (pack_r_r_p_e_e X R T P c d 0) (decode_r (pack_r_r_p_e_e X R T P c d 1)) (decode_r (pack_r_r_p_e_e X R T P c d 2)) (decode_p (pack_r_r_p_e_e X R T P c d 3)) (pack_r_r_p_e_e X R T P c d 4) (pack_r_r_p_e_e X R T P c d 5) = Phi X R T P c d.
rewrite <- struct_r_r_p_e_e_0_eq (pack_r_r_p_e_e X R T P c d) X R T P c d (eqI set (pack_r_r_p_e_e X R T P c d)).
prove Phi X (decode_r (pack_r_r_p_e_e X R T P c d 1)) (decode_r (pack_r_r_p_e_e X R T P c d 2)) (decode_p (pack_r_r_p_e_e X R T P c d 3)) (pack_r_r_p_e_e X R T P c d 4) (pack_r_r_p_e_e X R T P c d 5) = Phi X R T P c d.
rewrite <- struct_r_r_p_e_e_4_eq (pack_r_r_p_e_e X R T P c d) X R T P c d (eqI set (pack_r_r_p_e_e X R T P c d)).
rewrite <- struct_r_r_p_e_e_5_eq (pack_r_r_p_e_e X R T P c d) X R T P c d (eqI set (pack_r_r_p_e_e X R T P c d)).
apply HPhi.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_r_r_p_e_e X R T P c d 1) x y <-> R x y.
  rewrite <- struct_r_r_p_e_e_1_eq (pack_r_r_p_e_e X R T P c d) X R T P c d (eqI set (pack_r_r_p_e_e X R T P c d)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx. let y. assume Hy.
  prove decode_r (pack_r_r_p_e_e X R T P c d 2) x y <-> T x y.
  rewrite <- struct_r_r_p_e_e_2_eq (pack_r_r_p_e_e X R T P c d) X R T P c d (eqI set (pack_r_r_p_e_e X R T P c d)) x Hx y Hy.
  apply iff_refl.
- let x. assume Hx.
  prove decode_p (pack_r_r_p_e_e X R T P c d 3) x <-> P x.
  rewrite <- struct_r_r_p_e_e_3_eq (pack_r_r_p_e_e X R T P c d) X R T P c d (eqI set (pack_r_r_p_e_e X R T P c d)) x Hx.
  apply iff_refl.
Qed.

End unpack_r_r_p_e_e.
