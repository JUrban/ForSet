(** https://proofwiki.org/wiki/Definition:Group **)
Section Group1.

Variable G:set.

Section Group1Explicit.

Variable op:set -> set -> set.
Infix * 355 right := op.

Definition explicit_Group : prop :=
      (forall a b :e G, a * b :e G)
   /\ (forall a b c :e G, a * (b * c) = (a * b) * c)
   /\ exists e :e G,
           (forall a :e G, e * a = a /\ a * e = a)
        /\ (forall a :e G, exists b :e G, a * b = e /\ b * a = e).

Hypothesis HG: explicit_Group.

Definition explicit_Group_identity : set := some e :e G, (forall a :e G, e * a = a /\ a * e = a) /\ forall a :e G, exists b :e G, a * b = e /\ b * a = e.

Let e := explicit_Group_identity.

Definition explicit_Group_inverse : set -> set := fun a => some b :e G, a * b = e /\ b * a = e.

Postfix - 340 := explicit_Group_inverse.

End Group1Explicit.
End Group1.

(** Structure for a carrier with a binary operation **)
Definition pack_b : set -> (set -> set -> set) -> set := fun X F => (X,encode_b X F).

Definition struct_b : set -> prop := fun S => forall q:set -> prop, (forall X:set, forall F:set -> set -> set, (forall x y :e X, F x y :e X) -> q (pack_b X F)) -> q S.

Section unpack_b.
Variable A:SType.

Definition unpack_b : set -> (set -> (set -> set -> set) -> A) -> A := fun S F => F (S 0) (decode_b (S 1)).

End unpack_b.

(** Group as a structure (with just the binary operation) **)
Definition Group : set -> prop :=
  fun G => struct_b G /\ unpack_b prop G explicit_Group.

(** https://proofwiki.org/wiki/Definition:Subgroup **)
Definition subgroup : set -> set -> prop :=
  fun H G =>
     struct_b G /\ struct_b H /\
     unpack_b prop G
        (fun G' op =>
	  unpack_b prop H
	   (fun H' _ => H = pack_b H' op /\ Group (pack_b H' op) /\ H' c= G')).

Infix <= 400 := subgroup.

(** https://proofwiki.org/wiki/Definition:Cyclic_Group **)
Section Group3Explicit.

Variable G:set.
Variable op:set -> set -> set.
Infix * 355 right := op.

Let e := explicit_Group_identity G op.

Definition explicit_Group_exp:set -> set -> set := fun a n => nat_primrec e (fun _ r => a * r) n.

Infix ^ 350 left := explicit_Group_exp.

(** BUG: This is wrong, since it does not allow n to be negative. It will recognize (only) finite cyclic groups. **)
Definition explicit_Group_cyclic : prop := exists a :e G, forall b :e G, exists n :e omega, a ^ n = b.

End Group3Explicit.

Definition Group_cyclic : set -> prop := fun G => unpack_b prop G explicit_Group_cyclic.

(** https://proofwiki.org/wiki/Subgroup_of_Cyclic_Group_is_Cyclic **)
(** BUG: This is wrong, since the definition of cyclic is wrong. It is still provable though. **)
Theorem Group_subgroup_cyclic: forall G, Group G -> forall H, H <= G -> Group_cyclic G -> Group_cyclic H.
Admitted.
