(* Unicode False "22A5" *)
Definition False : prop := forall P : prop , P.
(* Unicode True "22A4" *)
Definition True : prop := forall P : prop , P -> P.
Axiom TrueI : True.
Definition not : prop -> prop := fun A : prop => A -> False.
(* Unicode ~ "00ac" *)
Prefix ~ 700 := not.
Definition and : prop -> prop -> prop := fun A B : prop => forall P : prop , (A -> B -> P) -> P.
(* Unicode /\ "2227" *)
Infix /\ 780 left  := and.
Axiom andI : forall A B : prop , A -> B -> A /\ B.
Axiom and3I : forall P1 P2 P3 : prop, P1 -> P2 -> P3 -> P1 /\ P2 /\ P3.
Axiom and3E : forall P1 P2 P3: prop, P1 /\ P2 /\ P3 -> (forall p : prop , (P1 -> P2 -> P3 -> p) -> p).
Axiom and4I : forall P1 P2 P3 P4 : prop, P1 -> P2 -> P3 -> P4 -> P1 /\ P2 /\ P3 /\ P4.
Axiom and5I : forall P1 P2 P3 P4 P5: prop, P1 -> P2 -> P3 -> P4 -> P5 -> P1 /\ P2 /\ P3 /\ P4 /\ P5.
Definition or : prop -> prop -> prop := fun A B : prop => forall P : prop , (A -> P) -> (B -> P) -> P.
(* Unicode \/ "2228" *)
Infix \/ 785 left  := or.
Definition iff : prop -> prop -> prop := fun A B : prop => (A -> B) /\ (B -> A).
Infix <-> 805 := iff.
Axiom iffI : forall A B : prop , (A -> B) -> (B -> A) -> (A <-> B).
Axiom iffEL : forall A B : prop , (A <-> B) -> A -> B.
Axiom iffER : forall A B : prop , (A <-> B) -> B -> A.
Axiom iff_refl : forall A : prop , A <-> A.
Section Poly1_eq.
Variable A : SType.
Definition eq : A -> A -> prop := fun x y => forall Q : A -> prop , Q x -> Q y.
Definition neq : A -> A -> prop := fun x y => ~ eq x y.
End Poly1_eq.
Infix = 502 := eq.
(* Unicode <> "2260" *)
Infix <> 502 := neq.
Section Poly1_eqthms.
Variable A : SType.
Axiom eqI : forall x : A , x = x.
Axiom eq_sym : forall x y : A , x = y -> y = x.
End Poly1_eqthms.
Section Poly1_exdef.
Variable A : SType.
Variable Q : A -> prop.
Definition ex : prop := forall P : prop , (forall x : A , Q x -> P) -> P.
End Poly1_exdef.
(* Unicode exists "2203" *)
Binder+ exists , := ex.
Section Poly1_exthms.
Variable A : SType.
Axiom exI : forall P : A -> prop , forall x : A , P x -> exists x : A , P x.
Axiom exandE : forall P Q : A -> prop , (exists x : A , P x /\ Q x) -> forall p : prop , (forall x : A , P x -> Q x -> p) -> p.
End Poly1_exthms.
Axiom prop_ext2 : forall A B : prop , (A -> B) -> (B -> A) -> A = B.
Section FE.
Variable A B : SType.
Axiom func_ext : forall f g : A -> B , (forall x : A , f x = g x) -> f = g.
End FE.
Section PE.
Variable A : SType.
Axiom pred_ext : forall P Q : A -> prop , P c= Q -> Q c= P -> P = Q.
End PE.
Section RE.
Variable A B : SType.
Axiom reln_ext : forall R S : A -> B -> prop , R c= S -> S c= R -> R = S.
End RE.
Section RelnPoly1.
Variable A : SType.
Definition symmetric : (A -> A -> prop) -> prop := fun R => forall x y : A , R x y -> R y x.
Definition transitive : (A -> A -> prop) -> prop := fun R => forall x y z : A , R x y -> R y z -> R x z.
Definition per : (A -> A -> prop) -> prop := fun R => symmetric R /\ transitive R.
Axiom per_tra : forall R : A -> A -> prop , per R -> transitive R.
Axiom per_stra1 : forall R : A -> A -> prop , per R -> forall x y z : A , R y x -> R y z -> R x z.
Axiom per_ref1 : forall R : A -> A -> prop , per R -> forall x y : A , R x y -> R x x.
End RelnPoly1.
Section Choice.
Variable A : SType.
Parameter Eps : (A -> prop) -> A.
Axiom EpsR : forall P : A -> prop , forall x : A , P x -> P (Eps P).
End Choice.
Binder some , := Eps.
Section Poly1_Quotient.
Variable A:SType.
Definition canonical_elt : (A->A->prop)->A->A := fun R:A->A->prop => fun x:A => some y:A, R x y.
Axiom canonical_elt_rel : forall R:A->A->prop, forall x:A, R x x -> R x (canonical_elt R x).
Axiom canonical_elt_eq : forall R:A->A->prop, per A R -> forall x y:A, R x y -> canonical_elt R x = canonical_elt R y.
Axiom canonical_elt_idem : forall R:A->A->prop, per A R -> forall x:A, R x x -> canonical_elt R x = canonical_elt R (canonical_elt R x).
Definition quotient : (A->A->prop)->A->prop := fun R:A->A->prop => fun x:A => R x x /\ x = canonical_elt R x.
Axiom quotient_prop1 : forall R:A->A->prop, forall x:A, quotient R x -> R x x.
Axiom quotient_prop2 : forall R:A->A->prop, per A R -> forall x y:A, quotient R x -> quotient R y -> R x y -> x = y.
End Poly1_Quotient.
Section IfA.
Variable A : SType.
Definition If : prop -> A -> A -> A := (fun p x y => some z : A , p /\ z = x \/ ~ p /\ z = y).
Notation IfThenElse If.
Axiom If_0 : forall p : prop , forall x y : A , ~ p -> (if p then x else y) = y.
Axiom If_1 : forall p : prop , forall x y : A , p -> (if p then x else y) = x.
Axiom If_or : forall p : prop , forall x y : A , (if p then x else y) = x \/ (if p then x else y) = y.
End IfA.
Axiom classic : forall P : prop , P \/ ~ P.
Axiom NNPP : forall p : prop , ~ ~ p -> p.
Parameter In : set -> set -> prop.
Definition nIn : set -> set -> prop := fun x X => ~ In x X.
(* Unicode /:e "2209" *)
Infix /:e 502 := nIn.
Definition Subq : set -> set -> prop := fun X Y => forall x : set , x :e X -> x :e Y.
Binder+ exists , := ex ; and.
Axiom set_ext : forall X Y:set, X c= Y -> Y c= X -> X = Y.
(* Unicode Empty "2205" *)
Parameter Empty : set.
Axiom EmptyE : forall x : set , x /:e Empty.
Axiom Empty_Subq_eq : forall X : set , X c= Empty -> X = Empty.
(* Unicode Union "22C3" *)
Parameter Union : set -> set.
Axiom UnionE2 : forall X x : set , x :e (Union X) -> forall p : prop , (forall Y : set , x :e Y -> Y :e X -> p) -> p.
Axiom UnionI : forall X x Y : set , x :e Y -> Y :e X -> x :e (Union X).
(* Unicode Power "1D4AB" *)
Parameter Power : set -> set.
Axiom PowerE : forall X Y : set , Y :e Power X -> Y c= X.
Axiom PowerI : forall X Y : set , Y c= X -> Y :e (Power X).
Axiom Empty_In_Power : forall X : set , Empty :e Power X.
Axiom Self_In_Power : forall X : set , X :e Power X.
Parameter Repl : set -> (set -> set) -> set.
Notation Repl Repl.
Axiom ReplE : forall X : set , forall F : set -> set , forall y : set , y :e {F x|x :e X} -> exists x : set , x :e X /\ y = F x.
Axiom ReplE2 : forall X : set , forall F : set -> set , forall y : set , y :e {F x|x :e X} -> forall p : prop , (forall x : set , x :e X -> y = F x -> p) -> p.
Axiom ReplI : forall X : set , forall F : set -> set , forall x : set , x :e X -> F x :e {F x|x :e X}.

Definition TransSet : set->prop := fun U:set => forall X:set, X :e U -> X c= U.

Definition Union_closed : set->prop := fun U:set => forall X:set, X :e U -> Union X :e U.
Definition Power_closed : set->prop := fun U:set => forall X:set, X :e U -> Power X :e U.
Definition Repl_closed : set->prop := fun U:set => forall X:set, X :e U -> forall F:set->set,
   (forall x:set, x :e X -> F x :e U) -> {F x|x :e X} :e U.
Definition ZF_closed : set->prop := fun U:set =>
   Union_closed U
/\ Power_closed U
/\ Repl_closed U.

Parameter UnivOf : set->set.
Axiom UnivOf_In : forall N:set, N :e UnivOf N.
Axiom UnivOf_TransSet : forall N:set, TransSet (UnivOf N).
Axiom UnivOf_ZF_closed : forall N:set, ZF_closed (UnivOf N).
Axiom UnivOf_Min : forall N U:set, N :e U
  -> TransSet U
  -> ZF_closed U
  -> UnivOf N c= U.

(* Parameter UPair MHANdqNd8qPYjgPJug4t52j3JL41cLUy5KCibeyEq5yq3ytH *)
Parameter UPair : set -> set -> set.
Notation SetEnum2 UPair.
Axiom UPairE : forall x y z : set , x :e {y,z} -> x = y \/ x = z.
Axiom UPairI1 : forall y z : set , y :e {y,z}.
Axiom UPairI2 : forall y z : set , z :e {y,z}.
(* Parameter Sing MHR1PpBC6jjmn142ZUqFZmz2DtPTkThiU856UxqHRu2d8qev *)
Parameter Sing : set -> set.
Notation SetEnum1 Sing.
Axiom SingE : forall x y : set , y :e {x} -> y = x.
Axiom SingI : forall x : set , x :e {x}.
(* Parameter binunion MLywQTtJcoNKgztgfTu69bhu4eUuLMxPDoLPPJ551y1WpprR *)
Parameter binunion : set -> set -> set.
(* Unicode :\/: "222a" *)
Infix :\/: 345 left  := binunion.
Axiom binunionI1 : forall X Y z : set , z :e X -> z :e X :\/: Y.
Axiom binunionI2 : forall X Y z : set , z :e Y -> z :e X :\/: Y.
Axiom binunionE : forall X Y z : set , z :e X :\/: Y -> z :e X \/ z :e Y.
(* Parameter Sep MMUCPW8ve1NeZQSF6QAYrhEzK8uiuz5z6MxqZnhkYVkV3gAE *)
Parameter Sep : set -> (set -> prop) -> set.
Notation Sep Sep.
Axiom SepI : forall X : set , forall P : (set -> prop) , forall x : set , x :e X -> P x -> x :e {x :e X|P x}.
Axiom SepE : forall X : set , forall P : (set -> prop) , forall x : set , x :e {x :e X|P x} -> x :e X /\ P x.
Axiom SepE1 : forall X : set , forall P : (set -> prop) , forall x : set , x :e {x :e X|P x} -> x :e X.
Axiom SepE2 : forall X : set , forall P : (set -> prop) , forall x : set , x :e {x :e X|P x} -> P x.
Axiom Sep_Subq : forall X:set, forall P:set->prop, {x :e X|P x} c= X.
Axiom Sep_In_Power : forall X:set, forall P:set->prop, {x :e X|P x} :e Power X.
(* Parameter ReplSep MH3YCcpFJ7KL3vGACnmMYpor6so4KFgnSSBfAHDGTrXoSvjn *)
Parameter ReplSep : set -> (set -> prop) -> (set -> set) -> set.
Notation ReplSep ReplSep.
Axiom ReplSepI : forall X : set , forall P : set -> prop , forall F : set -> set , forall x : set , x :e X -> P x -> F x :e {F x|x :e X,P x}.
Axiom ReplSepE : forall X : set , forall P : set -> prop , forall F : set -> set , forall y : set , y :e {F x|x :e X,P x} -> exists x : set , x :e X /\ P x /\ y = F x.
Axiom ReplSepE2 : forall X : set , forall P : set -> prop , forall F : set -> set , forall y : set , y :e {F x|x :e X,P x} -> forall p : prop , (forall x :e X , P x -> y = F x -> p) -> p.
(* Parameter ordsucc MG7MeUQKGRDWGfCpnv4BBfwuRumr4R1ngnkoEgKgz7jpCB6E *)
Parameter ordsucc : set -> set.
Notation Nat Empty ordsucc.
Axiom ordsuccI1 : forall x:set, x c= ordsucc x.
Axiom ordsuccI2 : forall x:set, x :e ordsucc x.
Axiom neq_ordsucc_0 : forall a:set, ordsucc a <> 0.
Axiom ordsucc_inj_contra : forall a b:set, a <> b -> ordsucc a <> ordsucc b.
Axiom In_0_1 : 0 :e 1.
Axiom In_1_2 : 1 :e 2.
Axiom In_0_2 : 0 :e 2.
Axiom neq_1_0 : 1 <> 0.
Axiom neq_2_0 : 2 <> 0.
Axiom neq_2_1 : 2 <> 1.
(* Parameter nat_p MGtPhoeZ5SW87BAP3FdYP4552YLVdN58Rrv2tcyyni3UE9wH *)
Parameter nat_p : set -> prop.
Axiom nat_0 : nat_p 0.
Axiom nat_ordsucc : forall n : set , nat_p n -> nat_p (ordsucc n).
Axiom nat_1 : nat_p 1.
Axiom nat_2 : nat_p 2.
Axiom nat_0_in_ordsucc : forall n, nat_p n -> 0 :e ordsucc n.
Axiom nat_ordsucc_in_ordsucc : forall n, nat_p n -> forall m :e n, ordsucc m :e ordsucc n.
Axiom nat_ind : forall p : set -> prop , p 0 -> (forall n , nat_p n -> p n -> p (ordsucc n)) -> forall n , nat_p n -> p n.

Definition omega : set := {n :e UnivOf Empty|nat_p n}.
Axiom omega_nat_p : forall n :e omega, nat_p n.
Axiom nat_p_omega : forall n:set, nat_p n -> n :e omega.

(* Parameter nat_primrec MH1PhR4nvTH9RtLNfcEMuKTZM5rLrJkGArrPzhCt6yHhFJjP *)
Parameter nat_primrec:set -> (set -> set -> set) -> set -> set.
Axiom nat_primrec_0 : forall z, forall f:set -> set -> set, nat_primrec z f 0 = z.
Axiom nat_primrec_S : forall z, forall f:set -> set -> set, forall n:set, nat_p n -> nat_primrec z f (ordsucc n) = f n (nat_primrec z f n).

(* Parameter add_nat MJC9zELvgcK8NgZVFMwkTCkumeG1MfPNBu7U2AwrhUkd85vb *)
Parameter add_nat : set->set->set.
Infix + 360 right := add_nat.
Axiom add_nat_p : forall n:set, nat_p n -> forall m:set, nat_p m -> nat_p (n + m).
Axiom add_nat_0R : forall n:set, n + 0 = n.
Axiom add_nat_SR : forall n m:set, nat_p m -> n + ordsucc m = ordsucc (n + m).

(* Parameter mul_nat MGgDk5BE7pAfKP8LBjCB4qhNfWeMH5nckQsnX5yL3XBMrvJm *)
Parameter mul_nat : set->set->set.
Infix * 355 right := mul_nat.
Axiom mul_nat_p : forall n:set, nat_p n -> forall m:set, nat_p m -> nat_p (n * m).
Axiom mul_nat_0R : forall n:set, n * 0 = 0.
Axiom mul_nat_SR : forall n m:set, nat_p m -> n * ordsucc m = n + n * m.

(* Parameter pair MKKGnKnC1quGLGnWpwB65MgQ7bPbCPc48zaQUdmq8s3fSrjf *)
Parameter pair : set -> set -> set.
(* Parameter lam MGNw2qbBL6u6B4yyFAmQMbqdhyHwqynrhYepMxjLsK829eTU *)
Parameter lam : set -> (set -> set) -> set.
(* Parameter ap MJ5EYDZNGhP3BE3iG8STL8H7dpyp21H28dqojZfKHnhxe7Lr *)
Parameter ap : set -> set -> set.
Notation SetImplicitOp ap.
Notation SetLam lam.
Axiom lamE : forall X : set , forall F : set -> set , forall z : set , z :e (fun x :e X => F x) -> exists x :e X , exists y :e F x , z = pair x y.
Axiom apI : forall f x y , pair x y :e f -> y :e f x.
Axiom apE : forall f x y , y :e f x -> pair x y :e f.
Axiom beta : forall X : set , forall F : set -> set , forall x : set , x :e X -> (fun x :e X => F x) x = F x.
Axiom beta0 : forall X : set , forall F : set -> set , forall x : set , x /:e X -> (fun x :e X => F x) x = 0.
(* Parameter tuple_p MMSrb3B6FZ15WbrfCy3juMY5aXFwGJTscGvs8rmeo9bwEVV1 *)
Parameter tuple_p : set->set->prop.
Axiom tuple_p_4_tuple : forall x y z w:set, tuple_p 4 (x,y,z,w).

(* Parameter Sigma MGNw2qbBL6u6B4yyFAmQMbqdhyHwqynrhYepMxjLsK829eTU*)
Parameter Sigma : set -> (set -> set) -> set.
(* Unicode Sigma_ "2211" *)
Binder+ Sigma_ , := Sigma.

Definition setprod : set->set->set := fun X Y:set => Sigma_ x :e X, Y.
Infix :*: 440 left := setprod.

(* Parameter Pi MJpkETdrSTs1ka5JreVM3TLryhJZfjq9E69cXcHoU8Da4Fnp *)
Parameter Pi : set -> (set -> set) -> set.
(* Unicode Pi_ "220f" *)
Binder+ Pi_ , := Pi.
Axiom lam_Pi : forall X:set, forall Y:set -> set, forall F:set -> set, (forall x :e X, F x :e Y x) -> (fun x :e X => F x) :e (Pi_ x :e X, Y x).
Axiom ap_Pi : forall X:set, forall Y:set -> set, forall f:set, forall x:set, f :e (Pi_ x :e X, Y x) -> x :e X -> f x :e Y x.
Axiom Pi_ext : forall X:set, forall Y:set -> set, forall f g :e (Pi_ x :e X, Y x), (forall x :e X, f x = g x) -> f = g.
Definition setexp : set->set->set := fun X Y:set => Pi_ y :e Y, X.
(* Superscript :^: *)
Infix :^: 430 left := setexp.

(** A few extra results not in the Egal library from 2014 **)
Axiom tuple_2_0_eq : forall x y, (x,y) 0 = x.
Axiom tuple_2_1_eq : forall x y, (x,y) 1 = y.

Axiom tuple_2_Sigma : forall X:set, forall Y:set -> set, forall x :e X, forall y :e Y x, (x,y) :e Sigma_ x :e X, Y x.
Axiom tuple_2_setprod : forall X:set, forall Y:set, forall x :e X, forall y :e Y, (x,y) :e X :*: Y.

Axiom lam_ext: forall X, forall F G:set -> set, (forall x :e X, F x = G x) -> (fun x :e X => F x) = (fun x :e X => G x).
Axiom lam_eta: forall X, forall F:set -> set, (fun x :e X => (fun x :e X => F x) x) = (fun x :e X => F x).

(* Parameter pack_e MLpQUFTRLTFhWmkhaDvcVaeGkhkdqV9s2MmoXk6TvGoFHbzB *)
Parameter pack_e : set -> set -> set.
Axiom pack_e_eta : forall X c, (fun i :e 2 => pack_e X c i) = pack_e X c.

(* Parameter struct_e MHRv9ytEw8vQa85GxQyvoRg7wLskCpDmf9KpNfQMb4SzsCVd *)
Parameter struct_e : set -> prop.

Axiom pack_struct_e: forall X, forall c:set, c :e X -> struct_e (pack_e X c).
Axiom struct_e_eta: forall S, struct_e S -> S = pack_e (S 0) (S 1).

Section unpack_e.
Variable A:SType.

Definition unpack_e : set -> (set -> set -> A) -> A := fun S c => c (S 0) (S 1).

Axiom unpack_e_eq : forall Phi:set -> set -> A,
  forall X, forall c:set, unpack_e (pack_e X c) Phi = Phi X c.

End unpack_e.

(* Parameter pack_u MJnGhddRV4VKokL4Ed5HWnkPPdeAYM3r2SarvMEtmaPHjCWr *)
Parameter pack_u : set -> (set -> set) -> set.
Axiom pack_u_eta : forall X, forall F:set -> set, (fun i :e 2 => pack_u X F i) = pack_u X F.

(* Parameter unpack_u_1 MKwmFK4yMX7auTJYk2tkdoULv7Wr89LbCoEU2Hhewf5e2Pdx *)
Parameter unpack_u_1 : set -> set -> set.
(* Parameter struct_u MMbUGXVUu3bJtyAPQL6MsjrMbuhTPSQVfqeQsMEVmDvmyVAX *)
Parameter struct_u : set -> prop.

Axiom pack_u_eq : forall X, forall F F':set -> set, (forall x :e X, F x = F' x) -> pack_u X F = pack_u X F'.
Axiom struct_u_eta: forall S, struct_u S -> S = pack_u (S 0) (unpack_u_1 S).

Section unpack_u.
Variable A:SType.

Definition unpack_u : set -> (set -> (set -> set) -> A) -> A := fun S F => F (S 0) (unpack_u_1 S).

Axiom unpack_u_eq : forall Phi:set -> (set -> set) -> A,
  (forall X, forall F F':set -> set, (forall x :e X, F x = F' x) -> Phi X F = Phi X F')
  ->
  forall X, forall F:set -> set, unpack_u (pack_u X F) Phi = Phi X F.

End unpack_u.

(* Parameter pack_b MGSXcsosKJPaBhj2mTSdaz7zR4QKeVKkyRRAnF86sC2i7N8s *)
Parameter pack_b : set -> (set -> set -> set) -> set.
Axiom pack_b_eta : forall X, forall F:set -> set -> set, (fun i :e 2 => pack_b X F i) = pack_b X F.

(* Parameter unpack_b_1 MLz44wmKLs7La2nmoH9hMrz7GQGPX6syw1hFB2V3B7NmuPzE *)
Parameter unpack_b_1 : set -> set -> set -> set.
(* Parameter struct_b MJcWvkNbHVQjaMSJgPdQiegnFmEykjLtqKPwPwG7koxG72T8 *)
Parameter struct_b : set -> prop.

Axiom pack_b_eq : forall X, forall F F':set -> set -> set, (forall x y :e X, F x y = F' x y) -> pack_b X F = pack_b X F'.
Axiom pack_struct_b: forall X, forall F:set -> set -> set, (forall x y :e X, F x y :e X) -> struct_b (pack_b X F).
Axiom struct_b_eta: forall S, struct_b S -> S = pack_b (S 0) (unpack_b_1 S).

Section unpack_b.
Variable A:SType.

Definition unpack_b : set -> (set -> (set -> set -> set) -> A) -> A := fun S F => F (S 0) (unpack_b_1 S).

Axiom unpack_b_eq : forall Phi:set -> (set -> set -> set) -> A,
  (forall X, forall F F':set -> set -> set, (forall x y :e X, F x y = F' x y) -> Phi X F = Phi X F')
  ->
  forall X, forall F:set -> set -> set, unpack_b (pack_b X F) Phi = Phi X F.

End unpack_b.

(* Parameter pack_p MHJGp4oYEAbpt4Vg43YvWbeDzkinCqo9KvJNZXZiUmkfr4ti *)
Parameter pack_p : set -> (set -> prop) -> set.
Axiom pack_p_eta : forall X, forall R:set -> prop, (fun i :e 2 => pack_p X R i) = pack_p X R.

(* Parameter unpack_p_1 MMFgYzJrsGnGqxsWMgjpewTBvMozg2dMntjxgyTw7VEWfyy4 *)
Parameter unpack_p_1 : set -> set -> prop.
(* Parameter struct_p MLfts8KKCxA97fwYthi4DvfhJqBr2o5YF2zot42bJoUNNzHk *)
Parameter struct_p : set -> prop.

Axiom pack_p_eq : forall X, forall R R':set -> prop, (forall x :e X, R x <-> R' x) -> pack_p X R = pack_p X R'.
Axiom pack_struct_p: forall X, forall R:set -> prop, struct_p (pack_p X R).
Axiom struct_p_eta: forall S, struct_p S -> S = pack_p (S 0) (unpack_p_1 S).

Section unpack_p.
Variable A:SType.

Definition unpack_p : set -> (set -> (set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (unpack_p_1 S).

Axiom unpack_p_eq : forall Phi:set -> (set -> prop) -> A,
  (forall X, forall R R':set -> prop, (forall x :e X, R x <-> R' x) -> Phi X R = Phi X R')
  ->
  forall X, forall R:set -> prop, unpack_p (pack_p X R) Phi = Phi X R.

End unpack_p.

(* Parameter pack_r MKJrmfMiutWpYLJtyqLf7veyu7P89FExEsunM3tmCnLVcnrc *)
Parameter pack_r : set -> (set -> set -> prop) -> set.
Axiom pack_r_eta : forall X, forall R:set -> set -> prop, (fun i :e 2 => pack_r X R i) = pack_r X R.

(* Parameter unpack_r_1 MKpPDQZuUqw13f1qZsRhRsyxEUPiXSQggfEtEsd5nfeUxSgS *)
Parameter unpack_r_1 : set -> set -> set -> prop.
(* Parameter struct_r MKRobQhSXJRf2zS2wcrh4SZDgAF8cbuPpPVQbsbqE5QXjBiU *)
Parameter struct_r : set -> prop.

Axiom pack_r_eq : forall X, forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) -> pack_r X R = pack_r X R'.
Axiom pack_struct_r: forall X, forall R:set -> set -> prop, struct_r (pack_r X R).
Axiom struct_r_eta: forall S, struct_r S -> S = pack_r (S 0) (unpack_r_1 S).

Section unpack_r.
Variable A:SType.

Definition unpack_r : set -> (set -> (set -> set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (unpack_r_1 S).

Axiom unpack_r_eq : forall Phi:set -> (set -> set -> prop) -> A,
  (forall X, forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) -> Phi X R = Phi X R')
  ->
  forall X, forall R:set -> set -> prop, unpack_r (pack_r X R) Phi = Phi X R.

End unpack_r.

(* Parameter pack_c MFqbJbgPSGaGrJwcKwYqxX6SbQCz8XiwwW1sMy2sZKkPpz4Z *)
Parameter pack_c : set -> ((set -> prop) -> prop) -> set.
Axiom pack_c_eta : forall X, forall C:(set -> prop) -> prop, (fun i :e 2 => pack_c X C i) = pack_c X C.

(* Parameter unpack_c_1 MHGCroTVKjJHzcudwmQmAt9JFfwpHdQjcgK5SeRdqveBVUcg *)
Parameter unpack_c_1 : set -> (set -> prop) -> prop.
(* Parameter struct_c MHwDVNMMFshgU5Cx27LkN9HLSJodPP8yaxpsbr2tMKCKhZ8V *)
Parameter struct_c : set -> prop.

Axiom pack_c_eq : forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) -> pack_c X C = pack_c X C'.
Axiom pack_struct_c: forall X, forall C:(set -> prop) -> prop, struct_c (pack_c X C).
Axiom struct_c_eta: forall S, struct_c S -> S = pack_c (S 0) (unpack_c_1 S).

Section unpack_c.
Variable A:SType.

Definition unpack_c : set -> (set -> ((set -> prop) -> prop) -> A) -> A := fun S Phi => Phi (S 0) (unpack_c_1 S).

Axiom unpack_c_eq : forall Phi:set -> ((set -> prop) -> prop) -> A,
  (forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) -> Phi X C = Phi X C')
  ->
  forall X, forall C:(set -> prop) -> prop, unpack_c (pack_c X C) Phi = Phi X C.

End unpack_c.
