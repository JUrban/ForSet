(* Unicode False "22A5" *)
Definition False : prop := forall P : prop , P.
(* Unicode True "22A4" *)
Definition True : prop := forall P : prop , P -> P.
Axiom TrueI : True.
Definition not : prop -> prop := fun A : prop => A -> False.
(* Unicode ~ "00ac" *)
Prefix ~ 700 := not.
Definition and : prop -> prop -> prop := fun A B : prop => forall P : prop , (A -> B -> P) -> P.
(* Unicode /\ "2227" *)
Infix /\ 780 left  := and.
Axiom andI : forall A B : prop , A -> B -> A /\ B.
Axiom and3I : forall P1 P2 P3 : prop, P1 -> P2 -> P3 -> P1 /\ P2 /\ P3.
Axiom and3E : forall P1 P2 P3: prop, P1 /\ P2 /\ P3 -> (forall p : prop , (P1 -> P2 -> P3 -> p) -> p).
Axiom and4I : forall P1 P2 P3 P4 : prop, P1 -> P2 -> P3 -> P4 -> P1 /\ P2 /\ P3 /\ P4.
Axiom and5I : forall P1 P2 P3 P4 P5: prop, P1 -> P2 -> P3 -> P4 -> P5 -> P1 /\ P2 /\ P3 /\ P4 /\ P5.
Definition or : prop -> prop -> prop := fun A B : prop => forall P : prop , (A -> P) -> (B -> P) -> P.
(* Unicode \/ "2228" *)
Infix \/ 785 left  := or.
Definition iff : prop -> prop -> prop := fun A B : prop => (A -> B) /\ (B -> A).
Infix <-> 805 := iff.
Axiom iffI : forall A B : prop , (A -> B) -> (B -> A) -> (A <-> B).
Axiom iffEL : forall A B : prop , (A <-> B) -> A -> B.
Axiom iffER : forall A B : prop , (A <-> B) -> B -> A.
Axiom iff_refl : forall A : prop , A <-> A.
Section Poly1_eq.
Variable A : SType.
Definition eq : A -> A -> prop := fun x y => forall Q : A -> prop , Q x -> Q y.
Definition neq : A -> A -> prop := fun x y => ~ eq x y.
End Poly1_eq.
Infix = 502 := eq.
(* Unicode <> "2260" *)
Infix <> 502 := neq.
Section Poly1_eqthms.
Variable A : SType.
Axiom eqI : forall x : A , x = x.
Axiom eq_sym : forall x y : A , x = y -> y = x.
End Poly1_eqthms.
Section Poly1_exdef.
Variable A : SType.
Variable Q : A -> prop.
Definition ex : prop := forall P : prop , (forall x : A , Q x -> P) -> P.
End Poly1_exdef.
(* Unicode exists "2203" *)
Binder+ exists , := ex.
Section Poly1_exthms.
Variable A : SType.
Axiom exI : forall P : A -> prop , forall x : A , P x -> exists x : A , P x.
Axiom exandE : forall P Q : A -> prop , (exists x : A , P x /\ Q x) -> forall p : prop , (forall x : A , P x -> Q x -> p) -> p.
End Poly1_exthms.
Axiom prop_ext2 : forall A B : prop , (A -> B) -> (B -> A) -> A = B.
Section FE.
Variable A B : SType.
Axiom func_ext : forall f g : A -> B , (forall x : A , f x = g x) -> f = g.
End FE.
Section PE.
Variable A : SType.
Axiom pred_ext : forall P Q : A -> prop , P c= Q -> Q c= P -> P = Q.
End PE.
Section RE.
Variable A B : SType.
Axiom reln_ext : forall R S : A -> B -> prop , R c= S -> S c= R -> R = S.
End RE.
Section RelnPoly1.
Variable A : SType.
Definition symmetric : (A -> A -> prop) -> prop := fun R => forall x y : A , R x y -> R y x.
Definition transitive : (A -> A -> prop) -> prop := fun R => forall x y z : A , R x y -> R y z -> R x z.
Definition per : (A -> A -> prop) -> prop := fun R => symmetric R /\ transitive R.
Axiom per_tra : forall R : A -> A -> prop , per R -> transitive R.
Axiom per_stra1 : forall R : A -> A -> prop , per R -> forall x y z : A , R y x -> R y z -> R x z.
Axiom per_ref1 : forall R : A -> A -> prop , per R -> forall x y : A , R x y -> R x x.
End RelnPoly1.
Section Choice.
Variable A : SType.
Parameter Eps : (A -> prop) -> A.
Axiom EpsR : forall P : A -> prop , forall x : A , P x -> P (Eps P).
End Choice.
Binder some , := Eps.
Section Poly1_Quotient.
Variable A:SType.
Definition canonical_elt : (A->A->prop)->A->A := fun R:A->A->prop => fun x:A => some y:A, R x y.
Axiom canonical_elt_rel : forall R:A->A->prop, forall x:A, R x x -> R x (canonical_elt R x).
Axiom canonical_elt_eq : forall R:A->A->prop, per A R -> forall x y:A, R x y -> canonical_elt R x = canonical_elt R y.
Axiom canonical_elt_idem : forall R:A->A->prop, per A R -> forall x:A, R x x -> canonical_elt R x = canonical_elt R (canonical_elt R x).
Definition quotient : (A->A->prop)->A->prop := fun R:A->A->prop => fun x:A => R x x /\ x = canonical_elt R x.
Axiom quotient_prop1 : forall R:A->A->prop, forall x:A, quotient R x -> R x x.
Axiom quotient_prop2 : forall R:A->A->prop, per A R -> forall x y:A, quotient R x -> quotient R y -> R x y -> x = y.
End Poly1_Quotient.
Section IfA.
Variable A : SType.
Definition If : prop -> A -> A -> A := (fun p x y => some z : A , p /\ z = x \/ ~ p /\ z = y).
Notation IfThenElse If.
Axiom If_0 : forall p : prop , forall x y : A , ~ p -> (if p then x else y) = y.
Axiom If_1 : forall p : prop , forall x y : A , p -> (if p then x else y) = x.
Axiom If_or : forall p : prop , forall x y : A , (if p then x else y) = x \/ (if p then x else y) = y.
End IfA.
Axiom classic : forall P : prop , P \/ ~ P.
Axiom NNPP : forall p : prop , ~ ~ p -> p.
Parameter In : set -> set -> prop.
Definition nIn : set -> set -> prop := fun x X => ~ In x X.
(* Unicode /:e "2209" *)
Infix /:e 502 := nIn.
Definition Subq : set -> set -> prop := fun X Y => forall x : set , x :e X -> x :e Y.
Binder+ exists , := ex ; and.
Axiom set_ext : forall X Y:set, X c= Y -> Y c= X -> X = Y.
(* Unicode Empty "2205" *)
Parameter Empty : set.
Axiom EmptyE : forall x : set , x /:e Empty.
Axiom Empty_Subq_eq : forall X : set , X c= Empty -> X = Empty.
(* Unicode Union "22C3" *)
Parameter Union : set -> set.
Axiom UnionE2 : forall X x : set , x :e (Union X) -> forall p : prop , (forall Y : set , x :e Y -> Y :e X -> p) -> p.
Axiom UnionI : forall X x Y : set , x :e Y -> Y :e X -> x :e (Union X).
(* Unicode Power "1D4AB" *)
Parameter Power : set -> set.
Axiom PowerE : forall X Y : set , Y :e Power X -> Y c= X.
Axiom PowerI : forall X Y : set , Y c= X -> Y :e (Power X).
Axiom Empty_In_Power : forall X : set , Empty :e Power X.
Axiom Self_In_Power : forall X : set , X :e Power X.
Parameter Repl : set -> (set -> set) -> set.
Notation Repl Repl.
Axiom ReplE : forall X : set , forall F : set -> set , forall y : set , y :e {F x|x :e X} -> exists x : set , x :e X /\ y = F x.
Axiom ReplE2 : forall X : set , forall F : set -> set , forall y : set , y :e {F x|x :e X} -> forall p : prop , (forall x : set , x :e X -> y = F x -> p) -> p.
Axiom ReplI : forall X : set , forall F : set -> set , forall x : set , x :e X -> F x :e {F x|x :e X}.

Definition TransSet : set->prop := fun U:set => forall X:set, X :e U -> X c= U.

Definition Union_closed : set->prop := fun U:set => forall X:set, X :e U -> Union X :e U.
Definition Power_closed : set->prop := fun U:set => forall X:set, X :e U -> Power X :e U.
Definition Repl_closed : set->prop := fun U:set => forall X:set, X :e U -> forall F:set->set,
   (forall x:set, x :e X -> F x :e U) -> {F x|x :e X} :e U.
Definition ZF_closed : set->prop := fun U:set =>
   Union_closed U
/\ Power_closed U
/\ Repl_closed U.

Parameter UnivOf : set->set.
Axiom UnivOf_In : forall N:set, N :e UnivOf N.
Axiom UnivOf_TransSet : forall N:set, TransSet (UnivOf N).
Axiom UnivOf_ZF_closed : forall N:set, ZF_closed (UnivOf N).
Axiom UnivOf_Min : forall N U:set, N :e U
  -> TransSet U
  -> ZF_closed U
  -> UnivOf N c= U.

(* Parameter UPair MHANdqNd8qPYjgPJug4t52j3JL41cLUy5KCibeyEq5yq3ytH *)
Parameter UPair : set -> set -> set.
Notation SetEnum2 UPair.
Axiom UPairE : forall x y z : set , x :e {y,z} -> x = y \/ x = z.
Axiom UPairI1 : forall y z : set , y :e {y,z}.
Axiom UPairI2 : forall y z : set , z :e {y,z}.
(* Parameter Sing MHR1PpBC6jjmn142ZUqFZmz2DtPTkThiU856UxqHRu2d8qev *)
Parameter Sing : set -> set.
Notation SetEnum1 Sing.
Axiom SingE : forall x y : set , y :e {x} -> y = x.
Axiom SingI : forall x : set , x :e {x}.
(* Parameter binunion MLywQTtJcoNKgztgfTu69bhu4eUuLMxPDoLPPJ551y1WpprR *)
Parameter binunion : set -> set -> set.
(* Unicode :\/: "222a" *)
Infix :\/: 345 left  := binunion.
Axiom binunionI1 : forall X Y z : set , z :e X -> z :e X :\/: Y.
Axiom binunionI2 : forall X Y z : set , z :e Y -> z :e X :\/: Y.
Axiom binunionE : forall X Y z : set , z :e X :\/: Y -> z :e X \/ z :e Y.
(* Parameter Sep MMUCPW8ve1NeZQSF6QAYrhEzK8uiuz5z6MxqZnhkYVkV3gAE *)
Parameter Sep : set -> (set -> prop) -> set.
Notation Sep Sep.
Axiom SepI : forall X : set , forall P : (set -> prop) , forall x : set , x :e X -> P x -> x :e {x :e X|P x}.
Axiom SepE : forall X : set , forall P : (set -> prop) , forall x : set , x :e {x :e X|P x} -> x :e X /\ P x.
Axiom SepE1 : forall X : set , forall P : (set -> prop) , forall x : set , x :e {x :e X|P x} -> x :e X.
Axiom SepE2 : forall X : set , forall P : (set -> prop) , forall x : set , x :e {x :e X|P x} -> P x.
Axiom Sep_Subq : forall X:set, forall P:set->prop, {x :e X|P x} c= X.
Axiom Sep_In_Power : forall X:set, forall P:set->prop, {x :e X|P x} :e Power X.
(* Parameter ReplSep MH3YCcpFJ7KL3vGACnmMYpor6so4KFgnSSBfAHDGTrXoSvjn *)
Parameter ReplSep : set -> (set -> prop) -> (set -> set) -> set.
Notation ReplSep ReplSep.
Axiom ReplSepI : forall X : set , forall P : set -> prop , forall F : set -> set , forall x : set , x :e X -> P x -> F x :e {F x|x :e X,P x}.
Axiom ReplSepE : forall X : set , forall P : set -> prop , forall F : set -> set , forall y : set , y :e {F x|x :e X,P x} -> exists x : set , x :e X /\ P x /\ y = F x.
Axiom ReplSepE2 : forall X : set , forall P : set -> prop , forall F : set -> set , forall y : set , y :e {F x|x :e X,P x} -> forall p : prop , (forall x :e X , P x -> y = F x -> p) -> p.
Axiom In_ind : forall P : set -> prop , (forall X : set , (forall x : set , x :e X -> P x) -> P X) -> forall X : set , P X.
Axiom In_irref : forall x , x /:e x.
Axiom In_no2cycle : forall x y , x :e y -> y /:e x.
(* Parameter ordsucc MG7MeUQKGRDWGfCpnv4BBfwuRumr4R1ngnkoEgKgz7jpCB6E *)
Parameter ordsucc : set -> set.
Notation Nat Empty ordsucc.
Axiom ordsuccI1 : forall x:set, x c= ordsucc x.
Axiom ordsuccI2 : forall x:set, x :e ordsucc x.
Axiom ordsuccE : forall x y : set , y :e ordsucc x -> y :e x \/ y = x.
Axiom neq_0_ordsucc : forall a:set, 0 <> ordsucc a.
Axiom neq_ordsucc_0 : forall a:set, ordsucc a <> 0.
Axiom ordsucc_inj : forall a b:set, ordsucc a = ordsucc b -> a = b.
Axiom ordsucc_inj_contra : forall a b:set, a <> b -> ordsucc a <> ordsucc b.
Axiom In_0_1 : 0 :e 1.
Axiom In_1_2 : 1 :e 2.
Axiom In_0_2 : 0 :e 2.
Axiom neq_1_0 : 1 <> 0.
Axiom neq_2_0 : 2 <> 0.
Axiom neq_2_1 : 2 <> 1.
(* Parameter nat_p MGtPhoeZ5SW87BAP3FdYP4552YLVdN58Rrv2tcyyni3UE9wH *)
Parameter nat_p : set -> prop.
Axiom nat_0 : nat_p 0.
Axiom nat_ordsucc : forall n : set , nat_p n -> nat_p (ordsucc n).
Axiom nat_1 : nat_p 1.
Axiom nat_2 : nat_p 2.
Axiom nat_0_in_ordsucc : forall n, nat_p n -> 0 :e ordsucc n.
Axiom nat_ordsucc_in_ordsucc : forall n, nat_p n -> forall m :e n, ordsucc m :e ordsucc n.
Axiom nat_ind : forall p : set -> prop , p 0 -> (forall n , nat_p n -> p n -> p (ordsucc n)) -> forall n , nat_p n -> p n.

Definition omega : set := {n :e UnivOf Empty|nat_p n}.
Axiom omega_nat_p : forall n :e omega, nat_p n.
Axiom nat_p_omega : forall n:set, nat_p n -> n :e omega.

(* Parameter nat_primrec MH1PhR4nvTH9RtLNfcEMuKTZM5rLrJkGArrPzhCt6yHhFJjP *)
Parameter nat_primrec:set -> (set -> set -> set) -> set -> set.
Axiom nat_primrec_0 : forall z, forall f:set -> set -> set, nat_primrec z f 0 = z.
Axiom nat_primrec_S : forall z, forall f:set -> set -> set, forall n:set, nat_p n -> nat_primrec z f (ordsucc n) = f n (nat_primrec z f n).

(* Parameter add_nat MJC9zELvgcK8NgZVFMwkTCkumeG1MfPNBu7U2AwrhUkd85vb *)
Parameter add_nat : set->set->set.
Infix + 360 right := add_nat.
Axiom add_nat_p : forall n:set, nat_p n -> forall m:set, nat_p m -> nat_p (n + m).
Axiom add_nat_0R : forall n:set, n + 0 = n.
Axiom add_nat_SR : forall n m:set, nat_p m -> n + ordsucc m = ordsucc (n + m).

(* Parameter mul_nat MGgDk5BE7pAfKP8LBjCB4qhNfWeMH5nckQsnX5yL3XBMrvJm *)
Parameter mul_nat : set->set->set.
Infix * 355 right := mul_nat.
Axiom mul_nat_p : forall n:set, nat_p n -> forall m:set, nat_p m -> nat_p (n * m).
Axiom mul_nat_0R : forall n:set, n * 0 = 0.
Axiom mul_nat_SR : forall n m:set, nat_p m -> n * ordsucc m = n + n * m.

(* Parameter pair MKKGnKnC1quGLGnWpwB65MgQ7bPbCPc48zaQUdmq8s3fSrjf *)
Parameter pair : set -> set -> set.
(* Parameter lam MGNw2qbBL6u6B4yyFAmQMbqdhyHwqynrhYepMxjLsK829eTU *)
Parameter lam : set -> (set -> set) -> set.
(* Parameter ap MJ5EYDZNGhP3BE3iG8STL8H7dpyp21H28dqojZfKHnhxe7Lr *)
Parameter ap : set -> set -> set.
Notation SetImplicitOp ap.
Notation SetLam lam.
Axiom lamE : forall X : set , forall F : set -> set , forall z : set , z :e (fun x :e X => F x) -> exists x :e X , exists y :e F x , z = pair x y.
Axiom apI : forall f x y , pair x y :e f -> y :e f x.
Axiom apE : forall f x y , y :e f x -> pair x y :e f.
Axiom beta : forall X : set , forall F : set -> set , forall x : set , x :e X -> (fun x :e X => F x) x = F x.
Axiom beta0 : forall X : set , forall F : set -> set , forall x : set , x /:e X -> (fun x :e X => F x) x = 0.
(* Parameter tuple_p MMSrb3B6FZ15WbrfCy3juMY5aXFwGJTscGvs8rmeo9bwEVV1 *)
Parameter tuple_p : set->set->prop.
Axiom tuple_p_4_tuple : forall x y z w:set, tuple_p 4 (x,y,z,w).

(* Parameter Sigma MGNw2qbBL6u6B4yyFAmQMbqdhyHwqynrhYepMxjLsK829eTU*)
Parameter Sigma : set -> (set -> set) -> set.
(* Unicode Sigma_ "2211" *)
Binder+ Sigma_ , := Sigma.

Definition setprod : set->set->set := fun X Y:set => Sigma_ x :e X, Y.
Infix :*: 440 left := setprod.

(* Parameter Pi MJpkETdrSTs1ka5JreVM3TLryhJZfjq9E69cXcHoU8Da4Fnp *)
Parameter Pi : set -> (set -> set) -> set.
(* Unicode Pi_ "220f" *)
Binder+ Pi_ , := Pi.
Axiom lam_Pi : forall X:set, forall Y:set -> set, forall F:set -> set, (forall x :e X, F x :e Y x) -> (fun x :e X => F x) :e (Pi_ x :e X, Y x).
Axiom ap_Pi : forall X:set, forall Y:set -> set, forall f:set, forall x:set, f :e (Pi_ x :e X, Y x) -> x :e X -> f x :e Y x.
Axiom Pi_ext : forall X:set, forall Y:set -> set, forall f g :e (Pi_ x :e X, Y x), (forall x :e X, f x = g x) -> f = g.
Definition setexp : set->set->set := fun X Y:set => Pi_ y :e Y, X.
(* Superscript :^: *)
Infix :^: 430 left := setexp.

(** A few extra results not in the Egal library from 2014 **)

Axiom In_0_3: 0 :e 3.
Axiom In_1_3: 1 :e 3.
Axiom In_2_3: 2 :e 3.
Axiom In_0_4: 0 :e 4.
Axiom In_1_4: 1 :e 4.
Axiom In_2_4: 2 :e 4.
Axiom In_3_4: 3 :e 4.
Axiom In_0_5: 0 :e 5.
Axiom In_1_5: 1 :e 5.
Axiom In_2_5: 2 :e 5.
Axiom In_3_5: 3 :e 5.
Axiom In_4_5: 4 :e 5.
Axiom In_0_6: 0 :e 6.
Axiom In_1_6: 1 :e 6.
Axiom In_2_6: 2 :e 6.
Axiom In_3_6: 3 :e 6.
Axiom In_4_6: 4 :e 6.
Axiom In_5_6: 5 :e 6.
Axiom In_0_7: 0 :e 7.
Axiom In_1_7: 1 :e 7.
Axiom In_2_7: 2 :e 7.
Axiom In_3_7: 3 :e 7.
Axiom In_4_7: 4 :e 7.
Axiom In_5_7: 5 :e 7.
Axiom In_6_7: 6 :e 7.
Axiom In_0_8: 0 :e 8.
Axiom In_1_8: 1 :e 8.
Axiom In_2_8: 2 :e 8.
Axiom In_3_8: 3 :e 8.
Axiom In_4_8: 4 :e 8.
Axiom In_5_8: 5 :e 8.
Axiom In_6_8: 6 :e 8.
Axiom In_7_8: 7 :e 8.
Axiom In_0_9: 0 :e 9.
Axiom In_1_9: 1 :e 9.
Axiom In_2_9: 2 :e 9.
Axiom In_3_9: 3 :e 9.
Axiom In_4_9: 4 :e 9.
Axiom In_5_9: 5 :e 9.
Axiom In_6_9: 6 :e 9.
Axiom In_7_9: 7 :e 9.
Axiom In_8_9: 8 :e 9.
Axiom cases_1: forall i :e 1, forall p:set->prop, p 0 -> p i.
Axiom cases_2: forall i :e 2, forall p:set->prop, p 0 -> p 1 -> p i.
Axiom cases_3: forall i :e 3, forall p:set->prop, p 0 -> p 1 -> p 2 -> p i.
Axiom cases_4: forall i :e 4, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p i.
Axiom cases_5: forall i :e 5, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p 4 -> p i.
Axiom cases_6: forall i :e 6, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p 4 -> p 5 -> p i.
Axiom cases_7: forall i :e 7, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p 4 -> p 5 -> p 6 -> p i.
Axiom cases_8: forall i :e 8, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p 4 -> p 5 -> p 6 -> p 7 -> p i.
Axiom cases_9: forall i :e 9, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p 4 -> p 5 -> p 6 -> p 7 -> p 8 -> p i.

Axiom neq_3_0: 3 <> 0.
Axiom neq_3_1: 3 <> 1.
Axiom neq_3_2: 3 <> 2.
Axiom neq_4_0: 4 <> 0.
Axiom neq_4_1: 4 <> 1.
Axiom neq_4_2: 4 <> 2.
Axiom neq_4_3: 4 <> 3.
Axiom neq_5_0: 5 <> 0.
Axiom neq_5_1: 5 <> 1.
Axiom neq_5_2: 5 <> 2.
Axiom neq_5_3: 5 <> 3.
Axiom neq_5_4: 5 <> 4.
Axiom neq_6_0: 6 <> 0.
Axiom neq_6_1: 6 <> 1.
Axiom neq_6_2: 6 <> 2.
Axiom neq_6_3: 6 <> 3.
Axiom neq_6_4: 6 <> 4.
Axiom neq_6_5: 6 <> 5.
Axiom neq_7_0: 7 <> 0.
Axiom neq_7_1: 7 <> 1.
Axiom neq_7_2: 7 <> 2.
Axiom neq_7_3: 7 <> 3.
Axiom neq_7_4: 7 <> 4.
Axiom neq_7_5: 7 <> 5.
Axiom neq_7_6: 7 <> 6.
Axiom neq_8_0: 8 <> 0.
Axiom neq_8_1: 8 <> 1.
Axiom neq_8_2: 8 <> 2.
Axiom neq_8_3: 8 <> 3.
Axiom neq_8_4: 8 <> 4.
Axiom neq_8_5: 8 <> 5.
Axiom neq_8_6: 8 <> 6.
Axiom neq_8_7: 8 <> 7.
Axiom neq_9_0: 9 <> 0.
Axiom neq_9_1: 9 <> 1.
Axiom neq_9_2: 9 <> 2.
Axiom neq_9_3: 9 <> 3.
Axiom neq_9_4: 9 <> 4.
Axiom neq_9_5: 9 <> 5.
Axiom neq_9_6: 9 <> 6.
Axiom neq_9_7: 9 <> 7.
Axiom neq_9_8: 9 <> 8.

Section Tuples.

Variable x0 x1: set.
Axiom tuple_2_0_eq: (x0,x1) 0 = x0.
Axiom tuple_2_1_eq: (x0,x1) 1 = x1.
Variable x2: set.
Axiom tuple_3_0_eq: (x0,x1,x2) 0 = x0.
Axiom tuple_3_1_eq: (x0,x1,x2) 1 = x1.
Axiom tuple_3_2_eq: (x0,x1,x2) 2 = x2.
Variable x3: set.
Axiom tuple_4_0_eq: (x0,x1,x2,x3) 0 = x0.
Axiom tuple_4_1_eq: (x0,x1,x2,x3) 1 = x1.
Axiom tuple_4_2_eq: (x0,x1,x2,x3) 2 = x2.
Axiom tuple_4_3_eq: (x0,x1,x2,x3) 3 = x3.
Variable x4: set.
Axiom tuple_5_0_eq: (x0,x1,x2,x3,x4) 0 = x0.
Axiom tuple_5_1_eq: (x0,x1,x2,x3,x4) 1 = x1.
Axiom tuple_5_2_eq: (x0,x1,x2,x3,x4) 2 = x2.
Axiom tuple_5_3_eq: (x0,x1,x2,x3,x4) 3 = x3.
Axiom tuple_5_4_eq: (x0,x1,x2,x3,x4) 4 = x4.
Variable x5: set.
Axiom tuple_6_0_eq: (x0,x1,x2,x3,x4,x5) 0 = x0.
Axiom tuple_6_1_eq: (x0,x1,x2,x3,x4,x5) 1 = x1.
Axiom tuple_6_2_eq: (x0,x1,x2,x3,x4,x5) 2 = x2.
Axiom tuple_6_3_eq: (x0,x1,x2,x3,x4,x5) 3 = x3.
Axiom tuple_6_4_eq: (x0,x1,x2,x3,x4,x5) 4 = x4.
Axiom tuple_6_5_eq: (x0,x1,x2,x3,x4,x5) 5 = x5.
Variable x6: set.
Axiom tuple_7_0_eq: (x0,x1,x2,x3,x4,x5,x6) 0 = x0.
Axiom tuple_7_1_eq: (x0,x1,x2,x3,x4,x5,x6) 1 = x1.
Axiom tuple_7_2_eq: (x0,x1,x2,x3,x4,x5,x6) 2 = x2.
Axiom tuple_7_3_eq: (x0,x1,x2,x3,x4,x5,x6) 3 = x3.
Axiom tuple_7_4_eq: (x0,x1,x2,x3,x4,x5,x6) 4 = x4.
Axiom tuple_7_5_eq: (x0,x1,x2,x3,x4,x5,x6) 5 = x5.
Axiom tuple_7_6_eq: (x0,x1,x2,x3,x4,x5,x6) 6 = x6.
Variable x7: set.
Axiom tuple_8_0_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 0 = x0.
Axiom tuple_8_1_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 1 = x1.
Axiom tuple_8_2_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 2 = x2.
Axiom tuple_8_3_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 3 = x3.
Axiom tuple_8_4_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 4 = x4.
Axiom tuple_8_5_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 5 = x5.
Axiom tuple_8_6_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 6 = x6.
Axiom tuple_8_7_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 7 = x7.
Variable x8: set.
Axiom tuple_9_0_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 0 = x0.
Axiom tuple_9_1_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 1 = x1.
Axiom tuple_9_2_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 2 = x2.
Axiom tuple_9_3_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 3 = x3.
Axiom tuple_9_4_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 4 = x4.
Axiom tuple_9_5_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 5 = x5.
Axiom tuple_9_6_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 6 = x6.
Axiom tuple_9_7_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 7 = x7.
Axiom tuple_9_8_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 8 = x8.

End Tuples.

Axiom tuple_2_Sigma : forall X:set, forall Y:set -> set, forall x :e X, forall y :e Y x, (x,y) :e Sigma_ x :e X, Y x.
Axiom tuple_2_setprod : forall X:set, forall Y:set, forall x :e X, forall y :e Y, (x,y) :e X :*: Y.

Axiom lam_ext: forall X, forall F G:set -> set, (forall x :e X, F x = G x) -> (fun x :e X => F x) = (fun x :e X => G x).
Axiom lam_eta: forall X, forall F:set -> set, (fun x :e X => (fun x :e X => F x) x) = (fun x :e X => F x).

Definition lam2 : set -> (set -> set) -> (set -> set -> set) -> set
 := fun X Y F => fun x :e X => fun y :e Y x => F x y.

Axiom beta2 : forall X, forall Y:set -> set, forall F:set->set->set, forall x :e X, forall y :e Y x, lam2 X Y F x y = F x y.

Definition Sep2 : set -> (set -> set) -> (set -> set -> prop) -> set
 := fun X Y R => {u :e Sigma_ x :e X, Y x | R (u 0) (u 1)}.

Axiom Sep2I: forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall x :e X, forall y :e Y x, R x y -> (x,y) :e Sep2 X Y R.

Axiom Sep2E: forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall u :e Sep2 X Y R, exists x :e X, exists y :e Y x, u = (x,y) /\ R x y.

Axiom Sep2E': forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall x y, (x,y) :e Sep2 X Y R -> x :e X /\ y :e Y x /\ R x y.

Axiom Sep2E'1: forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall x y, (x,y) :e Sep2 X Y R -> x :e X.

Axiom Sep2E'2: forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall x y, (x,y) :e Sep2 X Y R -> y :e Y x.

Axiom Sep2E'3: forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall x y, (x,y) :e Sep2 X Y R -> R x y.

