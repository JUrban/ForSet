(** ported by hand from Naproche-SAD/examples/tarski.ftl to egal **)
(** attempting to faithfully follow the tarski.ftl version, within reason,
    and adding a part at the end to "package" complete lattices as sets. **)

Section Poset.

Variable Elt: set -> prop.

Variable Leq: set -> set -> prop.
Infix <= 400 := Leq.

Definition Refl: prop := forall x, Elt x -> x <= x.
Hypothesis HRefl: Refl.

Definition ASymm: prop := forall x y, Elt x -> Elt y -> x <= y -> y <= x -> x = y.
Hypothesis HASymm: ASymm.

Definition Trans: prop := forall x y z, Elt x -> Elt y -> Elt z -> x <= y -> y <= z -> x <= z.
Hypothesis HTrans: Trans.

Section CompleteLattice.

Variable S T:set.
Hypothesis SElt: forall x :e S, Elt x.
Hypothesis TElt: forall x :e T, Elt x.
Hypothesis ST: S c= T.

Definition a_lower_bound: set -> prop := fun u => u :e T /\ forall x :e S, u <= x.
Definition an_upper_bound: set -> prop := fun u => u :e T /\ forall x :e S, x <= u.
Definition an_inf: set -> prop := fun u => u :e T /\ a_lower_bound u /\ forall v, a_lower_bound v -> v <= u.
Definition a_sup: set -> prop := fun u => u :e T /\ an_upper_bound u /\ forall v, an_upper_bound v -> u <= v.

Lemma SupUn: forall u v, a_sup u -> a_sup v -> u = v.
let u v. assume Hu. assume Hv.
apply Hu. assume Hu12. apply Hu12.
assume Hu1: u :e T.
assume Hu2: an_upper_bound u.
assume Hu3: forall w, an_upper_bound w -> u <= w.
apply Hv. assume Hv12. apply Hv12.
assume Hv1: v :e T.
assume Hv2: an_upper_bound v.
assume Hv3: forall w, an_upper_bound w -> v <= w.
claim Luv: u <= v.
{ apply Hu3. exact Hv2. }
claim Lvu: v <= u.
{ apply Hv3. exact Hu2. }
apply HASymm.
- exact (TElt u Hu1).
- exact (TElt v Hv1).
- exact Luv.
- exact Lvu.
Qed.

Lemma InfUn: forall u v, an_inf u -> an_inf v -> u = v.
let u v. assume Hu. assume Hv.
apply Hu. assume Hu12. apply Hu12.
assume Hu1: u :e T.
assume Hu2: a_lower_bound u.
assume Hu3: forall w, a_lower_bound w -> w <= u.
apply Hv. assume Hv12. apply Hv12.
assume Hv1: v :e T.
assume Hv2: a_lower_bound v.
assume Hv3: forall w, a_lower_bound w -> w <= v.
claim Luv: u <= v.
{ apply Hv3. exact Hu2. }
claim Lvu: v <= u.
{ apply Hu3. exact Hv2. }
apply HASymm.
- exact (TElt u Hu1).
- exact (TElt v Hv1).
- exact Luv.
- exact Lvu.
Qed.

End CompleteLattice.

Definition MetaCompleteLattice : set -> prop :=
  fun S => (forall x :e S, Elt x) /\
  forall S' c= S, (exists u, an_inf S' S u) /\ (exists v, a_sup S' S v).

(** Since this definition is in the Poset section, it unfortunately depends on Leq. **)
Definition Meta_on : (set -> set) -> set -> prop := fun f D => (forall x :e D, f x :e D).

Definition Meta_monotone : (set -> set) -> set -> prop := fun f D => forall x y :e D, x <= y -> f x <= f y.

Section MetaKnasterTarski.

Variable U:set.
Hypothesis HU: MetaCompleteLattice U.
Variable f:set -> set.
Hypothesis Hf1: Meta_on f U.
Hypothesis Hf2: Meta_monotone f U.
Let S := {x :e U | f x = x}.

Theorem MetaKnasterTarski: MetaCompleteLattice S.
prove (forall x :e S, Elt x) /\ forall S' c= S, (exists u, an_inf S' S u) /\ (exists v, a_sup S' S v).
apply HU.
assume HU1: forall x :e U, Elt x.
assume HU2: forall S' c= U, (exists u, an_inf S' U u) /\ (exists v, a_sup S' U v).
claim LSU: S c= U.
{ exact Sep_Subq U (fun x => f x = x). }
apply andI.
- prove forall x :e S, Elt x.
  let x. assume Hx. apply HU1. exact SepE1 U (fun x => f x = x) x Hx.
- let T. assume HT: T c= S.
  claim Lsup: exists v, a_sup T S v.
  { set P := { x :e U | f x <= x /\ an_upper_bound T U x }.
    claim L1: P c= U.
    { apply Sep_Subq. }
    claim L2: exists p, an_inf P U p.
    { apply HU2 P L1. exact (fun H _ => H). }
    apply L2. let p. assume Hp: an_inf P U p.
    apply Hp. assume Hp12. apply Hp12.
    assume Hp1: p :e U.
    assume Hp2: a_lower_bound P U p.
    assume Hp3: forall v, a_lower_bound P U v -> v <= p.
    apply Hp2.
    assume _.
    assume Hp2b: forall x :e P, p <= x.
    claim L3: a_lower_bound P U p.
    { prove p :e U /\ forall x :e P, p <= x.
      apply andI.
      - exact Hp1.
      - exact Hp2b.
    }
    claim L4: an_upper_bound T U p.
    { prove p :e U /\ forall x :e T, x <= p.
      apply andI.
      - exact Hp1.
      - let x. assume Hx: x :e T. prove x <= p.
        claim HxS: x :e S.
	{ exact HT x Hx. }
        apply SepE U (fun x => f x = x) x HxS.
	assume HxU: x :e U.
	assume _.
        apply Hp3.
	prove a_lower_bound P U x.
	prove x :e U /\ forall y :e P, x <= y.
	apply andI.
	+ exact HxU.
	+ let y. assume Hy: y :e P.
          apply SepE U (fun x => f x <= x /\ an_upper_bound T U x) y Hy.
	  assume HyU: y :e U.
	  assume Hy23. apply Hy23.
	  assume Hy2: f y <= y.
	  assume Hy3: an_upper_bound T U y.
	  prove x <= y.
	  apply Hy3.
	  assume _.
	  assume Hy3b: forall z :e T, z <= y.
	  apply Hy3b.
	  exact Hx.
    }
    claim L5: f p = p.
    { claim L5a: f p <= p.
      { apply Hp3.
        prove a_lower_bound P U (f p).
	prove f p :e U /\ forall x :e P, f p <= x.
	apply andI.
	- exact Hf1 p Hp1.
	- let x. assume Hx: x :e P.
	  apply SepE U (fun x => f x <= x /\ an_upper_bound T U x) x Hx.
	  assume HxU: x :e U.
	  assume Hx23: f x <= x /\ an_upper_bound T U x.
	  apply Hx23.
	  assume Hx2: f x <= x.
	  assume Hx3: an_upper_bound T U x.
	  prove f p <= x.
	  apply HTrans (f p) (f x) x (HU1 (f p) (Hf1 p Hp1)) (HU1 (f x) (Hf1 x HxU)) (HU1 x HxU).
	  + prove f p <= f x. apply Hf2 p Hp1 x HxU.
	    prove p <= x. apply L3. assume _ L3b.
	    apply L3b.
	    prove x :e P.
	    exact Hx.
	  + exact Hx2.
      }
      apply HASymm (f p) p (HU1 (f p) (Hf1 p Hp1)) (HU1 p Hp1).
      - prove f p <= p. exact L5a.
      - prove p <= f p. apply Hp2b.
        prove f p :e P.
	apply SepI.
	+ prove f p :e U. exact Hf1 p Hp1.
	+ prove f (f p) <= f p /\ an_upper_bound T U (f p).
	  apply andI.
	  * prove f (f p) <= f p. apply Hf2 (f p) (Hf1 p Hp1) p Hp1.
	    prove f p <= p.
	    exact L5a.
	  * { prove an_upper_bound T U (f p).
	      prove f p :e U /\ forall x :e T, x <= f p.
	      apply andI.
	      - exact Hf1 p Hp1.
	      - let x. assume Hx: x :e T. prove x <= f p.
	      	claim HxS: x :e S.
		{ exact HT x Hx. }
                apply SepE U (fun x => f x = x) x HxS.
		assume HxU: x :e U.
		assume Hxfp: f x = x.
	        apply HTrans x (f x) (f p) (HU1 x HxU) (HU1 (f x) (Hf1 x HxU)) (HU1 (f p) (Hf1 p Hp1)).
	        + prove x <= f x. rewrite Hxfp. exact HRefl x (HU1 x HxU).
		+ prove f x <= f p. apply Hf2 x HxU p Hp1.
		  prove x <= p.
		  apply L4. assume _ L4b.
		  apply L4b.
		  exact Hx.
            }
    }
    claim L6: p :e S.
    { prove p :e {x :e U | f x = x}.
      apply SepI.
      - prove p :e U. exact Hp1.
      - prove f p = p. exact L5.
    }
    witness p.
    prove a_sup T S p.
    prove p :e S /\ an_upper_bound T S p /\ forall v, an_upper_bound T S v -> p <= v.
    apply and3I.
    - exact L6.
    - prove an_upper_bound T S p.
      prove p :e S /\ forall x :e T, x <= p.
      apply andI.
      + exact L6.
      + apply L4. exact (fun _ H => H).
    - prove forall v, an_upper_bound T S v -> p <= v.
      let v.
      assume H3: v :e S /\ forall x :e T, x <= v.
      claim LvP: v :e P.
      { apply H3.
        assume Hv: v :e S.
        assume H4: forall x :e T, x <= v.
	apply SepE U (fun x => f x = x) v Hv.
	assume HvU: v :e U.
	assume Hvfp: f v = v.
	apply SepI.
	- prove v :e U. exact HvU.
	- prove f v <= v /\ an_upper_bound T U v.
	  apply andI.
          + prove f v <= v.
	    rewrite Hvfp.
	    apply HRefl.
	    apply HU1.
	    exact HvU.
	  + prove v :e U /\ forall x :e T, x <= v.
	    apply andI.
	    * exact HvU.
	    * exact H4.
      }
      prove p <= v.
      exact Hp2b v LvP.
  }
  claim Linf: exists u, an_inf T S u.
  { set P := { x :e U | x <= f x /\ a_lower_bound T U x }.
    claim L1: P c= U.
    { apply Sep_Subq. }
    claim L2: exists p, a_sup P U p.
    { apply HU2 P L1. exact (fun _ H => H). }
    apply L2. let p. assume Hp: a_sup P U p.
    apply Hp. assume Hp12. apply Hp12.
    assume Hp1: p :e U.
    assume Hp2: an_upper_bound P U p.
    assume Hp3: forall v, an_upper_bound P U v -> p <= v.
    apply Hp2.
    assume _.
    assume Hp2b: forall x :e P, x <= p.
    claim L3: an_upper_bound P U p.
    { prove p :e U /\ forall x :e P, x <= p.
      apply andI.
      - exact Hp1.
      - exact Hp2b.
    }
    claim L4: a_lower_bound T U p.
    { prove p :e U /\ forall x :e T, p <= x.
      apply andI.
      - exact Hp1.
      - let x. assume Hx: x :e T. prove p <= x.
        claim HxS: x :e S.
	{ exact HT x Hx. }
        apply SepE U (fun x => f x = x) x HxS.
	assume HxU: x :e U.
	assume _.
        apply Hp3.
	prove an_upper_bound P U x.
	prove x :e U /\ forall y :e P, y <= x.
	apply andI.
	+ exact HxU.
	+ let y. assume Hy: y :e P.
          apply SepE U (fun x => x <= f x /\ a_lower_bound T U x) y Hy.
	  assume HyU: y :e U.
	  assume Hy23. apply Hy23.
	  assume Hy2: y <= f y.
	  assume Hy3: a_lower_bound T U y.
	  prove y <= x.
	  apply Hy3.
	  assume _.
	  assume Hy3b: forall z :e T, y <= z.
	  apply Hy3b.
	  exact Hx.
    }
    claim L5: f p = p.
    { claim L5a: p <= f p.
      { apply Hp3.
        prove an_upper_bound P U (f p).
	prove f p :e U /\ forall x :e P, x <= f p.
	apply andI.
	- exact Hf1 p Hp1.
	- let x. assume Hx: x :e P.
	  apply SepE U (fun x => x <= f x /\ a_lower_bound T U x) x Hx.
	  assume HxU: x :e U.
	  assume Hx23: x <= f x /\ a_lower_bound T U x.
	  apply Hx23.
	  assume Hx2: x <= f x.
	  assume Hx3: a_lower_bound T U x.
	  prove x <= f p.
	  apply HTrans x (f x) (f p) (HU1 x HxU) (HU1 (f x) (Hf1 x HxU)) (HU1 (f p) (Hf1 p Hp1)).
	  + exact Hx2.
	  + prove f x <= f p. apply Hf2 x HxU p Hp1.
	    prove x <= p. apply L3. assume _ L3b.
	    apply L3b.
	    prove x :e P.
	    exact Hx.
      }
      apply HASymm (f p) p (HU1 (f p) (Hf1 p Hp1)) (HU1 p Hp1).
      - prove f p <= p. apply Hp2b.
        prove f p :e P.
	apply SepI.
	+ prove f p :e U. exact Hf1 p Hp1.
	+ prove f p <= f (f p) /\ a_lower_bound T U (f p).
	  apply andI.
	  * prove f p <= f (f p). apply Hf2 p Hp1 (f p) (Hf1 p Hp1).
	    prove p <= f p.
	    exact L5a.
	  * { prove a_lower_bound T U (f p).
	      prove f p :e U /\ forall x :e T, f p <= x.
	      apply andI.
	      - exact Hf1 p Hp1.
	      - let x. assume Hx: x :e T. prove f p <= x.
	      	claim HxS: x :e S.
		{ exact HT x Hx. }
                apply SepE U (fun x => f x = x) x HxS.
		assume HxU: x :e U.
		assume Hxfp: f x = x.
	        apply HTrans (f p) (f x) x (HU1 (f p) (Hf1 p Hp1)) (HU1 (f x) (Hf1 x HxU)) (HU1 x HxU).
		+ prove f p <= f x. apply Hf2 p Hp1 x HxU.
		  prove p <= x.
		  apply L4. assume _ L4b.
		  apply L4b.
		  exact Hx.
	        + prove f x <= x. rewrite Hxfp. exact HRefl x (HU1 x HxU).
            }
      - prove p <= f p. exact L5a.
    }
    claim L6: p :e S.
    { prove p :e {x :e U | f x = x}.
      apply SepI.
      - prove p :e U. exact Hp1.
      - prove f p = p. exact L5.
    }
    witness p.
    prove an_inf T S p.
    prove p :e S /\ a_lower_bound T S p /\ forall v, a_lower_bound T S v -> v <= p.
    apply and3I.
    - exact L6.
    - prove a_lower_bound T S p.
      prove p :e S /\ forall x :e T, p <= x.
      apply andI.
      + exact L6.
      + apply L4. exact (fun _ H => H).
    - prove forall v, a_lower_bound T S v -> v <= p.
      let v.
      assume H3: v :e S /\ forall x :e T, v <= x.
      claim LvP: v :e P.
      { apply H3.
        assume Hv: v :e S.
        assume H4: forall x :e T, v <= x.
	apply SepE U (fun x => f x = x) v Hv.
	assume HvU: v :e U.
	assume Hvfp: f v = v.
	apply SepI.
	- prove v :e U. exact HvU.
	- prove v <= f v /\ a_lower_bound T U v.
	  apply andI.
          + prove v <= f v.
	    rewrite Hvfp.
	    apply HRefl.
	    apply HU1.
	    exact HvU.
	  + prove v :e U /\ forall x :e T, v <= x.
	    apply andI.
	    * exact HvU.
	    * exact H4.
      }
      prove v <= p.
      exact Hp2b v LvP.
  }
  apply andI.
  + exact Linf.
  + exact Lsup.
Qed.

End MetaKnasterTarski.

End Poset.

(** This is the end of the part that closely follows tarski.ftl **)
(** The rest is to reasonably package the information in a way that could be used outside the section above. **)

(** Import struct_r information to use for packing. The 'axioms' are theorems proven earlier. **)
Definition pack_r : set -> (set -> set -> prop) -> set := fun X R => (X,encode_r X R).

Definition struct_r : set -> prop := fun S => forall q:set -> prop, (forall X:set, forall R:set -> set -> prop, q (pack_r X R)) -> q S.

Axiom pack_r_ext : forall X, forall R R':set -> set -> prop,
     (forall x y :e X, R x y <-> R' x y)
  -> pack_r X R = pack_r X R'.
Axiom pack_struct_r_I: forall X, forall R:set -> set -> prop, struct_r (pack_r X R).
Axiom struct_r_eta: forall S, struct_r S -> S = pack_r (S 0) (decode_r (S 1)).

Section unpack_r.
Variable A:SType.

Definition unpack_r : set -> (set -> (set -> set -> prop) -> A) -> A := fun S Phi => Phi (S 0) (decode_r (S 1)).

Axiom unpack_r_eq : forall Phi:set -> (set -> set -> prop) -> A,
  (forall X, forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) -> Phi X R = Phi X R')
  ->
  forall X, forall R:set -> set -> prop, unpack_r (pack_r X R) Phi = Phi X R.

End unpack_r.

(** Define Poset and CompleteLattice as a structure with a carrier and a binary relation. **)

(** A Poset is a pair (T,<=) where <= is most easily used as Leq:set->set->prop,
    but is secretly packaged as {(x,y) | x :e T, y :e T, Leq x y} in the second component.
    **)
Definition Poset : set -> prop := fun P =>
  struct_r P /\
  unpack_r prop P
    (fun T Leq => Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq).

Lemma Poset_unpack_r_eq: forall T, forall Leq:set -> set -> prop,
  unpack_r prop (pack_r T Leq) (fun T Leq => Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq)
  = (Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq).
claim L1: forall T, forall Leq Leq':set -> set -> prop, (forall x y :e T, Leq x y <-> Leq' x y) ->
   (Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq) = (Refl (fun x => x :e T) Leq' /\ ASymm (fun x => x :e T) Leq' /\ Trans (fun x => x :e T) Leq').
{ let T Leq Leq'.
  assume H1: forall x y :e T, Leq x y <-> Leq' x y.
  claim H1a: forall x y :e T, Leq x y -> Leq' x y.
  { let x. assume Hx. let y. assume Hy. apply H1 x Hx y Hy. assume H _. exact H. }
  claim H1b: forall x y :e T, Leq' x y -> Leq x y.
  { let x. assume Hx. let y. assume Hy. apply H1 x Hx y Hy. assume _ H. exact H. }
  prove (Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq) = (Refl (fun x => x :e T) Leq' /\ ASymm (fun x => x :e T) Leq' /\ Trans (fun x => x :e T) Leq').
  apply prop_ext2.
  - assume H2. apply H2. assume H3.
    assume HTra: forall x y z, x :e T -> y :e T -> z :e T -> Leq x y -> Leq y z -> Leq x z.
    apply H3.
    assume HRef: forall x :e T, Leq x x.
    assume HASym: forall x y, x :e T -> y :e T -> Leq x y -> Leq y x -> x = y.
    apply and3I.
    + let x. assume Hx. prove Leq' x x. apply H1a x Hx x Hx. prove Leq x x. apply HRef x Hx.
    + let x y. assume Hx Hy. assume H4 H5. apply HASym x y Hx Hy.
      * apply H1b x Hx y Hy. exact H4.
      * apply H1b y Hy x Hx. exact H5.
    + let x y z. assume Hx Hy Hz. assume H4 H5. apply H1a x Hx z Hz. apply HTra x y z Hx Hy Hz.
      * apply H1b x Hx y Hy. exact H4.
      * apply H1b y Hy z Hz. exact H5.
  - assume H2. apply H2. assume H3.
    assume HTra: forall x y z, x :e T -> y :e T -> z :e T -> Leq' x y -> Leq' y z -> Leq' x z.
    apply H3.
    assume HRef: forall x :e T, Leq' x x.
    assume HASym: forall x y, x :e T -> y :e T -> Leq' x y -> Leq' y x -> x = y.
    apply and3I.
    + let x. assume Hx. prove Leq x x. apply H1b x Hx x Hx. prove Leq' x x. apply HRef x Hx.
    + let x y. assume Hx Hy. assume H4 H5. apply HASym x y Hx Hy.
      * apply H1a x Hx y Hy. exact H4.
      * apply H1a y Hy x Hx. exact H5.
    + let x y z. assume Hx Hy Hz. assume H4 H5. apply H1b x Hx z Hz. apply HTra x y z Hx Hy Hz.
      * apply H1a x Hx y Hy. exact H4.
      * apply H1a y Hy z Hz. exact H5.
}
exact unpack_r_eq prop (fun T Leq => Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq) L1.
Qed.

Theorem Poset_equiv : forall P,
  Poset P <-> exists T, exists Leq:set -> set -> prop,
                     P = pack_r T Leq
		  /\ Refl (fun x => x :e T) Leq
		  /\ ASymm (fun x => x :e T) Leq
		  /\ Trans (fun x => x :e T) Leq.
let P.
apply iffI.
- assume HP: Poset P. apply HP.
  assume H1: struct_r P.
  claim L1: P = pack_r (P 0) (decode_r (P 1)).
  { exact struct_r_eta P H1. }
  prove unpack_r prop P (fun T Leq => Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq) ->
     exists T, exists Leq:set -> set -> prop,
                  P = pack_r T Leq /\ Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq.
  rewrite L1 at 1.
  prove unpack_r prop (pack_r (P 0) (decode_r (P 1))) (fun T Leq => Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq) ->
     exists T, exists Leq:set -> set -> prop,
                  P = pack_r T Leq /\ Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq.
  rewrite Poset_unpack_r_eq (P 0) (decode_r (P 1)).
  assume H2: Refl (fun x => x :e P 0) (decode_r (P 1)) /\ ASymm (fun x => x :e P 0) (decode_r (P 1)) /\ Trans (fun x => x :e P 0) (decode_r (P 1)).
  witness (P 0).
  witness (decode_r (P 1)).
  apply and4I.
  + exact L1.
  + apply H2. assume H3 _. apply H3. assume H4 _. exact H4.
  + apply H2. assume H3 _. apply H3. assume _ H4. exact H4.
  + apply H2. assume _ H3. exact H3.
- assume H5. apply H5. let T. assume H6. apply H6. let Leq.
  assume H7. apply H7. assume H8.
  assume HTra: Trans (fun x => x :e T) Leq.
  apply H8. assume H9.
  assume HASy: ASymm (fun x => x :e T) Leq.
  apply H9.
  assume HE: P = pack_r T Leq.
  assume HRef: Refl (fun x => x :e T) Leq.
  prove Poset P.
  prove struct_r P /\
        unpack_r prop P
           (fun T Leq => Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq).
  rewrite HE.
  prove struct_r (pack_r T Leq) /\
        unpack_r prop (pack_r T Leq)
           (fun T Leq => Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq).
  apply andI.
  - apply pack_struct_r_I.
  - rewrite Poset_unpack_r_eq T Leq.
    prove Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq.
    apply and3I.
    + exact HRef.
    + exact HASy.
    + exact HTra.
Qed.

(** A complete lattice is a poset that unpacks to be a "meta complete lattice" as defined above. **)
(** Note that when using MetaCompleteLattice,
  T plays the role of both the class of "elements"
  and as the underlying set of the lattice. **)
Definition CompleteLattice : set -> prop := fun L =>
  Poset L /\
  unpack_r prop L
    (fun T Leq => MetaCompleteLattice (fun x => x :e T) Leq T).

Lemma SubReln_lb : forall T, forall Leq Leq':set -> set -> prop,
     (forall x y :e T, Leq x y -> Leq' x y)
  -> forall S c= T, forall u, a_lower_bound (fun x => x :e T) Leq S T u -> a_lower_bound (fun x => x :e T) Leq' S T u.
let T Leq Leq'.
assume H1.
let S. assume HST. let u.
assume H2. apply H2.
assume H2a: u :e T.
assume H2b: forall x :e S, Leq u x.
prove u :e T /\ forall x :e S, Leq' u x.
apply andI.
- exact H2a.
- let x. assume Hx. apply H1 u H2a x (HST x Hx). exact H2b x Hx.
Qed.

Lemma SubReln_ub : forall T, forall Leq Leq':set -> set -> prop,
     (forall x y :e T, Leq x y -> Leq' x y)
  -> forall S c= T, forall u, an_upper_bound (fun x => x :e T) Leq S T u -> an_upper_bound (fun x => x :e T) Leq' S T u.
let T Leq Leq'.
assume H1.
claim L1: forall x y :e T, Leq y x -> Leq' y x.
{ let x. assume Hx. let y. assume Hy. exact H1 y Hy x Hx. }
exact SubReln_lb T (fun x y => Leq y x) (fun x y => Leq' y x) L1.
Qed.

Lemma EqReln_inf : forall T, forall Leq Leq':set -> set -> prop,
    (forall x y :e T, Leq x y <-> Leq' x y)
 -> forall S c= T, forall u, an_inf (fun x => x :e T) Leq S T u -> an_inf (fun x => x :e T) Leq' S T u.
let T Leq Leq'. assume H1. let S. assume HST. let u. assume H2.
claim H1a: forall x y :e T, Leq x y -> Leq' x y.
{ let x. assume Hx. let y. assume Hy. apply H1 x Hx y Hy. assume H _. exact H. }
claim H1b: forall x y :e T, Leq' x y -> Leq x y.
{ let x. assume Hx. let y. assume Hy. apply H1 x Hx y Hy. assume _ H. exact H. }
apply H2. assume H3. apply H3.
assume H4: u :e T.
assume H5: a_lower_bound (fun x => x :e T) Leq S T u.
assume H6: forall v, a_lower_bound (fun x => x :e T) Leq S T v -> Leq v u.
prove u :e T /\ a_lower_bound (fun x => x :e T) Leq' S T u /\ forall v, a_lower_bound (fun x => x :e T) Leq' S T v -> Leq' v u.
apply and3I.
- exact H4.
- exact SubReln_lb T Leq Leq' H1a S HST u H5.
- let v.
  assume H7: a_lower_bound (fun x => x :e T) Leq' S T v.
  claim Lv: v :e T.
  { apply H7. exact (fun H _ => H). }
  prove Leq' v u. apply H1a v Lv u H4. prove Leq v u. apply H6. exact SubReln_lb T Leq' Leq H1b S HST v H7.
Qed.

Lemma EqReln_sup : forall T, forall Leq Leq':set -> set -> prop,
    (forall x y :e T, Leq x y <-> Leq' x y)
 -> forall S c= T, forall u, a_sup (fun x => x :e T) Leq S T u -> a_sup (fun x => x :e T) Leq' S T u.
let T Leq Leq'. assume H1.
claim L1: forall x y :e T, Leq y x <-> Leq' y x.
{ let x. assume Hx. let y. assume Hy. exact H1 y Hy x Hx. }
exact EqReln_inf T (fun x y => Leq y x) (fun x y => Leq' y x) L1.
Qed.

Lemma CompleteLattice_unpack_r_eq: forall T, forall Leq:set -> set -> prop,
  unpack_r prop (pack_r T Leq)
    (fun T Leq => MetaCompleteLattice (fun x => x :e T) Leq T)
  = (MetaCompleteLattice (fun x => x :e T) Leq T).
claim L1: forall T, forall Leq Leq':set -> set -> prop, (forall x y :e T, Leq x y <-> Leq' x y) ->
    (MetaCompleteLattice (fun x => x :e T) Leq T) = (MetaCompleteLattice (fun x => x :e T) Leq' T).
{ let T Leq Leq'.
  assume H1: forall x y :e T, Leq x y <-> Leq' x y.
  claim H1s: forall x y :e T, Leq' x y <-> Leq x y.
  { let x. assume Hx. let y. assume Hy.
    apply H1 x Hx y Hy. assume H1a H1b. apply iffI.
    + exact H1b.
    + exact H1a.
  }
  prove (MetaCompleteLattice (fun x => x :e T) Leq T) = (MetaCompleteLattice (fun x => x :e T) Leq' T).
  apply prop_ext2.
  - assume H2: MetaCompleteLattice (fun x => x :e T) Leq T.
    apply H2.
    assume H2a: forall x :e T, x :e T.
    assume H2b: forall S c= T, (exists u, an_inf (fun x => x :e T) Leq S T u) /\ (exists v, a_sup (fun x => x :e T) Leq S T v).
    prove (forall x :e T, x :e T) /\ forall S c= T, (exists u, an_inf (fun x => x :e T) Leq' S T u) /\ (exists v, a_sup (fun x => x :e T) Leq' S T v).
    apply andI.
    + exact H2a.
    + let S. assume HST: S c= T.
      apply H2b S HST.
      assume H3: exists u, an_inf (fun x => x :e T) Leq S T u.
      assume H4: exists v, a_sup (fun x => x :e T) Leq S T v.
      apply andI.
      * prove exists u, an_inf (fun x => x :e T) Leq' S T u.
        apply H3.
	let u. assume H5.
	witness u.
        exact EqReln_inf T Leq Leq' H1 S HST u H5.
      * prove exists v, a_sup (fun x => x :e T) Leq' S T v.
        apply H4.
        let v. assume H5.
        witness v.
        exact EqReln_sup T Leq Leq' H1 S HST v H5.
  - assume H2: MetaCompleteLattice (fun x => x :e T) Leq' T.
    apply H2.
    assume H2a: forall x :e T, x :e T.
    assume H2b: forall S c= T, (exists u, an_inf (fun x => x :e T) Leq' S T u) /\ (exists v, a_sup (fun x => x :e T) Leq' S T v).
    prove (forall x :e T, x :e T) /\ forall S c= T, (exists u, an_inf (fun x => x :e T) Leq S T u) /\ (exists v, a_sup (fun x => x :e T) Leq S T v).
    apply andI.
    + exact H2a.
    + let S. assume HST: S c= T.
      apply H2b S HST.
      assume H3: exists u, an_inf (fun x => x :e T) Leq' S T u.
      assume H4: exists v, a_sup (fun x => x :e T) Leq' S T v.
      apply andI.
      * prove exists u, an_inf (fun x => x :e T) Leq S T u.
        apply H3.
        let u. assume H5.
        witness u.
        exact EqReln_inf T Leq' Leq H1s S HST u H5.
      * prove exists v, a_sup (fun x => x :e T) Leq S T v.
        apply H4.
	let v. assume H5.
        witness v.
        exact EqReln_sup T Leq' Leq H1s S HST v H5.
}
exact unpack_r_eq prop
        (fun T Leq => MetaCompleteLattice (fun x => x :e T) Leq T)
        L1.
Qed.

Theorem CompleteLattice_equiv : forall L,
  CompleteLattice L <->
     exists T, exists Leq:set -> set -> prop,
          L = pack_r T Leq /\ Poset L
          /\ (forall S c= T, exists u, an_inf (fun x => x :e T) Leq S T u)
          /\ (forall S c= T, exists v, a_sup (fun x => x :e T) Leq S T v).
let L.
apply iffI.
- assume HL: CompleteLattice L.
  apply HL.
  assume HP: Poset L.
  apply (Poset_equiv L).
  assume HPI _.
  apply HPI HP.
  let T. assume H1. apply H1. let Leq. assume H2. apply H2. assume H3. apply H3. assume H4. apply H4.
  assume H6: L = pack_r T Leq.
  assume _ _ _.
  rewrite H6.
  rewrite CompleteLattice_unpack_r_eq.
  assume H7: MetaCompleteLattice (fun x => x :e T) Leq T.
  apply H7.
  assume _.
  assume H8: forall S c= T, (exists u, an_inf (fun x => x :e T) Leq S T u) /\ (exists v, a_sup (fun x => x :e T) Leq S T v).
  witness T. witness Leq. apply and4I.
  + apply eqI set.
  + exact H6 Poset HP.
  + let S. assume HST. apply H8 S HST. assume H _. exact H.
  + let S. assume HST. apply H8 S HST. assume _ H. exact H.
- assume H1. apply H1. let T. assume H2. apply H2. let Leq. assume H3. apply H3.
  assume H4. apply H4. assume H5. apply H5.
  assume H6: L = pack_r T Leq.
  assume H7: Poset L.
  assume H8: forall S c= T, exists u, an_inf (fun x => x :e T) Leq S T u.
  assume H9: forall S c= T, exists v, a_sup (fun x => x :e T) Leq S T v.
  prove Poset L /\
     unpack_r prop L
       (fun T Leq => MetaCompleteLattice (fun x => x :e T) Leq T).
  apply andI.
  + exact H7.
  + rewrite H6.
    prove unpack_r prop (pack_r T Leq)
       (fun T Leq => MetaCompleteLattice (fun x => x :e T) Leq T).
    rewrite CompleteLattice_unpack_r_eq.
    prove MetaCompleteLattice (fun x => x :e T) Leq T.
    prove (forall x :e T, x :e T) /\ forall S c= T, (exists u, an_inf (fun x => x :e T) Leq S T u) /\ (exists v, a_sup (fun x => x :e T) Leq S T v).
    apply andI.
    * exact (fun x H => H).
    * { let S. assume HST. apply andI.
        - exact H8 S HST.
        - exact H9 S HST.
      }
Qed.

Theorem KnasterTarski_a: forall L, CompleteLattice L ->
  forall T, forall Leq:set -> set -> prop,
  L = pack_r T Leq ->
  forall f:set -> set, Meta_on (fun x => x :e T) Leq f T -> Meta_monotone (fun x => x :e T) Leq f T ->
  forall S, S = {x :e T|f x = x} -> CompleteLattice (pack_r S Leq).
let L. assume HL. let T Leq. assume HLeq.
let f. assume Hf1. assume Hf2.
let S. assume HS.
claim LP2: Poset L -> Refl (fun x => x :e T) Leq /\ ASymm (fun x => x :e T) Leq /\ Trans (fun x => x :e T) Leq.
{ rewrite HLeq at 1.
  assume H1. apply H1. assume _ H2.
  rewrite <- Poset_unpack_r_eq T Leq.
  exact H2.
}
apply HL.
assume HP: Poset L.
rewrite HLeq at 1.
rewrite CompleteLattice_unpack_r_eq T Leq.
assume HLCL: MetaCompleteLattice (fun x => x :e T) Leq T.
claim LST: forall x :e S, x :e T.
{ rewrite HS. exact Sep_Subq T (fun x => f x = x). }
claim LRef: forall x :e T, Leq x x.
{ apply LP2 HP. assume H _. apply H. assume H _. exact H. }
claim LASym: forall x y, x :e T -> y :e T -> Leq x y -> Leq y x -> x = y.
{ apply LP2 HP. assume H _. apply H. assume _ H. exact H. }
claim LTra: forall x y z, x :e T -> y :e T -> z :e T -> Leq x y -> Leq y z -> Leq x z.
{ apply LP2 HP. assume _ H. exact H. }
apply CompleteLattice_equiv (pack_r S Leq).
assume _ HIL.
apply HIL.
prove exists T, exists Leq':set -> set -> prop,
          pack_r S Leq = pack_r T Leq' /\ Poset (pack_r S Leq)
          /\ (forall S c= T, exists u, an_inf (fun x => x :e T) Leq' S T u)
          /\ (forall S c= T, exists v, a_sup (fun x => x :e T) Leq' S T v).
witness S. witness Leq.
claim LKT: (forall x :e S, x :e T) /\ (forall S' c= S, (exists u, an_inf (fun x => x :e T) Leq S' S u) /\ (exists v, a_sup (fun x => x :e T) Leq S' S v)).
{ rewrite HS.
  exact MetaKnasterTarski (fun x => x :e T) Leq LRef LASym LTra T HLCL f Hf1 Hf2.
}  
apply LKT.
assume KT1: forall x :e S, x :e T.
assume KT2: forall S' c= S, (exists u, an_inf (fun x => x :e T) Leq S' S u) /\ (exists v, a_sup (fun x => x :e T) Leq S' S v).
apply and4I.
- apply eqI set.
- apply Poset_equiv (pack_r S Leq). assume _ HIP. apply HIP.
  prove exists T, exists Leq':set -> set -> prop,
                     pack_r S Leq = pack_r T Leq'
		  /\ Refl (fun x => x :e T) Leq'
		  /\ ASymm (fun x => x :e T) Leq'
		  /\ Trans (fun x => x :e T) Leq'.
  witness S. witness Leq. apply and4I.
  + apply eqI set.
  + let x. assume Hx: x :e S. exact LRef x (LST x Hx).
  + let x y. assume Hx Hy. exact LASym x y (LST x Hx) (LST y Hy).
  + let x y z. assume Hx Hy Hz. exact LTra x y z (LST x Hx) (LST y Hy) (LST z Hz).
- let S'. assume HS'S. apply KT2 S' HS'S. assume H _. exact H.
- let S'. assume HS'S. apply KT2 S' HS'S. assume _ H. exact H.
Qed.

Theorem KnasterTarski_b: forall L, CompleteLattice L ->
  unpack_r prop L
   (fun T Leq =>
     forall f:set -> set, Meta_on (fun x => x :e T) Leq f T -> Meta_monotone (fun x => x :e T) Leq f T ->
     forall S, S = {x :e T|f x = x} -> CompleteLattice (pack_r S Leq)).
let L. assume HL.
claim L1: forall T, forall Leq Leq':set -> set -> prop,
  (forall x y :e T, Leq x y <-> Leq' x y)
 ->
  (forall f:set -> set, Meta_on (fun x => x :e T) Leq f T -> Meta_monotone (fun x => x :e T) Leq f T ->
     forall S, S = {x :e T|f x = x} -> CompleteLattice (pack_r S Leq))
  = 
  (forall f:set -> set, Meta_on (fun x => x :e T) Leq' f T -> Meta_monotone (fun x => x :e T) Leq' f T ->
     forall S, S = {x :e T|f x = x} -> CompleteLattice (pack_r S Leq')).
{ let T Leq Leq'.
  assume H1: forall x y :e T, Leq x y <-> Leq' x y.
  claim H1a: forall x y :e T, Leq x y -> Leq' x y.
  { let x. assume Hx. let y. assume Hy. apply H1 x Hx y Hy. assume H _. exact H. }
  claim H1b: forall x y :e T, Leq' x y -> Leq x y.
  { let x. assume Hx. let y. assume Hy. apply H1 x Hx y Hy. assume _ H. exact H. }
  claim H1s: forall x y :e T, Leq' x y <-> Leq x y.
  { let x. assume Hx. let y. assume Hy.
    apply iffI.
    + exact H1b x Hx y Hy.
    + exact H1a x Hx y Hy.
  }
  apply prop_ext2.
  - assume H2: forall f:set -> set, Meta_on (fun x => x :e T) Leq f T -> Meta_monotone (fun x => x :e T) Leq f T ->
       forall S, S = {x :e T|f x = x} -> CompleteLattice (pack_r S Leq).
    let f. assume Hf1 Hf2. let S. assume HS.
    claim Lf2: Meta_monotone (fun x => x :e T) Leq f T.
    { let x. assume Hx. let y. assume Hy.
      assume Hxy: Leq x y.
      prove Leq (f x) (f y).
      apply H1b (f x) (Hf1 x Hx) (f y) (Hf1 y Hy).
      prove Leq' (f x) (f y).
      apply Hf2 x Hx y Hy.
      apply H1a x Hx y Hy.
      exact Hxy.
    }
    prove CompleteLattice (pack_r S Leq').
    claim LS1: S c= T.
    { rewrite HS. apply Sep_Subq. }
    claim LS2: forall x y :e S, Leq x y <-> Leq' x y.
    { let x. assume Hx. let y. assume Hy. apply H1.
      - exact LS1 x Hx.
      - exact LS1 y Hy.
    }
    rewrite <- pack_r_ext S Leq Leq' LS2.
    prove CompleteLattice (pack_r S Leq).
    exact H2 f Hf1 Lf2 S HS.
  - assume H2: forall f:set -> set, Meta_on (fun x => x :e T) Leq' f T -> Meta_monotone (fun x => x :e T) Leq' f T ->
       forall S, S = {x :e T|f x = x} -> CompleteLattice (pack_r S Leq').
    let f. assume Hf1 Hf2. let S. assume HS.
    claim Lf2: Meta_monotone (fun x => x :e T) Leq' f T.
    { let x. assume Hx. let y. assume Hy.
      assume Hxy: Leq' x y.
      prove Leq' (f x) (f y).
      apply H1a (f x) (Hf1 x Hx) (f y) (Hf1 y Hy).
      prove Leq (f x) (f y).
      apply Hf2 x Hx y Hy.
      apply H1b x Hx y Hy.
      exact Hxy.
    }
    prove CompleteLattice (pack_r S Leq).
    claim LS1: S c= T.
    { rewrite HS. apply Sep_Subq. }
    claim LS2: forall x y :e S, Leq x y <-> Leq' x y.
    { let x. assume Hx. let y. assume Hy. apply H1.
      - exact LS1 x Hx.
      - exact LS1 y Hy.
    }
    rewrite pack_r_ext S Leq Leq' LS2.
    prove CompleteLattice (pack_r S Leq').
    exact H2 f Hf1 Lf2 S HS.
}
apply CompleteLattice_equiv L. assume HLI _.
apply HLI HL. let T. assume H1. apply H1. let Leq. assume H2. apply H2. assume H3. apply H3. assume H4. apply H4.
assume H5: L = pack_r T Leq.
assume _ _ _.
rewrite H5.
rewrite unpack_r_eq prop
          (fun T Leq => forall f:set -> set, Meta_on (fun x => x :e T) Leq f T -> Meta_monotone (fun x => x :e T) Leq f T ->
            forall S, S = {x :e T|f x = x} -> CompleteLattice (pack_r S Leq))
	  L1.
prove forall f:set -> set, Meta_on (fun x => x :e T) Leq f T -> Meta_monotone (fun x => x :e T) Leq f T ->
            forall S, S = {x :e T|f x = x} -> CompleteLattice (pack_r S Leq).
let f.
assume Hf1.
assume Hf2.
let S.
assume HS.
prove CompleteLattice (pack_r S Leq).
exact KnasterTarski_a L HL T Leq H5 f Hf1 Hf2 S HS.
Qed.
